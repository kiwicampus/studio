{
   "op":"service_response",
   "service":"/rosapi/topics_and_raw_types",
   "values":{
      "topics":[
         "/None",
         "/accel/filtered",
         "/aidalm",
         "/aideph",
         "/balena/release",
         "/balena_node/update_status",
         "/behavior_server/transition_event",
         "/behavior_tree_log",
         "/bond",
         "/bot_heartbeat",
         "/bot_status/actions",
         "/bot_status/active_order",
         "/bot_status/blackbox/trigger",
         "/bot_status/panic_mode",
         "/bot_status/shutdown",
         "/bt_navigator/transition_event",
         "/c2c/costmap",
         "/c2c/costmap_warning",
         "/c2c/goal",
         "/c2c/path",
         "/c2c/start",
         "/camera/accel/imu_info",
         "/camera/accel/metadata",
         "/camera/accel/sample",
         "/camera/aligned_depth_to_color/camera_info",
         "/camera/aligned_depth_to_color/image_raw",
         "/camera/camera_imu_angles",
         "/camera/color/camera_info",
         "/camera/color/image_raw",
         "/camera/color/metadata",
         "/camera/depth/camera_info",
         "/camera/depth/color/points",
         "/camera/depth/color/points_raw",
         "/camera/depth/image_rect_raw",
         "/camera/depth/metadata",
         "/camera/extrinsics/depth_to_accel",
         "/camera/extrinsics/depth_to_color",
         "/camera/extrinsics/depth_to_depth",
         "/camera/extrinsics/depth_to_gyro",
         "/camera/gyro/imu_info",
         "/camera/gyro/metadata",
         "/camera/gyro/sample",
         "/camera/imu",
         "/cascade_lifecycle_activations",
         "/cascade_lifecycle_states",
         "/clicked_point",
         "/client_count",
         "/clock",
         "/collision_monitor_state",
         "/collision_monitor_used",
         "/connected_clients",
         "/controller_server/transition_event",
         "/data_capture/capture",
         "/data_capture/record_mode",
         "/data_capture/status",
         "/data_server/high_level_events",
         "/data_server/mapping_api_error",
         "/device/speaker/command",
         "/device/speaker/done",
         "/device/speaker/status",
         "/diagnostics",
         "/diagnostics_agg",
         "/diagnostics_toplevel_state",
         "/ekf_global/set_pose",
         "/ekf_local/set_pose",
         "/emergency_stop",
         "/eyes_tracking/activate",
         "/fail_detection/debug",
         "/fail_detection/fail",
         "/firebase/updated_config_file",
         "/fix",
         "/fix_velocity",
         "/geofence/emergency",
         "/global_costmap/costmap",
         "/global_costmap/costmap_raw",
         "/global_costmap/costmap_raw_updates",
         "/global_costmap/costmap_updates",
         "/global_costmap/footprint",
         "/global_costmap/global_costmap/transition_event",
         "/global_costmap/obstacle_layer",
         "/global_costmap/obstacle_layer_raw",
         "/global_costmap/obstacle_layer_raw_updates",
         "/global_costmap/obstacle_layer_updates",
         "/global_costmap/published_footprint",
         "/global_costmap/range_sensor_layer",
         "/global_costmap/range_sensor_layer_raw",
         "/global_costmap/range_sensor_layer_raw_updates",
         "/global_costmap/range_sensor_layer_updates",
         "/global_costmap/semantic_segmentation_layer",
         "/global_costmap/semantic_segmentation_layer_raw",
         "/global_costmap/semantic_segmentation_layer_raw_updates",
         "/global_costmap/semantic_segmentation_layer_updates",
         "/global_costmap/short_range_stvl",
         "/global_costmap/short_range_stvl_raw",
         "/global_costmap/short_range_stvl_raw_updates",
         "/global_costmap/short_range_stvl_updates",
         "/global_costmap/static_layer",
         "/global_costmap/static_layer_raw",
         "/global_costmap/static_layer_raw_updates",
         "/global_costmap/static_layer_updates",
         "/global_costmap/stvl",
         "/global_costmap/stvl_raw",
         "/global_costmap/stvl_raw_updates",
         "/global_costmap/stvl_updates",
         "/global_costmap/voxel_grid",
         "/goal_pose",
         "/gps/filtered",
         "/imu/data",
         "/imu/data_enu",
         "/imu/diagnostics",
         "/imu/magnetometer",
         "/imu/raw_data",
         "/imu/temperature",
         "/initialpose",
         "/kiwi_collision_monitor/collision_points_marker",
         "/kiwi_collision_monitor/transition_event",
         "/kiwi_collision_monitor_state",
         "/kiwi_collision_monitor_used",
         "/label_info",
         "/laser_scan_box_filter/transition_event",
         "/lifecycle_manager/transition_event",
         "/livox/angles",
         "/livox/lidar",
         "/local_client/control_cmd",
         "/local_costmap/costmap",
         "/local_costmap/costmap_raw",
         "/local_costmap/costmap_raw_updates",
         "/local_costmap/costmap_updates",
         "/local_costmap/footprint",
         "/local_costmap/local_costmap/transition_event",
         "/local_costmap/obstacle_layer",
         "/local_costmap/obstacle_layer_raw",
         "/local_costmap/obstacle_layer_raw_updates",
         "/local_costmap/obstacle_layer_updates",
         "/local_costmap/published_footprint",
         "/local_costmap/range_sensor_layer",
         "/local_costmap/range_sensor_layer_raw",
         "/local_costmap/range_sensor_layer_raw_updates",
         "/local_costmap/range_sensor_layer_updates",
         "/local_costmap/semantic_segmentation_layer",
         "/local_costmap/semantic_segmentation_layer_raw",
         "/local_costmap/semantic_segmentation_layer_raw_updates",
         "/local_costmap/semantic_segmentation_layer_updates",
         "/local_costmap/short_range_stvl",
         "/local_costmap/short_range_stvl_raw",
         "/local_costmap/short_range_stvl_raw_updates",
         "/local_costmap/short_range_stvl_updates",
         "/local_costmap/static_layer",
         "/local_costmap/static_layer_raw",
         "/local_costmap/static_layer_raw_updates",
         "/local_costmap/static_layer_updates",
         "/local_costmap/stvl",
         "/local_costmap/stvl_raw",
         "/local_costmap/stvl_raw_updates",
         "/local_costmap/stvl_updates",
         "/local_costmap/voxel_grid",
         "/local_plan",
         "/location/fix",
         "/location/gps/fix",
         "/map",
         "/map_nodes_buffer/c2c_operable",
         "/map_server/transition_event",
         "/map_signed_url",
         "/mini_lidars/transition_event",
         "/monhw",
         "/motion_control/position_controller/control_cmd",
         "/motion_control/position_controller/curvature",
         "/motion_control/position_controller/max_speed",
         "/motion_control/position_controller/on_goal",
         "/motion_control/position_controller/pose_error",
         "/motion_control/position_controller/reference_angle",
         "/motion_control/position_controller/reference_pose",
         "/motion_control/position_controller/spline",
         "/motion_control/speed_controller/error",
         "/motion_control/speed_controller/output_cmd",
         "/motion_control/speed_controller/percentage_error",
         "/motion_control/speed_controller/reduce_speed",
         "/motion_control/speed_controller/reference_cmd",
         "/move_base_simple/goal",
         "/nav2/autonomy_failed",
         "/nav2/autonomy_status",
         "/nav2/bot_map_pose",
         "/nav2/cartesian_geopath",
         "/nav2/controller_sel",
         "/nav2/current_way",
         "/nav2/feedback",
         "/nav2/goal_checker_sel",
         "/nav2/half_polygon_front",
         "/nav2/half_polygon_left",
         "/nav2/half_polygon_rear",
         "/nav2/half_polygon_right",
         "/nav2/has_active_goal",
         "/nav2/output_cmd",
         "/nav2/quarter_polygon_front",
         "/nav2/quarter_polygon_left",
         "/nav2/quarter_polygon_rear",
         "/nav2/quarter_polygon_right",
         "/nav2/raw_output_cmd",
         "/nav2/reference_geopath",
         "/nav2/reference_path",
         "/nav2/reference_pose",
         "/nav2/route_stats",
         "/nav2/sampled_plan",
         "/nav2/smoothed_output_cmd",
         "/nav2/startup_check",
         "/nav2/state",
         "/nav2/stop_polygon_front",
         "/nav2/stop_polygon_left",
         "/nav2/stop_polygon_rear",
         "/nav2/stop_polygon_right",
         "/nav2/teleop_cmd",
         "/nav2/three_quarters_polygon_front",
         "/nav2/three_quarters_polygon_left",
         "/nav2/three_quarters_polygon_rear",
         "/nav2/three_quarters_polygon_right",
         "/nav2/waiting_at_crossing",
         "/navclock",
         "/navcov",
         "/navheading",
         "/navpvt",
         "/navrelposned",
         "/navstate",
         "/navstatus",
         "/navsvin",
         "/nmea",
         "/object_detection/label_info",
         "/object_detection/start",
         "/object_detection/stereo/detections",
         "/object_detection/stereo/segmentation",
         "/odometry/global",
         "/odometry/gps",
         "/odometry/local",
         "/parameter_events",
         "/plan",
         "/planner_server/transition_event",
         "/point_perfect/status",
         "/qr_scan/data",
         "/resources_monitor/node_change_state",
         "/resources_monitor/results",
         "/rosout",
         "/routeclient/generate_route",
         "/router/gps",
         "/router/wan_data_usage",
         "/router/wan_speed",
         "/router/wan_status",
         "/routines/cancel",
         "/routines/done",
         "/routines/reference_cmd",
         "/routines/routine_id",
         "/rtcm",
         "/rtk_station/status",
         "/rxmrtcm",
         "/scan",
         "/scan_filtered",
         "/scheduler/times_reached",
         "/semantic_navigation/reference/stereo",
         "/semantic_segmentation/confidence/stereo",
         "/semantic_segmentation/confidence_downsampled/stereo",
         "/semantic_segmentation/labelinfo/stereo",
         "/semantic_segmentation/mask/stereo",
         "/semantic_segmentation/mask_downsampled/stereo",
         "/semantic_segmentation/polygon_marker/stereo",
         "/semantic_segmentation/polygons/stereo",
         "/semantic_segmentation/ready",
         "/semantic_segmentation/request_model_update",
         "/semantic_segmentation/start",
         "/sensor_0/transition_event",
         "/sensor_1/transition_event",
         "/sensor_2/transition_event",
         "/sensor_3/transition_event",
         "/sensor_4/transition_event",
         "/set_map",
         "/sidis_fsm/arm_request",
         "/sidis_fsm/drive_mode/request",
         "/sidis_fsm/drive_mode/state",
         "/slam/interest_point",
         "/slam/kill",
         "/slam/launch",
         "/slam/save_map",
         "/slam_running",
         "/smart_brake/cliff/enable",
         "/smart_brake/configuration",
         "/smart_brake/emergency_stop",
         "/smart_brake/range/enable",
         "/smart_brake/status",
         "/smart_brake/transition_event",
         "/speed_controller/transition_event",
         "/speed_limit",
         "/street_crossing/safe_to_cross",
         "/tf",
         "/tf_lidar/calibrate",
         "/tf_lidar/channels",
         "/tf_lidar/cliff0",
         "/tf_lidar/cliff4",
         "/tf_lidar/range0",
         "/tf_lidar/range1",
         "/tf_lidar/range2",
         "/tf_lidar/range3",
         "/tf_lidar/range4",
         "/tf_static",
         "/traffic_lights/detections/stereo",
         "/trajectories",
         "/transformed_global_plan",
         "/uavcan/chassis/emergency_stop",
         "/uavcan/chassis/emergency_stop_disarm",
         "/uavcan/chassis/information",
         "/uavcan/chassis/motors_current",
         "/uavcan/chassis/motors_error",
         "/uavcan/chassis/motors_rpm_feedback",
         "/uavcan/chassis/motors_rpm_out",
         "/uavcan/chassis/motors_temperature",
         "/uavcan/chassis/pid_values/information",
         "/uavcan/chassis/status",
         "/uavcan/chassis/test_response",
         "/uavcan/main/battery_information",
         "/uavcan/main/battery_uuid",
         "/uavcan/main/battery_voltage",
         "/uavcan/main/fans/status",
         "/uavcan/main/information",
         "/uavcan/main/lights/status",
         "/uavcan/main/status",
         "/uavcan/rear_board/auto_cooling",
         "/uavcan/rear_board/flag/status",
         "/uavcan/rear_board/information",
         "/uavcan/rear_board/rear_light/status",
         "/uavcan/rear_board/sensors/information",
         "/uavcan/rear_board/status",
         "/uavcan/rx_wireless/information",
         "/uavcan/rx_wireless/rx_comm",
         "/uavcan/rx_wireless/status",
         "/uavcan/screen/current_animation",
         "/uavcan/screen/eyes_point",
         "/uavcan/screen/information",
         "/uavcan/screen/status",
         "/unsmoothed_plan",
         "/velocity_smoother/transition_event",
         "/video_mapping/camera_select",
         "/video_mapping/cams_status",
         "/video_mapping/force_rearview",
         "/video_mapping/inner/camera_info",
         "/video_mapping/inner/image_raw",
         "/video_mapping/inner/image_rect",
         "/video_mapping/inner/status",
         "/video_mapping/left/camera_info",
         "/video_mapping/left/image_raw",
         "/video_mapping/left/image_rect",
         "/video_mapping/left/status",
         "/video_mapping/night_vision",
         "/video_mapping/rear/camera_info",
         "/video_mapping/rear/image_raw",
         "/video_mapping/rear/image_rect",
         "/video_mapping/rear/status",
         "/video_mapping/request_stitching_snapshot",
         "/video_mapping/right/camera_info",
         "/video_mapping/right/image_raw",
         "/video_mapping/right/image_rect",
         "/video_mapping/right/status",
         "/video_mapping/screen_click",
         "/video_mapping/show_map",
         "/video_mapping/un_distort",
         "/video_mapping/zoom/camera_info",
         "/video_mapping/zoom/image_raw",
         "/video_mapping/zoom/image_rect",
         "/video_mapping/zoom/status",
         "/video_streaming/stitched_cameras",
         "/video_streaming/supervisors",
         "/waypoint/transition_event",
         "/weather/timezone",
         "/weather/weather",
         "/web_client/connection",
         "/web_client/control_cmd",
         "/web_client/order_status",
         "/web_client/start_c2c",
         "/web_client/turbo_status",
         "/webclient/supervisor_msg",
         "/webclientpy/latency",
         "/webclientpy/supervisor_email",
         "/wheel_odometry/global_odometry",
         "/wheel_odometry/is_moving",
         "/wheel_odometry/local_odometry",
         "/wheel_odometry/total_distance",
         "/wheel_odometry/transition_event",
         "/wifi_geo/fix"
      ],
      "types":[
         "can_msgs/msg/Heartbeat",
         "geometry_msgs/msg/AccelWithCovarianceStamped",
         "ublox_msgs/msg/AidALM",
         "ublox_msgs/msg/AidEPH",
         "std_msgs/msg/String",
         "bot_status_msgs/msg/BalenaUpdate",
         "lifecycle_msgs/msg/TransitionEvent",
         "nav2_msgs/msg/BehaviorTreeLog",
         "bond/msg/Status",
         "heartbeat_msgs/msg/BotHeartbeat",
         "bot_status_msgs/msg/StringStamped",
         "std_msgs/msg/Bool",
         "std_msgs/msg/String",
         "std_msgs/msg/Bool",
         "std_msgs/msg/String",
         "lifecycle_msgs/msg/TransitionEvent",
         "nav_msgs/msg/OccupancyGrid",
         "std_msgs/msg/Empty",
         "geometry_msgs/msg/PoseStamped",
         "nav_msgs/msg/Path",
         "std_msgs/msg/Bool",
         "realsense2_camera_msgs/msg/IMUInfo",
         "realsense2_camera_msgs/msg/Metadata",
         "sensor_msgs/msg/Imu",
         "sensor_msgs/msg/CameraInfo",
         "sensor_msgs/msg/Image",
         "geometry_msgs/msg/Quaternion",
         "sensor_msgs/msg/CameraInfo",
         "sensor_msgs/msg/Image",
         "realsense2_camera_msgs/msg/Metadata",
         "sensor_msgs/msg/CameraInfo",
         "sensor_msgs/msg/PointCloud2",
         "sensor_msgs/msg/PointCloud2",
         "sensor_msgs/msg/Image",
         "realsense2_camera_msgs/msg/Metadata",
         "realsense2_camera_msgs/msg/Extrinsics",
         "realsense2_camera_msgs/msg/Extrinsics",
         "realsense2_camera_msgs/msg/Extrinsics",
         "realsense2_camera_msgs/msg/Extrinsics",
         "realsense2_camera_msgs/msg/IMUInfo",
         "realsense2_camera_msgs/msg/Metadata",
         "sensor_msgs/msg/Imu",
         "sensor_msgs/msg/Imu",
         "cascade_lifecycle_msgs/msg/Activation",
         "cascade_lifecycle_msgs/msg/State",
         "geometry_msgs/msg/PointStamped",
         "std_msgs/msg/Int32",
         "rosgraph_msgs/msg/Clock",
         "nav2_msgs/msg/CollisionMonitorState",
         "std_msgs/msg/Bool",
         "rosbridge_msgs/msg/ConnectedClients",
         "lifecycle_msgs/msg/TransitionEvent",
         "std_msgs/msg/Bool",
         "std_msgs/msg/String",
         "usr_msgs/msg/CaptureStatus",
         "bot_status_msgs/msg/BotEventData",
         "mapping_api_msgs/msg/MapApiError",
         "usr_msgs/msg/SpeakerParams",
         "std_msgs/msg/Bool",
         "usr_msgs/msg/SpeakerStatus",
         "diagnostic_msgs/msg/DiagnosticArray",
         "diagnostic_msgs/msg/DiagnosticArray",
         "diagnostic_msgs/msg/DiagnosticStatus",
         "geometry_msgs/msg/PoseWithCovarianceStamped",
         "geometry_msgs/msg/PoseWithCovarianceStamped",
         "std_msgs/msg/Bool",
         "std_msgs/msg/Bool",
         "geometry_msgs/msg/Vector3",
         "usr_msgs/msg/Fails",
         "std_msgs/msg/Empty",
         "sensor_msgs/msg/NavSatFix",
         "geometry_msgs/msg/TwistWithCovarianceStamped",
         "std_msgs/msg/Bool",
         "nav_msgs/msg/OccupancyGrid",
         "nav2_msgs/msg/Costmap",
         "nav2_msgs/msg/CostmapUpdate",
         "map_msgs/msg/OccupancyGridUpdate",
         "geometry_msgs/msg/Polygon",
         "lifecycle_msgs/msg/TransitionEvent",
         "nav_msgs/msg/OccupancyGrid",
         "nav2_msgs/msg/Costmap",
         "nav2_msgs/msg/CostmapUpdate",
         "map_msgs/msg/OccupancyGridUpdate",
         "geometry_msgs/msg/PolygonStamped",
         "nav_msgs/msg/OccupancyGrid",
         "nav2_msgs/msg/Costmap",
         "nav2_msgs/msg/CostmapUpdate",
         "map_msgs/msg/OccupancyGridUpdate",
         "nav_msgs/msg/OccupancyGrid",
         "nav2_msgs/msg/Costmap",
         "nav2_msgs/msg/CostmapUpdate",
         "map_msgs/msg/OccupancyGridUpdate",
         "nav_msgs/msg/OccupancyGrid",
         "nav2_msgs/msg/Costmap",
         "nav2_msgs/msg/CostmapUpdate",
         "map_msgs/msg/OccupancyGridUpdate",
         "nav_msgs/msg/OccupancyGrid",
         "nav2_msgs/msg/Costmap",
         "nav2_msgs/msg/CostmapUpdate",
         "map_msgs/msg/OccupancyGridUpdate",
         "nav_msgs/msg/OccupancyGrid",
         "nav2_msgs/msg/Costmap",
         "nav2_msgs/msg/CostmapUpdate",
         "map_msgs/msg/OccupancyGridUpdate",
         "sensor_msgs/msg/PointCloud2",
         "geometry_msgs/msg/PoseStamped",
         "sensor_msgs/msg/NavSatFix",
         "sensor_msgs/msg/Imu",
         "sensor_msgs/msg/Imu",
         "usr_msgs/msg/ImuError",
         "sensor_msgs/msg/MagneticField",
         "sensor_msgs/msg/Imu",
         "sensor_msgs/msg/Temperature",
         "geometry_msgs/msg/PoseWithCovarianceStamped",
         "visualization_msgs/msg/MarkerArray",
         "lifecycle_msgs/msg/TransitionEvent",
         "nav2_msgs/msg/CollisionMonitorState",
         "std_msgs/msg/Bool",
         "vision_msgs/msg/LabelInfo",
         "lifecycle_msgs/msg/TransitionEvent",
         "lifecycle_msgs/msg/TransitionEvent",
         "geometry_msgs/msg/Quaternion",
         "sensor_msgs/msg/PointCloud2",
         "geometry_msgs/msg/Twist",
         "nav_msgs/msg/OccupancyGrid",
         "nav2_msgs/msg/Costmap",
         "nav2_msgs/msg/CostmapUpdate",
         "map_msgs/msg/OccupancyGridUpdate",
         "geometry_msgs/msg/Polygon",
         "lifecycle_msgs/msg/TransitionEvent",
         "nav_msgs/msg/OccupancyGrid",
         "nav2_msgs/msg/Costmap",
         "nav2_msgs/msg/CostmapUpdate",
         "map_msgs/msg/OccupancyGridUpdate",
         "geometry_msgs/msg/PolygonStamped",
         "nav_msgs/msg/OccupancyGrid",
         "nav2_msgs/msg/Costmap",
         "nav2_msgs/msg/CostmapUpdate",
         "map_msgs/msg/OccupancyGridUpdate",
         "nav_msgs/msg/OccupancyGrid",
         "nav2_msgs/msg/Costmap",
         "nav2_msgs/msg/CostmapUpdate",
         "map_msgs/msg/OccupancyGridUpdate",
         "nav_msgs/msg/OccupancyGrid",
         "nav2_msgs/msg/Costmap",
         "nav2_msgs/msg/CostmapUpdate",
         "map_msgs/msg/OccupancyGridUpdate",
         "nav_msgs/msg/OccupancyGrid",
         "nav2_msgs/msg/Costmap",
         "nav2_msgs/msg/CostmapUpdate",
         "map_msgs/msg/OccupancyGridUpdate",
         "nav_msgs/msg/OccupancyGrid",
         "nav2_msgs/msg/Costmap",
         "nav2_msgs/msg/CostmapUpdate",
         "map_msgs/msg/OccupancyGridUpdate",
         "sensor_msgs/msg/PointCloud2",
         "nav_msgs/msg/Path",
         "usr_msgs/msg/LocationMsg",
         "sensor_msgs/msg/NavSatFix",
         "nav_msgs/msg/OccupancyGrid",
         "mapping_api_msgs/msg/OperableC2C",
         "lifecycle_msgs/msg/TransitionEvent",
         "std_msgs/msg/String",
         "lifecycle_msgs/msg/TransitionEvent",
         "ublox_msgs/msg/MonHW",
         "geometry_msgs/msg/TwistStamped",
         "std_msgs/msg/Float32",
         "std_msgs/msg/Float32",
         "std_msgs/msg/Bool",
         "geometry_msgs/msg/PoseStamped",
         "std_msgs/msg/Float32",
         "geometry_msgs/msg/PoseStamped",
         "usr_msgs/msg/Coordinates",
         "can_msgs/msg/ControllerErrors",
         "geometry_msgs/msg/Twist",
         "can_msgs/msg/ControllerErrors",
         "std_msgs/msg/Bool",
         "geometry_msgs/msg/TwistStamped",
         "geometry_msgs/msg/PoseStamped",
         "std_msgs/msg/Bool",
         "std_msgs/msg/Bool",
         "geometry_msgs/msg/Pose2D",
         "nav_msgs/msg/Path",
         "std_msgs/msg/String",
         "mapping_api_msgs/msg/WayMetadata",
         "usr_msgs/msg/Nav2FeedBack",
         "std_msgs/msg/String",
         "geometry_msgs/msg/PolygonStamped",
         "geometry_msgs/msg/PolygonStamped",
         "geometry_msgs/msg/PolygonStamped",
         "geometry_msgs/msg/PolygonStamped",
         "std_msgs/msg/Bool",
         "geometry_msgs/msg/Twist",
         "geometry_msgs/msg/PolygonStamped",
         "geometry_msgs/msg/PolygonStamped",
         "geometry_msgs/msg/PolygonStamped",
         "geometry_msgs/msg/PolygonStamped",
         "geometry_msgs/msg/Twist",
         "usr_msgs/msg/Nav2GeoPath",
         "usr_msgs/msg/Nav2ReferencePath",
         "geometry_msgs/msg/PoseStamped",
         "usr_msgs/msg/Nav2RouteStats",
         "nav_msgs/msg/Path",
         "geometry_msgs/msg/Twist",
         "usr_msgs/msg/Nav2StartupCheck",
         "std_msgs/msg/String",
         "geometry_msgs/msg/PolygonStamped",
         "geometry_msgs/msg/PolygonStamped",
         "geometry_msgs/msg/PolygonStamped",
         "geometry_msgs/msg/PolygonStamped",
         "geometry_msgs/msg/TwistStamped",
         "geometry_msgs/msg/PolygonStamped",
         "geometry_msgs/msg/PolygonStamped",
         "geometry_msgs/msg/PolygonStamped",
         "geometry_msgs/msg/PolygonStamped",
         "std_msgs/msg/Bool",
         "ublox_msgs/msg/NavCLOCK",
         "ublox_msgs/msg/NavCOV",
         "sensor_msgs/msg/Imu",
         "ublox_msgs/msg/NavPVT",
         "ublox_msgs/msg/NavRELPOSNED9",
         "ublox_msgs/msg/NavSAT",
         "ublox_msgs/msg/NavSTATUS",
         "ublox_msgs/msg/NavSVIN",
         "nmea_msgs/msg/Sentence",
         "vision_msgs/msg/LabelInfo",
         "std_msgs/msg/Bool",
         "usr_msgs/msg/Detections",
         "sensor_msgs/msg/Image",
         "nav_msgs/msg/Odometry",
         "nav_msgs/msg/Odometry",
         "nav_msgs/msg/Odometry",
         "rcl_interfaces/msg/ParameterEvent",
         "nav_msgs/msg/Path",
         "lifecycle_msgs/msg/TransitionEvent",
         "std_msgs/msg/Bool",
         "usr_msgs/msg/QrMessage",
         "usr_msgs/msg/NodeChangeState",
         "usr_msgs/msg/ResourcesUsage",
         "rcl_interfaces/msg/Log",
         "geographic_msgs/msg/GeoPoint",
         "sensor_msgs/msg/NavSatFix",
         "router_msgs/msg/WanDataUsage",
         "router_msgs/msg/WanSpeed",
         "router_msgs/msg/WanStatus",
         "std_msgs/msg/Bool",
         "std_msgs/msg/Bool",
         "geometry_msgs/msg/TwistStamped",
         "std_msgs/msg/Int8",
         "rtcm_msgs/msg/Message",
         "std_msgs/msg/Bool",
         "ublox_msgs/msg/RxmRTCM",
         "sensor_msgs/msg/LaserScan",
         "sensor_msgs/msg/LaserScan",
         "weather_msgs/msg/ScheduledTimeReached",
         "usr_msgs/msg/WayPointsNav",
         "sensor_msgs/msg/Image",
         "sensor_msgs/msg/Image",
         "vision_msgs/msg/LabelInfo",
         "sensor_msgs/msg/Image",
         "sensor_msgs/msg/Image",
         "visualization_msgs/msg/ImageMarker",
         "usr_msgs/msg/PolyDetections",
         "std_msgs/msg/Bool",
         "std_msgs/msg/Empty",
         "std_msgs/msg/Bool",
         "lifecycle_msgs/msg/TransitionEvent",
         "lifecycle_msgs/msg/TransitionEvent",
         "lifecycle_msgs/msg/TransitionEvent",
         "lifecycle_msgs/msg/TransitionEvent",
         "lifecycle_msgs/msg/TransitionEvent",
         "std_msgs/msg/String",
         "std_msgs/msg/Bool",
         "std_msgs/msg/String",
         "std_msgs/msg/String",
         "geometry_msgs/msg/PoseStamped",
         "std_msgs/msg/Empty",
         "std_msgs/msg/Empty",
         "std_msgs/msg/String",
         "std_msgs/msg/Bool",
         "usr_msgs/msg/General",
         "std_msgs/msg/Float32",
         "usr_msgs/msg/EmergencyStop",
         "usr_msgs/msg/General",
         "usr_msgs/msg/BrakeStatus",
         "lifecycle_msgs/msg/TransitionEvent",
         "lifecycle_msgs/msg/TransitionEvent",
         "nav2_msgs/msg/SpeedLimit",
         "std_msgs/msg/Bool",
         "tf2_msgs/msg/TFMessage",
         "std_msgs/msg/Empty",
         "usr_msgs/msg/Sensors",
         "sensor_msgs/msg/Range",
         "sensor_msgs/msg/Range",
         "sensor_msgs/msg/Range",
         "sensor_msgs/msg/Range",
         "sensor_msgs/msg/Range",
         "sensor_msgs/msg/Range",
         "sensor_msgs/msg/Range",
         "tf2_msgs/msg/TFMessage",
         "vision_msgs/msg/Detection2DArray",
         "visualization_msgs/msg/MarkerArray",
         "nav_msgs/msg/Path",
         "std_msgs/msg/Bool",
         "std_msgs/msg/Bool",
         "can_msgs/msg/BoardInformation",
         "can_msgs/msg/MotorsCurrent",
         "can_msgs/msg/MotorsError",
         "can_msgs/msg/MotorsRPM",
         "can_msgs/msg/MotorsRPM",
         "can_msgs/msg/MotorsTemperature",
         "can_msgs/msg/PidValues",
         "can_msgs/msg/Heartbeat",
         "can_msgs/msg/TestReport",
         "can_msgs/msg/BMS",
         "std_msgs/msg/String",
         "std_msgs/msg/Float32",
         "std_msgs/msg/UInt8",
         "can_msgs/msg/BoardInformation",
         "can_msgs/msg/LightStatus",
         "can_msgs/msg/Heartbeat",
         "std_msgs/msg/Bool",
         "can_msgs/msg/LightStatus",
         "can_msgs/msg/BoardInformation",
         "can_msgs/msg/LightStatus",
         "can_msgs/msg/RearSensors",
         "can_msgs/msg/Heartbeat",
         "can_msgs/msg/BoardInformation",
         "can_msgs/msg/RxComm",
         "can_msgs/msg/Heartbeat",
         "std_msgs/msg/UInt8",
         "can_msgs/msg/EyesPixel",
         "can_msgs/msg/BoardInformation",
         "can_msgs/msg/Heartbeat",
         "nav_msgs/msg/Path",
         "lifecycle_msgs/msg/TransitionEvent",
         "std_msgs/msg/String",
         "usr_msgs/msg/CamerasStatus",
         "std_msgs/msg/Empty",
         "sensor_msgs/msg/CameraInfo",
         "sensor_msgs/msg/Image",
         "sensor_msgs/msg/Image",
         "std_msgs/msg/UInt8",
         "sensor_msgs/msg/CameraInfo",
         "sensor_msgs/msg/Image",
         "sensor_msgs/msg/Image",
         "std_msgs/msg/UInt8",
         "std_msgs/msg/Bool",
         "sensor_msgs/msg/CameraInfo",
         "sensor_msgs/msg/Image",
         "sensor_msgs/msg/Image",
         "std_msgs/msg/UInt8",
         "std_msgs/msg/Empty",
         "sensor_msgs/msg/CameraInfo",
         "sensor_msgs/msg/Image",
         "sensor_msgs/msg/Image",
         "std_msgs/msg/UInt8",
         "geometry_msgs/msg/PointStamped",
         "std_msgs/msg/Bool",
         "std_msgs/msg/Bool",
         "sensor_msgs/msg/CameraInfo",
         "sensor_msgs/msg/Image",
         "sensor_msgs/msg/Image",
         "std_msgs/msg/UInt8",
         "sensor_msgs/msg/Image",
         "sensor_msgs/msg/Image",
         "lifecycle_msgs/msg/TransitionEvent",
         "weather_msgs/msg/Timezone",
         "weather_msgs/msg/CurrentWeather",
         "std_msgs/msg/Bool",
         "geometry_msgs/msg/TwistStamped",
         "webclient_msgs/msg/OrderStatus",
         "std_msgs/msg/Empty",
         "std_msgs/msg/Bool",
         "bot_status_msgs/msg/SupervisorMessage",
         "std_msgs/msg/Float32",
         "std_msgs/msg/String",
         "nav_msgs/msg/Odometry",
         "std_msgs/msg/Bool",
         "nav_msgs/msg/Odometry",
         "std_msgs/msg/Float64",
         "lifecycle_msgs/msg/TransitionEvent",
         "sensor_msgs/msg/NavSatFix"
      ],
      "typedefs_full_text":[
         "# Message containing the current state of some boards in real time.\n# header    [std_msgs/header]: Sequence and timestamp of the current message.\n# mode      [string]: Operational mode.\n# vssc      [string]: Vendor specific status code indicating, vary on each board.\n# health    [bool]: UNUSED. its health status should reflect the status of the worst-performing activity. However, this field isn't property implemented\n\n## Mode possible values:\nuint8 MODE_OPERATIONAL=0\nuint8 MODE_INITIALIZATION=1\nuint8 MODE_MAINTENANCE=2\nuint8 MODE_SOFTWARE_UPDATE=3\nuint8 MODE_BLUETOOTH=4\nuint8 MODE_UNKNOW=5\n\n## VSS posible values\nuint8 VSS_NO_INFO=0\n# Chassis board VSS\nuint8 VSS_CHASSIS_ARMED=1\nuint8 VSS_CHASSIS_DISARMED=2\n# REAR board constants\nuint8 VSS_REAR_DOOR_OPENED=0\nuint8 VSS_REAR_DOOR_OPENING=1\nuint8 VSS_REAR_DOOR_CLOSED=2\nuint8 VSS_REAR_DOOR_CLOSING=3\nuint8 VSS_REAR_DOOR_STALLED=4\n\nstd_msgs/Header header\nbool health\nuint8 mode\nuint8 vssc\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This represents an estimated accel with reference coordinate frame and timestamp.\nstd_msgs/Header header\nAccelWithCovariance accel\n\n================================================================================\nMSG: geometry_msgs/AccelWithCovariance\n# This expresses acceleration in free space with uncertainty.\n\nAccel accel\n\n# Row-major representation of the 6x6 covariance matrix\n# The orientation parameters use a fixed-axis representation.\n# In order, the parameters are:\n# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\nfloat64[36] covariance\n\n================================================================================\nMSG: geometry_msgs/Accel\n# This expresses acceleration in free space broken into its linear and angular parts.\nVector3  linear\nVector3  angular\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space.\n\n# This is semantically different than a point.\n# A vector is always anchored at the origin.\n# When a transform is applied to a vector, only the rotational component is applied.\n\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# AID-ALM (0x0B 0x30)\n# GPS Aiding Almanach Input/Output Message\n#\n# All UBX-AID messages are deprecated; use UBX-MGA messages instead\n# - If the WEEK Value is 0, DWRD0 to DWRD7 are not sent as the almanach is not\n#   available for the given SV. This may happen even if NAV-SVINFO and RXM-SVSI\n#   are indicating almanac availability as the internal data may not represent\n#   the content of an original broadcast almanac (or only parts thereof).\n# - DWORD0 to DWORD7 contain the 8 words following the Hand-Over Word ( HOW )\n#   from the GPS navigation message, either pages 1 to 24 of sub-frame 5 or\n#   pages 2 to 10 of subframe 4. See IS-GPS-200 for a full description of the\n#   contents of the Almanac pages.\n# - In DWORD0 to DWORD7, the parity bits have been removed, and the 24 bits of\n#   data are located in Bits 0 to 23. Bits 24 to 31 shall be ignored.\n# - Example: Parameter e (Eccentricity) from Almanach Subframe 4/5, Word 3,\n#   Bits 69-84 within the subframe can be found in DWRD0, Bits 15-0 whereas\n#   Bit 0 is the LSB.\n\nuint8 CLASS_ID = 11\nuint8 MESSAGE_ID = 48\n\nuint32 svid             # SV ID for which the receiver shall return its\n                        # Almanac Data (Valid Range: 1 .. 32 or 51, 56, 63).\nuint32 week             # Issue Date of Almanach (GPS week number)\n\n# Start of optional block\nuint32[] dwrd           # Almanac Words\n# End of optional block\n",
         "# AID-EPH (0x0B 0x31)\n# GPS Aiding Ephemeris Input/Output Message\n#\n# All UBX-AID messages are deprecated; use UBX-MGA messages instead\n# - SF1D0 to SF3D7 is only sent if ephemeris is available for this SV. If not, the payload may\n#   be reduced to 8 Bytes, or all bytes are set to zero, indicating that this SV Number does\n#   not have valid ephemeris for the moment. This may happen even if NAV-SVINFO and\n#   RXM-SVSI are indicating ephemeris availability as the internal data may not represent the\n#   content of an original broadcast ephemeris (or only parts thereof).\n# - SF1D0 to SF3D7 contain the 24 words following the Hand-Over Word ( HOW ) from the\n#   GPS navigation message, subframes 1 to 3. The Truncated TOW Count is not valid and\n#   cannot be used. See IS-GPS-200 for a full description of the contents of the Subframes.\n# - In SF1D0 to SF3D7, the parity bits have been removed, and the 24 bits of data are\n#   located in Bits 0 to 23. Bits 24 to 31 shall be ignored.\n# - When polled, the data contained in this message does not represent the full original\n#   ephemeris broadcast. Some fields that are irrelevant to u-blox receivers may be missing.\n#   The week number in Subframe 1 has already been modified to match the Time Of\n#   Ephemeris (TOE).\n\nuint8 CLASS_ID = 11\nuint8 MESSAGE_ID = 49\n\nuint32 svid             # SV ID for which this ephemeris data is\n                        # (Valid Range: 1 .. 32).\nuint32 how              # Hand-Over Word of first Subframe. This is\n                        # required if data is sent to the receiver.\n                        # 0 indicates that no Ephemeris Data is following.\n\n# Start of optional block\nuint32[] sf1d           # Subframe 1 Words 3..10 (SF1D0..SF1D7)\nuint32[] sf2d           # Subframe 2 Words 3..10 (SF2D0..SF2D7)\nuint32[] sf3d           # Subframe 3 Words 3..10 (SF3D0..SF3D7)\n# End of optional block\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nstring data\n",
         "# Msg for retrieving the current state of the Balena Update\n# update_downloaded [bool]: It reports true if the last requested update is already finished.\n# update_pending    [bool]: Wheter or not there is a currently pending update. \n# update_failed     [bool]: True if the console by any chance has reported a failure.\n# status            [string]: Reports if the update process is currently active or idle.\n# type              [string]: \"Update\" if there is a commit change, \"Configuration\" if there is an env. var change.\n# download_progress [int8]: Current advance of the download process\n\nbool update_downloaded\nbool update_pending\nbool update_failed\nstring status\nstring type\nint8 download_progress",
         "# The time point at which this event occurred.\nuint64 timestamp\n\n# The id and label of this transition event.\nTransition transition\n\n# The starting state from which this event transitioned.\nState start_state\n\n# The end state of this transition event.\nState goal_state\n\n================================================================================\nMSG: lifecycle_msgs/State\n# Primary state definitions as depicted in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# These are the primary states. State changes can only be requested when the\n# node is in one of these states.\n\n# Indicates state has not yet been set.\nuint8 PRIMARY_STATE_UNKNOWN = 0\n\n# This is the life cycle state the node is in immediately after being\n# instantiated.\nuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\n# This state represents a node that is not currently performing any processing.\nuint8 PRIMARY_STATE_INACTIVE = 2\n\n# This is the main state of the node's life cycle. While in this state, the node\n# performs any processing, responds to service requests, reads and processes\n# data, produces output, etc.\nuint8 PRIMARY_STATE_ACTIVE = 3\n\n# The finalized state is the state in which the node ends immediately before\n# being destroyed.\nuint8 PRIMARY_STATE_FINALIZED = 4\n\n# Temporary intermediate states. When a transition is requested, the node\n# changes its state into one of these states.\n\n# In this transition state the node's onConfigure callback will be called to\n# allow the node to load its configuration and conduct any required setup.\nuint8 TRANSITION_STATE_CONFIGURING = 10\n\n# In this transition state the node's callback onCleanup will be called to clear\n# all state and return the node to a functionally equivalent state as when\n# first created.\nuint8 TRANSITION_STATE_CLEANINGUP = 11\n\n# In this transition state the callback onShutdown will be executed to do any\n# cleanup necessary before destruction.\nuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\n# In this transition state the callback onActivate will be executed to do any\n# final preparations to start executing.\nuint8 TRANSITION_STATE_ACTIVATING = 13\n\n# In this transition state the callback onDeactivate will be executed to do any\n# cleanup to start executing, and reverse the onActivate changes.\nuint8 TRANSITION_STATE_DEACTIVATING = 14\n\n# This transition state is where any error may be cleaned up.\nuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\n# The state id value from the above definitions.\nuint8 id\n\n# A text label of the state.\nstring label\n\n================================================================================\nMSG: lifecycle_msgs/Transition\n# Default values for transitions as described in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# Reserved [0-9], publicly available transitions.\n# When a node is in one of these primary states, these transitions can be\n# invoked.\n\n# This transition will instantiate the node, but will not run any code beyond\n# the constructor.\nuint8 TRANSITION_CREATE = 0\n\n# The node's onConfigure callback will be called to allow the node to load its\n# configuration and conduct any required setup.\nuint8 TRANSITION_CONFIGURE = 1\n\n# The node's callback onCleanup will be called in this transition to allow the\n# node to load its configuration and conduct any required setup.\nuint8 TRANSITION_CLEANUP = 2\n\n# The node's callback onActivate will be executed to do any final preparations\n# to start executing.\nuint8 TRANSITION_ACTIVATE = 3\n\n# The node's callback onDeactivate will be executed to do any cleanup to start\n# executing, and reverse the onActivate changes.\nuint8 TRANSITION_DEACTIVATE = 4\n\n# This signals shutdown during an unconfigured state, the node's callback\n# onShutdown will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\n# This signals shutdown during an inactive state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\n# This signals shutdown during an active state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\n# This transition will simply cause the deallocation of the node.\nuint8 TRANSITION_DESTROY = 8\n\n# Reserved [10-69], private transitions\n# These transitions are not publicly available and cannot be invoked by a user.\n# The following transitions are implicitly invoked based on the callback\n# feedback of the intermediate transition states.\nuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\nuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\nuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\nuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\nuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\nuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\nuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\nuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\nuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\nuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\nuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\nuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\nuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\nuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\nuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\nuint8 TRANSITION_ON_ERROR_SUCCESS = 60\nuint8 TRANSITION_ON_ERROR_FAILURE = 61\nuint8 TRANSITION_ON_ERROR_ERROR = 62\n\n# Reserved [90-99]. Transition callback success values.\n# These return values ought to be set as a return value for each callback.\n# Depending on which return value, the transition will be executed correctly or\n# fallback/error callbacks will be triggered.\n\n# The transition callback successfully performed its required functionality.\nuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\n# The transition callback failed to perform its required functionality.\nuint8 TRANSITION_CALLBACK_FAILURE = 98\n\n# The transition callback encountered an error that requires special cleanup, if\n# possible.\nuint8 TRANSITION_CALLBACK_ERROR = 99\n\n##\n## Fields\n##\n\n# The transition id from above definitions.\nuint8 id\n\n# A text label of the transition.\nstring label\n",
         "builtin_interfaces/Time timestamp    # ROS time that this log message was sent.\nBehaviorTreeStatusChange[] event_log\n\n================================================================================\nMSG: nav2_msgs/BehaviorTreeStatusChange\nbuiltin_interfaces/Time timestamp   # internal behavior tree event timestamp. Typically this is wall clock time\nstring node_name\nuint16 uid                          # unique ID for this node\nstring previous_status              # IDLE, RUNNING, SUCCESS or FAILURE\nstring current_status               # IDLE, RUNNING, SUCCESS or FAILURE\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "std_msgs/Header header\nstring id  # ID of the bond\nstring instance_id  # Unique ID for an individual in a bond\nbool active\n\n# Including the timeouts for the bond makes it easier to debug mis-matches\n# between the two sides.\nfloat32 heartbeat_timeout\nfloat32 heartbeat_period\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# failed to get full definition text for heartbeat_msgs/msg/BotHeartbeat: //",
         "# header [std_msgs/Header]: standard header message.\n# data [string]: the data string to send.\n\nstd_msgs/Header header\nstring data\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nstring data\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nstring data\n",
         "# The time point at which this event occurred.\nuint64 timestamp\n\n# The id and label of this transition event.\nTransition transition\n\n# The starting state from which this event transitioned.\nState start_state\n\n# The end state of this transition event.\nState goal_state\n\n================================================================================\nMSG: lifecycle_msgs/State\n# Primary state definitions as depicted in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# These are the primary states. State changes can only be requested when the\n# node is in one of these states.\n\n# Indicates state has not yet been set.\nuint8 PRIMARY_STATE_UNKNOWN = 0\n\n# This is the life cycle state the node is in immediately after being\n# instantiated.\nuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\n# This state represents a node that is not currently performing any processing.\nuint8 PRIMARY_STATE_INACTIVE = 2\n\n# This is the main state of the node's life cycle. While in this state, the node\n# performs any processing, responds to service requests, reads and processes\n# data, produces output, etc.\nuint8 PRIMARY_STATE_ACTIVE = 3\n\n# The finalized state is the state in which the node ends immediately before\n# being destroyed.\nuint8 PRIMARY_STATE_FINALIZED = 4\n\n# Temporary intermediate states. When a transition is requested, the node\n# changes its state into one of these states.\n\n# In this transition state the node's onConfigure callback will be called to\n# allow the node to load its configuration and conduct any required setup.\nuint8 TRANSITION_STATE_CONFIGURING = 10\n\n# In this transition state the node's callback onCleanup will be called to clear\n# all state and return the node to a functionally equivalent state as when\n# first created.\nuint8 TRANSITION_STATE_CLEANINGUP = 11\n\n# In this transition state the callback onShutdown will be executed to do any\n# cleanup necessary before destruction.\nuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\n# In this transition state the callback onActivate will be executed to do any\n# final preparations to start executing.\nuint8 TRANSITION_STATE_ACTIVATING = 13\n\n# In this transition state the callback onDeactivate will be executed to do any\n# cleanup to start executing, and reverse the onActivate changes.\nuint8 TRANSITION_STATE_DEACTIVATING = 14\n\n# This transition state is where any error may be cleaned up.\nuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\n# The state id value from the above definitions.\nuint8 id\n\n# A text label of the state.\nstring label\n\n================================================================================\nMSG: lifecycle_msgs/Transition\n# Default values for transitions as described in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# Reserved [0-9], publicly available transitions.\n# When a node is in one of these primary states, these transitions can be\n# invoked.\n\n# This transition will instantiate the node, but will not run any code beyond\n# the constructor.\nuint8 TRANSITION_CREATE = 0\n\n# The node's onConfigure callback will be called to allow the node to load its\n# configuration and conduct any required setup.\nuint8 TRANSITION_CONFIGURE = 1\n\n# The node's callback onCleanup will be called in this transition to allow the\n# node to load its configuration and conduct any required setup.\nuint8 TRANSITION_CLEANUP = 2\n\n# The node's callback onActivate will be executed to do any final preparations\n# to start executing.\nuint8 TRANSITION_ACTIVATE = 3\n\n# The node's callback onDeactivate will be executed to do any cleanup to start\n# executing, and reverse the onActivate changes.\nuint8 TRANSITION_DEACTIVATE = 4\n\n# This signals shutdown during an unconfigured state, the node's callback\n# onShutdown will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\n# This signals shutdown during an inactive state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\n# This signals shutdown during an active state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\n# This transition will simply cause the deallocation of the node.\nuint8 TRANSITION_DESTROY = 8\n\n# Reserved [10-69], private transitions\n# These transitions are not publicly available and cannot be invoked by a user.\n# The following transitions are implicitly invoked based on the callback\n# feedback of the intermediate transition states.\nuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\nuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\nuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\nuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\nuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\nuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\nuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\nuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\nuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\nuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\nuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\nuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\nuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\nuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\nuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\nuint8 TRANSITION_ON_ERROR_SUCCESS = 60\nuint8 TRANSITION_ON_ERROR_FAILURE = 61\nuint8 TRANSITION_ON_ERROR_ERROR = 62\n\n# Reserved [90-99]. Transition callback success values.\n# These return values ought to be set as a return value for each callback.\n# Depending on which return value, the transition will be executed correctly or\n# fallback/error callbacks will be triggered.\n\n# The transition callback successfully performed its required functionality.\nuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\n# The transition callback failed to perform its required functionality.\nuint8 TRANSITION_CALLBACK_FAILURE = 98\n\n# The transition callback encountered an error that requires special cleanup, if\n# possible.\nuint8 TRANSITION_CALLBACK_ERROR = 99\n\n##\n## Fields\n##\n\n# The transition id from above definitions.\nuint8 id\n\n# A text label of the transition.\nstring label\n",
         "# This represents a 2-D grid map\nstd_msgs/Header header\n\n# MetaData for the map\nMapMetaData info\n\n# The map data, in row-major order, starting with (0,0). \n# Cell (1, 0) will be listed second, representing the next cell in the x direction. \n# Cell (0, 1) will be at the index equal to info.width, followed by (1, 1).\n# The values inside are application dependent, but frequently, \n# 0 represents unoccupied, 1 represents definitely occupied, and\n# -1 represents unknown. \nint8[] data\n\n================================================================================\nMSG: nav_msgs/MapMetaData\n# This hold basic information about the characteristics of the OccupancyGrid\n\n# The time at which the map was loaded\nbuiltin_interfaces/Time map_load_time\n\n# The map resolution [m/cell]\nfloat32 resolution\n\n# Map width [cells]\nuint32 width\n\n# Map height [cells]\nuint32 height\n\n# The origin of the map [m, m, rad].  This is the real-world pose of the\n# bottom left corner of cell (0,0) in the map.\ngeometry_msgs/Pose origin\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n",
         "",
         "# A Pose with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPose pose\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# An array of poses that represents a Path for a robot to follow.\n\n# Indicates the frame_id of the path.\nstd_msgs/Header header\n\n# Array of poses to follow.\ngeometry_msgs/PoseStamped[] poses\n\n================================================================================\nMSG: geometry_msgs/PoseStamped\n# A Pose with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPose pose\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "# header.frame_id is either set to \"imu_accel\" or \"imu_gyro\"\n# to distinguish between \"accel\" and \"gyro\" info.\nstd_msgs/Header header\nfloat64[12] data\nfloat64[3] noise_variances\nfloat64[3] bias_variances\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "std_msgs/Header header\nstring json_data\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This is a message to hold data from an IMU (Inertial Measurement Unit)\n#\n# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec\n#\n# If the covariance of the measurement is known, it should be filled in (if all you know is the\n# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)\n# A covariance matrix of all zeros will be interpreted as \"covariance unknown\", and to use the\n# data a covariance will have to be assumed or gotten from some other source\n#\n# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an\n# orientation estimate), please set element 0 of the associated covariance matrix to -1\n# If you are interpreting this message, please check for a value of -1 in the first element of each\n# covariance matrix, and disregard the associated estimate.\n\nstd_msgs/Header header\n\ngeometry_msgs/Quaternion orientation\nfloat64[9] orientation_covariance # Row major about x, y, z axes\n\ngeometry_msgs/Vector3 angular_velocity\nfloat64[9] angular_velocity_covariance # Row major about x, y, z axes\n\ngeometry_msgs/Vector3 linear_acceleration\nfloat64[9] linear_acceleration_covariance # Row major x, y z\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space.\n\n# This is semantically different than a point.\n# A vector is always anchored at the origin.\n# When a transform is applied to a vector, only the rotational component is applied.\n\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This message defines meta information for a camera. It should be in a\n# camera namespace on topic \"camera_info\" and accompanied by up to five\n# image topics named:\n#\n#   image_raw - raw data from the camera driver, possibly Bayer encoded\n#   image            - monochrome, distorted\n#   image_color      - color, distorted\n#   image_rect       - monochrome, rectified\n#   image_rect_color - color, rectified\n#\n# The image_pipeline contains packages (image_proc, stereo_image_proc)\n# for producing the four processed image topics from image_raw and\n# camera_info. The meaning of the camera parameters are described in\n# detail at http://www.ros.org/wiki/image_pipeline/CameraInfo.\n#\n# The image_geometry package provides a user-friendly interface to\n# common operations using this meta information. If you want to, e.g.,\n# project a 3d point into image coordinates, we strongly recommend\n# using image_geometry.\n#\n# If the camera is uncalibrated, the matrices D, K, R, P should be left\n# zeroed out. In particular, clients may assume that K[0] == 0.0\n# indicates an uncalibrated camera.\n\n#######################################################################\n#                     Image acquisition info                          #\n#######################################################################\n\n# Time of image acquisition, camera coordinate frame ID\nstd_msgs/Header header # Header timestamp should be acquisition time of image\n                             # Header frame_id should be optical frame of camera\n                             # origin of frame should be optical center of camera\n                             # +x should point to the right in the image\n                             # +y should point down in the image\n                             # +z should point into the plane of the image\n\n\n#######################################################################\n#                      Calibration Parameters                         #\n#######################################################################\n# These are fixed during camera calibration. Their values will be the #\n# same in all messages until the camera is recalibrated. Note that    #\n# self-calibrating systems may \"recalibrate\" frequently.              #\n#                                                                     #\n# The internal parameters can be used to warp a raw (distorted) image #\n# to:                                                                 #\n#   1. An undistorted image (requires D and K)                        #\n#   2. A rectified image (requires D, K, R)                           #\n# The projection matrix P projects 3D points into the rectified image.#\n#######################################################################\n\n# The image dimensions with which the camera was calibrated.\n# Normally this will be the full camera resolution in pixels.\nuint32 height\nuint32 width\n\n# The distortion model used. Supported models are listed in\n# sensor_msgs/distortion_models.hpp. For most cameras, \"plumb_bob\" - a\n# simple model of radial and tangential distortion - is sufficent.\nstring distortion_model\n\n# The distortion parameters, size depending on the distortion model.\n# For \"plumb_bob\", the 5 parameters are: (k1, k2, t1, t2, k3).\nfloat64[] d\n\n# Intrinsic camera matrix for the raw (distorted) images.\n#     [fx  0 cx]\n# K = [ 0 fy cy]\n#     [ 0  0  1]\n# Projects 3D points in the camera coordinate frame to 2D pixel\n# coordinates using the focal lengths (fx, fy) and principal point\n# (cx, cy).\nfloat64[9]  k # 3x3 row-major matrix\n\n# Rectification matrix (stereo cameras only)\n# A rotation matrix aligning the camera coordinate system to the ideal\n# stereo image plane so that epipolar lines in both stereo images are\n# parallel.\nfloat64[9]  r # 3x3 row-major matrix\n\n# Projection/camera matrix\n#     [fx'  0  cx' Tx]\n# P = [ 0  fy' cy' Ty]\n#     [ 0   0   1   0]\n# By convention, this matrix specifies the intrinsic (camera) matrix\n#  of the processed (rectified) image. That is, the left 3x3 portion\n#  is the normal camera intrinsic matrix for the rectified image.\n# It projects 3D points in the camera coordinate frame to 2D pixel\n#  coordinates using the focal lengths (fx', fy') and principal point\n#  (cx', cy') - these may differ from the values in K.\n# For monocular cameras, Tx = Ty = 0. Normally, monocular cameras will\n#  also have R = the identity and P[1:3,1:3] = K.\n# For a stereo pair, the fourth column [Tx Ty 0]' is related to the\n#  position of the optical center of the second camera in the first\n#  camera's frame. We assume Tz = 0 so both cameras are in the same\n#  stereo image plane. The first camera always has Tx = Ty = 0. For\n#  the right (second) camera of a horizontal stereo pair, Ty = 0 and\n#  Tx = -fx' * B, where B is the baseline between the cameras.\n# Given a 3D point [X Y Z]', the projection (x, y) of the point onto\n#  the rectified image is given by:\n#  [u v w]' = P * [X Y Z 1]'\n#         x = u / w\n#         y = v / w\n#  This holds for both images of a stereo pair.\nfloat64[12] p # 3x4 row-major matrix\n\n\n#######################################################################\n#                      Operational Parameters                         #\n#######################################################################\n# These define the image region actually captured by the camera       #\n# driver. Although they affect the geometry of the output image, they #\n# may be changed freely without recalibrating the camera.             #\n#######################################################################\n\n# Binning refers here to any camera setting which combines rectangular\n#  neighborhoods of pixels into larger \"super-pixels.\" It reduces the\n#  resolution of the output image to\n#  (width / binning_x) x (height / binning_y).\n# The default values binning_x = binning_y = 0 is considered the same\n#  as binning_x = binning_y = 1 (no subsampling).\nuint32 binning_x\nuint32 binning_y\n\n# Region of interest (subwindow of full camera resolution), given in\n#  full resolution (unbinned) image coordinates. A particular ROI\n#  always denotes the same window of pixels on the camera sensor,\n#  regardless of binning settings.\n# The default setting of roi (all values 0) is considered the same as\n#  full resolution (roi.width = width, roi.height = height).\nRegionOfInterest roi\n\n================================================================================\nMSG: sensor_msgs/RegionOfInterest\n# This message is used to specify a region of interest within an image.\n#\n# When used to specify the ROI setting of the camera when the image was\n# taken, the height and width fields should either match the height and\n# width fields for the associated image; or height = width = 0\n# indicates that the full resolution image was captured.\n\nuint32 x_offset  # Leftmost pixel of the ROI\n                 # (0 if the ROI includes the left edge of the image)\nuint32 y_offset  # Topmost pixel of the ROI\n                 # (0 if the ROI includes the top edge of the image)\nuint32 height    # Height of ROI\nuint32 width     # Width of ROI\n\n# True if a distinct rectified ROI should be calculated from the \"raw\"\n# ROI in this message. Typically this should be False if the full image\n# is captured (ROI not used), and True if a subwindow is captured (ROI\n# used).\nbool do_rectify\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This message contains an uncompressed image\n# (0, 0) is at top-left corner of image\n\nstd_msgs/Header header # Header timestamp should be acquisition time of image\n                             # Header frame_id should be optical frame of camera\n                             # origin of frame should be optical center of cameara\n                             # +x should point to the right in the image\n                             # +y should point down in the image\n                             # +z should point into to plane of the image\n                             # If the frame_id here and the frame_id of the CameraInfo\n                             # message associated with the image conflict\n                             # the behavior is undefined\n\nuint32 height                # image height, that is, number of rows\nuint32 width                 # image width, that is, number of columns\n\n# The legal values for encoding are in file include/sensor_msgs/image_encodings.hpp\n# If you want to standardize a new string format, join\n# ros-users@lists.ros.org and send an email proposing a new encoding.\n\nstring encoding       # Encoding of pixels -- channel meaning, ordering, size\n                      # taken from the list of strings in include/sensor_msgs/image_encodings.hpp\n\nuint8 is_bigendian    # is this data bigendian?\nuint32 step           # Full row length in bytes\nuint8[] data          # actual matrix data, size is (step * rows)\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n",
         "# This message defines meta information for a camera. It should be in a\n# camera namespace on topic \"camera_info\" and accompanied by up to five\n# image topics named:\n#\n#   image_raw - raw data from the camera driver, possibly Bayer encoded\n#   image            - monochrome, distorted\n#   image_color      - color, distorted\n#   image_rect       - monochrome, rectified\n#   image_rect_color - color, rectified\n#\n# The image_pipeline contains packages (image_proc, stereo_image_proc)\n# for producing the four processed image topics from image_raw and\n# camera_info. The meaning of the camera parameters are described in\n# detail at http://www.ros.org/wiki/image_pipeline/CameraInfo.\n#\n# The image_geometry package provides a user-friendly interface to\n# common operations using this meta information. If you want to, e.g.,\n# project a 3d point into image coordinates, we strongly recommend\n# using image_geometry.\n#\n# If the camera is uncalibrated, the matrices D, K, R, P should be left\n# zeroed out. In particular, clients may assume that K[0] == 0.0\n# indicates an uncalibrated camera.\n\n#######################################################################\n#                     Image acquisition info                          #\n#######################################################################\n\n# Time of image acquisition, camera coordinate frame ID\nstd_msgs/Header header # Header timestamp should be acquisition time of image\n                             # Header frame_id should be optical frame of camera\n                             # origin of frame should be optical center of camera\n                             # +x should point to the right in the image\n                             # +y should point down in the image\n                             # +z should point into the plane of the image\n\n\n#######################################################################\n#                      Calibration Parameters                         #\n#######################################################################\n# These are fixed during camera calibration. Their values will be the #\n# same in all messages until the camera is recalibrated. Note that    #\n# self-calibrating systems may \"recalibrate\" frequently.              #\n#                                                                     #\n# The internal parameters can be used to warp a raw (distorted) image #\n# to:                                                                 #\n#   1. An undistorted image (requires D and K)                        #\n#   2. A rectified image (requires D, K, R)                           #\n# The projection matrix P projects 3D points into the rectified image.#\n#######################################################################\n\n# The image dimensions with which the camera was calibrated.\n# Normally this will be the full camera resolution in pixels.\nuint32 height\nuint32 width\n\n# The distortion model used. Supported models are listed in\n# sensor_msgs/distortion_models.hpp. For most cameras, \"plumb_bob\" - a\n# simple model of radial and tangential distortion - is sufficent.\nstring distortion_model\n\n# The distortion parameters, size depending on the distortion model.\n# For \"plumb_bob\", the 5 parameters are: (k1, k2, t1, t2, k3).\nfloat64[] d\n\n# Intrinsic camera matrix for the raw (distorted) images.\n#     [fx  0 cx]\n# K = [ 0 fy cy]\n#     [ 0  0  1]\n# Projects 3D points in the camera coordinate frame to 2D pixel\n# coordinates using the focal lengths (fx, fy) and principal point\n# (cx, cy).\nfloat64[9]  k # 3x3 row-major matrix\n\n# Rectification matrix (stereo cameras only)\n# A rotation matrix aligning the camera coordinate system to the ideal\n# stereo image plane so that epipolar lines in both stereo images are\n# parallel.\nfloat64[9]  r # 3x3 row-major matrix\n\n# Projection/camera matrix\n#     [fx'  0  cx' Tx]\n# P = [ 0  fy' cy' Ty]\n#     [ 0   0   1   0]\n# By convention, this matrix specifies the intrinsic (camera) matrix\n#  of the processed (rectified) image. That is, the left 3x3 portion\n#  is the normal camera intrinsic matrix for the rectified image.\n# It projects 3D points in the camera coordinate frame to 2D pixel\n#  coordinates using the focal lengths (fx', fy') and principal point\n#  (cx', cy') - these may differ from the values in K.\n# For monocular cameras, Tx = Ty = 0. Normally, monocular cameras will\n#  also have R = the identity and P[1:3,1:3] = K.\n# For a stereo pair, the fourth column [Tx Ty 0]' is related to the\n#  position of the optical center of the second camera in the first\n#  camera's frame. We assume Tz = 0 so both cameras are in the same\n#  stereo image plane. The first camera always has Tx = Ty = 0. For\n#  the right (second) camera of a horizontal stereo pair, Ty = 0 and\n#  Tx = -fx' * B, where B is the baseline between the cameras.\n# Given a 3D point [X Y Z]', the projection (x, y) of the point onto\n#  the rectified image is given by:\n#  [u v w]' = P * [X Y Z 1]'\n#         x = u / w\n#         y = v / w\n#  This holds for both images of a stereo pair.\nfloat64[12] p # 3x4 row-major matrix\n\n\n#######################################################################\n#                      Operational Parameters                         #\n#######################################################################\n# These define the image region actually captured by the camera       #\n# driver. Although they affect the geometry of the output image, they #\n# may be changed freely without recalibrating the camera.             #\n#######################################################################\n\n# Binning refers here to any camera setting which combines rectangular\n#  neighborhoods of pixels into larger \"super-pixels.\" It reduces the\n#  resolution of the output image to\n#  (width / binning_x) x (height / binning_y).\n# The default values binning_x = binning_y = 0 is considered the same\n#  as binning_x = binning_y = 1 (no subsampling).\nuint32 binning_x\nuint32 binning_y\n\n# Region of interest (subwindow of full camera resolution), given in\n#  full resolution (unbinned) image coordinates. A particular ROI\n#  always denotes the same window of pixels on the camera sensor,\n#  regardless of binning settings.\n# The default setting of roi (all values 0) is considered the same as\n#  full resolution (roi.width = width, roi.height = height).\nRegionOfInterest roi\n\n================================================================================\nMSG: sensor_msgs/RegionOfInterest\n# This message is used to specify a region of interest within an image.\n#\n# When used to specify the ROI setting of the camera when the image was\n# taken, the height and width fields should either match the height and\n# width fields for the associated image; or height = width = 0\n# indicates that the full resolution image was captured.\n\nuint32 x_offset  # Leftmost pixel of the ROI\n                 # (0 if the ROI includes the left edge of the image)\nuint32 y_offset  # Topmost pixel of the ROI\n                 # (0 if the ROI includes the top edge of the image)\nuint32 height    # Height of ROI\nuint32 width     # Width of ROI\n\n# True if a distinct rectified ROI should be calculated from the \"raw\"\n# ROI in this message. Typically this should be False if the full image\n# is captured (ROI not used), and True if a subwindow is captured (ROI\n# used).\nbool do_rectify\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This message contains an uncompressed image\n# (0, 0) is at top-left corner of image\n\nstd_msgs/Header header # Header timestamp should be acquisition time of image\n                             # Header frame_id should be optical frame of camera\n                             # origin of frame should be optical center of cameara\n                             # +x should point to the right in the image\n                             # +y should point down in the image\n                             # +z should point into to plane of the image\n                             # If the frame_id here and the frame_id of the CameraInfo\n                             # message associated with the image conflict\n                             # the behavior is undefined\n\nuint32 height                # image height, that is, number of rows\nuint32 width                 # image width, that is, number of columns\n\n# The legal values for encoding are in file include/sensor_msgs/image_encodings.hpp\n# If you want to standardize a new string format, join\n# ros-users@lists.ros.org and send an email proposing a new encoding.\n\nstring encoding       # Encoding of pixels -- channel meaning, ordering, size\n                      # taken from the list of strings in include/sensor_msgs/image_encodings.hpp\n\nuint8 is_bigendian    # is this data bigendian?\nuint32 step           # Full row length in bytes\nuint8[] data          # actual matrix data, size is (step * rows)\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "std_msgs/Header header\nstring json_data\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This message defines meta information for a camera. It should be in a\n# camera namespace on topic \"camera_info\" and accompanied by up to five\n# image topics named:\n#\n#   image_raw - raw data from the camera driver, possibly Bayer encoded\n#   image            - monochrome, distorted\n#   image_color      - color, distorted\n#   image_rect       - monochrome, rectified\n#   image_rect_color - color, rectified\n#\n# The image_pipeline contains packages (image_proc, stereo_image_proc)\n# for producing the four processed image topics from image_raw and\n# camera_info. The meaning of the camera parameters are described in\n# detail at http://www.ros.org/wiki/image_pipeline/CameraInfo.\n#\n# The image_geometry package provides a user-friendly interface to\n# common operations using this meta information. If you want to, e.g.,\n# project a 3d point into image coordinates, we strongly recommend\n# using image_geometry.\n#\n# If the camera is uncalibrated, the matrices D, K, R, P should be left\n# zeroed out. In particular, clients may assume that K[0] == 0.0\n# indicates an uncalibrated camera.\n\n#######################################################################\n#                     Image acquisition info                          #\n#######################################################################\n\n# Time of image acquisition, camera coordinate frame ID\nstd_msgs/Header header # Header timestamp should be acquisition time of image\n                             # Header frame_id should be optical frame of camera\n                             # origin of frame should be optical center of camera\n                             # +x should point to the right in the image\n                             # +y should point down in the image\n                             # +z should point into the plane of the image\n\n\n#######################################################################\n#                      Calibration Parameters                         #\n#######################################################################\n# These are fixed during camera calibration. Their values will be the #\n# same in all messages until the camera is recalibrated. Note that    #\n# self-calibrating systems may \"recalibrate\" frequently.              #\n#                                                                     #\n# The internal parameters can be used to warp a raw (distorted) image #\n# to:                                                                 #\n#   1. An undistorted image (requires D and K)                        #\n#   2. A rectified image (requires D, K, R)                           #\n# The projection matrix P projects 3D points into the rectified image.#\n#######################################################################\n\n# The image dimensions with which the camera was calibrated.\n# Normally this will be the full camera resolution in pixels.\nuint32 height\nuint32 width\n\n# The distortion model used. Supported models are listed in\n# sensor_msgs/distortion_models.hpp. For most cameras, \"plumb_bob\" - a\n# simple model of radial and tangential distortion - is sufficent.\nstring distortion_model\n\n# The distortion parameters, size depending on the distortion model.\n# For \"plumb_bob\", the 5 parameters are: (k1, k2, t1, t2, k3).\nfloat64[] d\n\n# Intrinsic camera matrix for the raw (distorted) images.\n#     [fx  0 cx]\n# K = [ 0 fy cy]\n#     [ 0  0  1]\n# Projects 3D points in the camera coordinate frame to 2D pixel\n# coordinates using the focal lengths (fx, fy) and principal point\n# (cx, cy).\nfloat64[9]  k # 3x3 row-major matrix\n\n# Rectification matrix (stereo cameras only)\n# A rotation matrix aligning the camera coordinate system to the ideal\n# stereo image plane so that epipolar lines in both stereo images are\n# parallel.\nfloat64[9]  r # 3x3 row-major matrix\n\n# Projection/camera matrix\n#     [fx'  0  cx' Tx]\n# P = [ 0  fy' cy' Ty]\n#     [ 0   0   1   0]\n# By convention, this matrix specifies the intrinsic (camera) matrix\n#  of the processed (rectified) image. That is, the left 3x3 portion\n#  is the normal camera intrinsic matrix for the rectified image.\n# It projects 3D points in the camera coordinate frame to 2D pixel\n#  coordinates using the focal lengths (fx', fy') and principal point\n#  (cx', cy') - these may differ from the values in K.\n# For monocular cameras, Tx = Ty = 0. Normally, monocular cameras will\n#  also have R = the identity and P[1:3,1:3] = K.\n# For a stereo pair, the fourth column [Tx Ty 0]' is related to the\n#  position of the optical center of the second camera in the first\n#  camera's frame. We assume Tz = 0 so both cameras are in the same\n#  stereo image plane. The first camera always has Tx = Ty = 0. For\n#  the right (second) camera of a horizontal stereo pair, Ty = 0 and\n#  Tx = -fx' * B, where B is the baseline between the cameras.\n# Given a 3D point [X Y Z]', the projection (x, y) of the point onto\n#  the rectified image is given by:\n#  [u v w]' = P * [X Y Z 1]'\n#         x = u / w\n#         y = v / w\n#  This holds for both images of a stereo pair.\nfloat64[12] p # 3x4 row-major matrix\n\n\n#######################################################################\n#                      Operational Parameters                         #\n#######################################################################\n# These define the image region actually captured by the camera       #\n# driver. Although they affect the geometry of the output image, they #\n# may be changed freely without recalibrating the camera.             #\n#######################################################################\n\n# Binning refers here to any camera setting which combines rectangular\n#  neighborhoods of pixels into larger \"super-pixels.\" It reduces the\n#  resolution of the output image to\n#  (width / binning_x) x (height / binning_y).\n# The default values binning_x = binning_y = 0 is considered the same\n#  as binning_x = binning_y = 1 (no subsampling).\nuint32 binning_x\nuint32 binning_y\n\n# Region of interest (subwindow of full camera resolution), given in\n#  full resolution (unbinned) image coordinates. A particular ROI\n#  always denotes the same window of pixels on the camera sensor,\n#  regardless of binning settings.\n# The default setting of roi (all values 0) is considered the same as\n#  full resolution (roi.width = width, roi.height = height).\nRegionOfInterest roi\n\n================================================================================\nMSG: sensor_msgs/RegionOfInterest\n# This message is used to specify a region of interest within an image.\n#\n# When used to specify the ROI setting of the camera when the image was\n# taken, the height and width fields should either match the height and\n# width fields for the associated image; or height = width = 0\n# indicates that the full resolution image was captured.\n\nuint32 x_offset  # Leftmost pixel of the ROI\n                 # (0 if the ROI includes the left edge of the image)\nuint32 y_offset  # Topmost pixel of the ROI\n                 # (0 if the ROI includes the top edge of the image)\nuint32 height    # Height of ROI\nuint32 width     # Width of ROI\n\n# True if a distinct rectified ROI should be calculated from the \"raw\"\n# ROI in this message. Typically this should be False if the full image\n# is captured (ROI not used), and True if a subwindow is captured (ROI\n# used).\nbool do_rectify\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This message holds a collection of N-dimensional points, which may\n# contain additional information such as normals, intensity, etc. The\n# point data is stored as a binary blob, its layout described by the\n# contents of the \"fields\" array.\n#\n# The point cloud data may be organized 2d (image-like) or 1d (unordered).\n# Point clouds organized as 2d images may be produced by camera depth sensors\n# such as stereo or time-of-flight.\n\n# Time of sensor data acquisition, and the coordinate frame ID (for 3d points).\nstd_msgs/Header header\n\n# 2D structure of the point cloud. If the cloud is unordered, height is\n# 1 and width is the length of the point cloud.\nuint32 height\nuint32 width\n\n# Describes the channels and their layout in the binary data blob.\nPointField[] fields\n\nbool    is_bigendian # Is this data bigendian?\nuint32  point_step   # Length of a point in bytes\nuint32  row_step     # Length of a row in bytes\nuint8[] data         # Actual point data, size is (row_step*height)\n\nbool is_dense        # True if there are no invalid points\n\n================================================================================\nMSG: sensor_msgs/PointField\n# This message holds the description of one point entry in the\n# PointCloud2 message format.\nuint8 INT8    = 1\nuint8 UINT8   = 2\nuint8 INT16   = 3\nuint8 UINT16  = 4\nuint8 INT32   = 5\nuint8 UINT32  = 6\nuint8 FLOAT32 = 7\nuint8 FLOAT64 = 8\n\n# Common PointField names are x, y, z, intensity, rgb, rgba\nstring name      # Name of field\nuint32 offset    # Offset from start of point struct\nuint8  datatype  # Datatype enumeration, see above\nuint32 count     # How many elements in the field\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This message holds a collection of N-dimensional points, which may\n# contain additional information such as normals, intensity, etc. The\n# point data is stored as a binary blob, its layout described by the\n# contents of the \"fields\" array.\n#\n# The point cloud data may be organized 2d (image-like) or 1d (unordered).\n# Point clouds organized as 2d images may be produced by camera depth sensors\n# such as stereo or time-of-flight.\n\n# Time of sensor data acquisition, and the coordinate frame ID (for 3d points).\nstd_msgs/Header header\n\n# 2D structure of the point cloud. If the cloud is unordered, height is\n# 1 and width is the length of the point cloud.\nuint32 height\nuint32 width\n\n# Describes the channels and their layout in the binary data blob.\nPointField[] fields\n\nbool    is_bigendian # Is this data bigendian?\nuint32  point_step   # Length of a point in bytes\nuint32  row_step     # Length of a row in bytes\nuint8[] data         # Actual point data, size is (row_step*height)\n\nbool is_dense        # True if there are no invalid points\n\n================================================================================\nMSG: sensor_msgs/PointField\n# This message holds the description of one point entry in the\n# PointCloud2 message format.\nuint8 INT8    = 1\nuint8 UINT8   = 2\nuint8 INT16   = 3\nuint8 UINT16  = 4\nuint8 INT32   = 5\nuint8 UINT32  = 6\nuint8 FLOAT32 = 7\nuint8 FLOAT64 = 8\n\n# Common PointField names are x, y, z, intensity, rgb, rgba\nstring name      # Name of field\nuint32 offset    # Offset from start of point struct\nuint8  datatype  # Datatype enumeration, see above\nuint32 count     # How many elements in the field\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This message contains an uncompressed image\n# (0, 0) is at top-left corner of image\n\nstd_msgs/Header header # Header timestamp should be acquisition time of image\n                             # Header frame_id should be optical frame of camera\n                             # origin of frame should be optical center of cameara\n                             # +x should point to the right in the image\n                             # +y should point down in the image\n                             # +z should point into to plane of the image\n                             # If the frame_id here and the frame_id of the CameraInfo\n                             # message associated with the image conflict\n                             # the behavior is undefined\n\nuint32 height                # image height, that is, number of rows\nuint32 width                 # image width, that is, number of columns\n\n# The legal values for encoding are in file include/sensor_msgs/image_encodings.hpp\n# If you want to standardize a new string format, join\n# ros-users@lists.ros.org and send an email proposing a new encoding.\n\nstring encoding       # Encoding of pixels -- channel meaning, ordering, size\n                      # taken from the list of strings in include/sensor_msgs/image_encodings.hpp\n\nuint8 is_bigendian    # is this data bigendian?\nuint32 step           # Full row length in bytes\nuint8[] data          # actual matrix data, size is (step * rows)\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "std_msgs/Header header\nstring json_data\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "float64[9] rotation\nfloat64[3] translation\n",
         "float64[9] rotation\nfloat64[3] translation\n",
         "float64[9] rotation\nfloat64[3] translation\n",
         "float64[9] rotation\nfloat64[3] translation\n",
         "# header.frame_id is either set to \"imu_accel\" or \"imu_gyro\"\n# to distinguish between \"accel\" and \"gyro\" info.\nstd_msgs/Header header\nfloat64[12] data\nfloat64[3] noise_variances\nfloat64[3] bias_variances\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "std_msgs/Header header\nstring json_data\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This is a message to hold data from an IMU (Inertial Measurement Unit)\n#\n# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec\n#\n# If the covariance of the measurement is known, it should be filled in (if all you know is the\n# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)\n# A covariance matrix of all zeros will be interpreted as \"covariance unknown\", and to use the\n# data a covariance will have to be assumed or gotten from some other source\n#\n# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an\n# orientation estimate), please set element 0 of the associated covariance matrix to -1\n# If you are interpreting this message, please check for a value of -1 in the first element of each\n# covariance matrix, and disregard the associated estimate.\n\nstd_msgs/Header header\n\ngeometry_msgs/Quaternion orientation\nfloat64[9] orientation_covariance # Row major about x, y, z axes\n\ngeometry_msgs/Vector3 angular_velocity\nfloat64[9] angular_velocity_covariance # Row major about x, y, z axes\n\ngeometry_msgs/Vector3 linear_acceleration\nfloat64[9] linear_acceleration_covariance # Row major x, y z\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space.\n\n# This is semantically different than a point.\n# A vector is always anchored at the origin.\n# When a transform is applied to a vector, only the rotational component is applied.\n\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This is a message to hold data from an IMU (Inertial Measurement Unit)\n#\n# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec\n#\n# If the covariance of the measurement is known, it should be filled in (if all you know is the\n# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)\n# A covariance matrix of all zeros will be interpreted as \"covariance unknown\", and to use the\n# data a covariance will have to be assumed or gotten from some other source\n#\n# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an\n# orientation estimate), please set element 0 of the associated covariance matrix to -1\n# If you are interpreting this message, please check for a value of -1 in the first element of each\n# covariance matrix, and disregard the associated estimate.\n\nstd_msgs/Header header\n\ngeometry_msgs/Quaternion orientation\nfloat64[9] orientation_covariance # Row major about x, y, z axes\n\ngeometry_msgs/Vector3 angular_velocity\nfloat64[9] angular_velocity_covariance # Row major about x, y, z axes\n\ngeometry_msgs/Vector3 linear_acceleration\nfloat64[9] linear_acceleration_covariance # Row major x, y z\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space.\n\n# This is semantically different than a point.\n# A vector is always anchored at the origin.\n# When a transform is applied to a vector, only the rotational component is applied.\n\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "uint8 ADD=0\nuint8 REMOVE=1\n\nuint8 operation_type\n\nstring activator\nstring activation\n",
         "uint8 state\nstring node_name\n",
         "# This represents a Point with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPoint point\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nint32 data\n",
         "# This message communicates the current time.\n#\n# For more information, see https://design.ros2.org/articles/clock_and_time.html.\nbuiltin_interfaces/Time clock\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# Action type for robot in Collision Monitor\nuint8 DO_NOTHING=0 # No action\nuint8 STOP=1 # Stop the robot\nuint8 SLOWDOWN=2 # Slowdown in percentage from current operating speed\nuint8 APPROACH=3 # Keep constant time interval before collision\nuint8 LIMIT=4 # Sets a limit of velocities if pts in range\nuint8 action_type\n\n# Name of triggered polygon\nstring polygon_name\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "ConnectedClient[] clients\n\n================================================================================\nMSG: rosbridge_msgs/ConnectedClient\nstring ip_address\nbuiltin_interfaces/Time connection_time\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# The time point at which this event occurred.\nuint64 timestamp\n\n# The id and label of this transition event.\nTransition transition\n\n# The starting state from which this event transitioned.\nState start_state\n\n# The end state of this transition event.\nState goal_state\n\n================================================================================\nMSG: lifecycle_msgs/State\n# Primary state definitions as depicted in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# These are the primary states. State changes can only be requested when the\n# node is in one of these states.\n\n# Indicates state has not yet been set.\nuint8 PRIMARY_STATE_UNKNOWN = 0\n\n# This is the life cycle state the node is in immediately after being\n# instantiated.\nuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\n# This state represents a node that is not currently performing any processing.\nuint8 PRIMARY_STATE_INACTIVE = 2\n\n# This is the main state of the node's life cycle. While in this state, the node\n# performs any processing, responds to service requests, reads and processes\n# data, produces output, etc.\nuint8 PRIMARY_STATE_ACTIVE = 3\n\n# The finalized state is the state in which the node ends immediately before\n# being destroyed.\nuint8 PRIMARY_STATE_FINALIZED = 4\n\n# Temporary intermediate states. When a transition is requested, the node\n# changes its state into one of these states.\n\n# In this transition state the node's onConfigure callback will be called to\n# allow the node to load its configuration and conduct any required setup.\nuint8 TRANSITION_STATE_CONFIGURING = 10\n\n# In this transition state the node's callback onCleanup will be called to clear\n# all state and return the node to a functionally equivalent state as when\n# first created.\nuint8 TRANSITION_STATE_CLEANINGUP = 11\n\n# In this transition state the callback onShutdown will be executed to do any\n# cleanup necessary before destruction.\nuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\n# In this transition state the callback onActivate will be executed to do any\n# final preparations to start executing.\nuint8 TRANSITION_STATE_ACTIVATING = 13\n\n# In this transition state the callback onDeactivate will be executed to do any\n# cleanup to start executing, and reverse the onActivate changes.\nuint8 TRANSITION_STATE_DEACTIVATING = 14\n\n# This transition state is where any error may be cleaned up.\nuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\n# The state id value from the above definitions.\nuint8 id\n\n# A text label of the state.\nstring label\n\n================================================================================\nMSG: lifecycle_msgs/Transition\n# Default values for transitions as described in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# Reserved [0-9], publicly available transitions.\n# When a node is in one of these primary states, these transitions can be\n# invoked.\n\n# This transition will instantiate the node, but will not run any code beyond\n# the constructor.\nuint8 TRANSITION_CREATE = 0\n\n# The node's onConfigure callback will be called to allow the node to load its\n# configuration and conduct any required setup.\nuint8 TRANSITION_CONFIGURE = 1\n\n# The node's callback onCleanup will be called in this transition to allow the\n# node to load its configuration and conduct any required setup.\nuint8 TRANSITION_CLEANUP = 2\n\n# The node's callback onActivate will be executed to do any final preparations\n# to start executing.\nuint8 TRANSITION_ACTIVATE = 3\n\n# The node's callback onDeactivate will be executed to do any cleanup to start\n# executing, and reverse the onActivate changes.\nuint8 TRANSITION_DEACTIVATE = 4\n\n# This signals shutdown during an unconfigured state, the node's callback\n# onShutdown will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\n# This signals shutdown during an inactive state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\n# This signals shutdown during an active state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\n# This transition will simply cause the deallocation of the node.\nuint8 TRANSITION_DESTROY = 8\n\n# Reserved [10-69], private transitions\n# These transitions are not publicly available and cannot be invoked by a user.\n# The following transitions are implicitly invoked based on the callback\n# feedback of the intermediate transition states.\nuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\nuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\nuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\nuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\nuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\nuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\nuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\nuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\nuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\nuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\nuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\nuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\nuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\nuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\nuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\nuint8 TRANSITION_ON_ERROR_SUCCESS = 60\nuint8 TRANSITION_ON_ERROR_FAILURE = 61\nuint8 TRANSITION_ON_ERROR_ERROR = 62\n\n# Reserved [90-99]. Transition callback success values.\n# These return values ought to be set as a return value for each callback.\n# Depending on which return value, the transition will be executed correctly or\n# fallback/error callbacks will be triggered.\n\n# The transition callback successfully performed its required functionality.\nuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\n# The transition callback failed to perform its required functionality.\nuint8 TRANSITION_CALLBACK_FAILURE = 98\n\n# The transition callback encountered an error that requires special cleanup, if\n# possible.\nuint8 TRANSITION_CALLBACK_ERROR = 99\n\n##\n## Fields\n##\n\n# The transition id from above definitions.\nuint8 id\n\n# A text label of the transition.\nstring label\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nstring data\n",
         "# failed to get full definition text for usr_msgs/msg/CaptureStatus: //",
         "# header [std_msgs/Header]: standard header message.\n# id:           Unique identifier for the event\n# level:        The level of the event (info, warning, error, fatal)\n# data:         Additional data to send with the event\nstd_msgs/Header header\nstring id\nstring level\nstring data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# Message that contains Map API request error information\n# uuid [string]: Request uuid\n# message [string]: Error message\n# code [int]: Http execpton code, if aplay\n# url [string]: API URl requested\n# entry_point [string]: requested service\n# response_time [float32]: response time in seconds\n# params [string]: Request params\n\nstring uuid\nstring message\nstring request_params\nstring url\nstring entry_point\nfloat32 response_time\nint16 code",
         "# failed to get full definition text for usr_msgs/msg/SpeakerParams: //",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "# failed to get full definition text for usr_msgs/msg/SpeakerStatus: //",
         "# This message is used to send diagnostic information about the state of the robot.\nstd_msgs/Header header # for timestamp\nDiagnosticStatus[] status # an array of components being reported on\n\n================================================================================\nMSG: diagnostic_msgs/DiagnosticStatus\n# This message holds the status of an individual component of the robot.\n\n# Possible levels of operations.\nbyte OK=0\nbyte WARN=1\nbyte ERROR=2\nbyte STALE=3\n\n# Level of operation enumerated above.\nbyte level\n# A description of the test/component reporting.\nstring name\n# A description of the status.\nstring message\n# A hardware unique string.\nstring hardware_id\n# An array of values associated with the status.\nKeyValue[] values\n\n\n================================================================================\nMSG: diagnostic_msgs/KeyValue\n# What to label this value when viewing.\nstring key\n# A value to track over time.\nstring value\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This message is used to send diagnostic information about the state of the robot.\nstd_msgs/Header header # for timestamp\nDiagnosticStatus[] status # an array of components being reported on\n\n================================================================================\nMSG: diagnostic_msgs/DiagnosticStatus\n# This message holds the status of an individual component of the robot.\n\n# Possible levels of operations.\nbyte OK=0\nbyte WARN=1\nbyte ERROR=2\nbyte STALE=3\n\n# Level of operation enumerated above.\nbyte level\n# A description of the test/component reporting.\nstring name\n# A description of the status.\nstring message\n# A hardware unique string.\nstring hardware_id\n# An array of values associated with the status.\nKeyValue[] values\n\n\n================================================================================\nMSG: diagnostic_msgs/KeyValue\n# What to label this value when viewing.\nstring key\n# A value to track over time.\nstring value\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This message holds the status of an individual component of the robot.\n\n# Possible levels of operations.\nbyte OK=0\nbyte WARN=1\nbyte ERROR=2\nbyte STALE=3\n\n# Level of operation enumerated above.\nbyte level\n# A description of the test/component reporting.\nstring name\n# A description of the status.\nstring message\n# A hardware unique string.\nstring hardware_id\n# An array of values associated with the status.\nKeyValue[] values\n\n\n================================================================================\nMSG: diagnostic_msgs/KeyValue\n# What to label this value when viewing.\nstring key\n# A value to track over time.\nstring value\n",
         "# This expresses an estimated pose with a reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPoseWithCovariance pose\n\n================================================================================\nMSG: geometry_msgs/PoseWithCovariance\n# This represents a pose in free space with uncertainty.\n\nPose pose\n\n# Row-major representation of the 6x6 covariance matrix\n# The orientation parameters use a fixed-axis representation.\n# In order, the parameters are:\n# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\nfloat64[36] covariance\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This expresses an estimated pose with a reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPoseWithCovariance pose\n\n================================================================================\nMSG: geometry_msgs/PoseWithCovariance\n# This represents a pose in free space with uncertainty.\n\nPose pose\n\n# Row-major representation of the 6x6 covariance matrix\n# The orientation parameters use a fixed-axis representation.\n# In order, the parameters are:\n# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\nfloat64[36] covariance\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "# This represents a vector in free space.\n\n# This is semantically different than a point.\n# A vector is always anchored at the origin.\n# When a transform is applied to a vector, only the rotational component is applied.\n\nfloat64 x\nfloat64 y\nfloat64 z\n",
         "# failed to get full definition text for usr_msgs/msg/Fails: //",
         "",
         "# Navigation Satellite fix for any Global Navigation Satellite System\n#\n# Specified using the WGS 84 reference ellipsoid\n\n# header.stamp specifies the ROS time for this measurement (the\n#        corresponding satellite time may be reported using the\n#        sensor_msgs/TimeReference message).\n#\n# header.frame_id is the frame of reference reported by the satellite\n#        receiver, usually the location of the antenna.  This is a\n#        Euclidean frame relative to the vehicle, not a reference\n#        ellipsoid.\nstd_msgs/Header header\n\n# Satellite fix status information.\nNavSatStatus status\n\n# Latitude [degrees]. Positive is north of equator; negative is south.\nfloat64 latitude\n\n# Longitude [degrees]. Positive is east of prime meridian; negative is west.\nfloat64 longitude\n\n# Altitude [m]. Positive is above the WGS 84 ellipsoid\n# (quiet NaN if no altitude is available).\nfloat64 altitude\n\n# Position covariance [m^2] defined relative to a tangential plane\n# through the reported position. The components are East, North, and\n# Up (ENU), in row-major order.\n#\n# Beware: this coordinate system exhibits singularities at the poles.\nfloat64[9] position_covariance\n\n# If the covariance of the fix is known, fill it in completely. If the\n# GPS receiver provides the variance of each measurement, put them\n# along the diagonal. If only Dilution of Precision is available,\n# estimate an approximate covariance from that.\n\nuint8 COVARIANCE_TYPE_UNKNOWN = 0\nuint8 COVARIANCE_TYPE_APPROXIMATED = 1\nuint8 COVARIANCE_TYPE_DIAGONAL_KNOWN = 2\nuint8 COVARIANCE_TYPE_KNOWN = 3\n\nuint8 position_covariance_type\n\n================================================================================\nMSG: sensor_msgs/NavSatStatus\n# Navigation Satellite fix status for any Global Navigation Satellite System.\n#\n# Whether to output an augmented fix is determined by both the fix\n# type and the last time differential corrections were received.  A\n# fix is valid when status >= STATUS_FIX.\n\nint8 STATUS_NO_FIX =  -1        # unable to fix position\nint8 STATUS_FIX =      0        # unaugmented fix\nint8 STATUS_SBAS_FIX = 1        # with satellite-based augmentation\nint8 STATUS_GBAS_FIX = 2        # with ground-based augmentation\n\nint8 status\n\n# Bits defining which Global Navigation Satellite System signals were\n# used by the receiver.\n\nuint16 SERVICE_GPS =     1\nuint16 SERVICE_GLONASS = 2\nuint16 SERVICE_COMPASS = 4      # includes BeiDou.\nuint16 SERVICE_GALILEO = 8\n\nuint16 service\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This represents an estimated twist with reference coordinate frame and timestamp.\n\nstd_msgs/Header header\nTwistWithCovariance twist\n\n================================================================================\nMSG: geometry_msgs/TwistWithCovariance\n# This expresses velocity in free space with uncertainty.\n\nTwist twist\n\n# Row-major representation of the 6x6 covariance matrix\n# The orientation parameters use a fixed-axis representation.\n# In order, the parameters are:\n# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\nfloat64[36] covariance\n\n================================================================================\nMSG: geometry_msgs/Twist\n# This expresses velocity in free space broken into its linear and angular parts.\n\nVector3  linear\nVector3  angular\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space.\n\n# This is semantically different than a point.\n# A vector is always anchored at the origin.\n# When a transform is applied to a vector, only the rotational component is applied.\n\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "# This represents a 2-D grid map\nstd_msgs/Header header\n\n# MetaData for the map\nMapMetaData info\n\n# The map data, in row-major order, starting with (0,0). \n# Cell (1, 0) will be listed second, representing the next cell in the x direction. \n# Cell (0, 1) will be at the index equal to info.width, followed by (1, 1).\n# The values inside are application dependent, but frequently, \n# 0 represents unoccupied, 1 represents definitely occupied, and\n# -1 represents unknown. \nint8[] data\n\n================================================================================\nMSG: nav_msgs/MapMetaData\n# This hold basic information about the characteristics of the OccupancyGrid\n\n# The time at which the map was loaded\nbuiltin_interfaces/Time map_load_time\n\n# The map resolution [m/cell]\nfloat32 resolution\n\n# Map width [cells]\nuint32 width\n\n# Map height [cells]\nuint32 height\n\n# The origin of the map [m, m, rad].  This is the real-world pose of the\n# bottom left corner of cell (0,0) in the map.\ngeometry_msgs/Pose origin\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n",
         "# This represents a 2-D grid map, in which each cell has an associated cost\n\nstd_msgs/Header header\n\n# MetaData for the map\nCostmapMetaData metadata\n\n# The cost data, in row-major order, starting with (0,0).\nuint8[] data\n\n================================================================================\nMSG: nav2_msgs/CostmapMetaData\n# This hold basic information about the characteristics of the Costmap\n\n# The time at which the static map was loaded\nbuiltin_interfaces/Time map_load_time\n\n# The time of the last update to costmap\nbuiltin_interfaces/Time update_time\n\n# The corresponding layer name\nstring layer\n\n# The map resolution [m/cell]\nfloat32 resolution\n\n# Number of cells in the horizontal direction\nuint32 size_x\n\n# Number of cells in the vertical direction\nuint32 size_y\n\n# The origin of the costmap [m, m, rad].\n# This is the real-world pose of the cell (0,0) in the map.\ngeometry_msgs/Pose origin\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n",
         "# Update msg for Costmap containing the modified part of Costmap\nstd_msgs/Header header\n\nuint32 x\nuint32 y\n\nuint32 size_x\nuint32 size_y\n\n# The cost data, in row-major order, starting with (x,y) from 0-255 in Costmap format rather than OccupancyGrid 0-100.\nuint8[] data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "std_msgs/Header header\nint32 x\nint32 y\nuint32 width\nuint32 height\nint8[] data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# A specification of a polygon where the first and last points are assumed to be connected\n\nPoint32[] points\n\n================================================================================\nMSG: geometry_msgs/Point32\n# This contains the position of a point in free space(with 32 bits of precision).\n# It is recommended to use Point wherever possible instead of Point32.\n#\n# This recommendation is to promote interoperability.\n#\n# This message is designed to take up less space when sending\n# lots of points at once, as in the case of a PointCloud.\n\nfloat32 x\nfloat32 y\nfloat32 z\n",
         "# The time point at which this event occurred.\nuint64 timestamp\n\n# The id and label of this transition event.\nTransition transition\n\n# The starting state from which this event transitioned.\nState start_state\n\n# The end state of this transition event.\nState goal_state\n\n================================================================================\nMSG: lifecycle_msgs/State\n# Primary state definitions as depicted in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# These are the primary states. State changes can only be requested when the\n# node is in one of these states.\n\n# Indicates state has not yet been set.\nuint8 PRIMARY_STATE_UNKNOWN = 0\n\n# This is the life cycle state the node is in immediately after being\n# instantiated.\nuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\n# This state represents a node that is not currently performing any processing.\nuint8 PRIMARY_STATE_INACTIVE = 2\n\n# This is the main state of the node's life cycle. While in this state, the node\n# performs any processing, responds to service requests, reads and processes\n# data, produces output, etc.\nuint8 PRIMARY_STATE_ACTIVE = 3\n\n# The finalized state is the state in which the node ends immediately before\n# being destroyed.\nuint8 PRIMARY_STATE_FINALIZED = 4\n\n# Temporary intermediate states. When a transition is requested, the node\n# changes its state into one of these states.\n\n# In this transition state the node's onConfigure callback will be called to\n# allow the node to load its configuration and conduct any required setup.\nuint8 TRANSITION_STATE_CONFIGURING = 10\n\n# In this transition state the node's callback onCleanup will be called to clear\n# all state and return the node to a functionally equivalent state as when\n# first created.\nuint8 TRANSITION_STATE_CLEANINGUP = 11\n\n# In this transition state the callback onShutdown will be executed to do any\n# cleanup necessary before destruction.\nuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\n# In this transition state the callback onActivate will be executed to do any\n# final preparations to start executing.\nuint8 TRANSITION_STATE_ACTIVATING = 13\n\n# In this transition state the callback onDeactivate will be executed to do any\n# cleanup to start executing, and reverse the onActivate changes.\nuint8 TRANSITION_STATE_DEACTIVATING = 14\n\n# This transition state is where any error may be cleaned up.\nuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\n# The state id value from the above definitions.\nuint8 id\n\n# A text label of the state.\nstring label\n\n================================================================================\nMSG: lifecycle_msgs/Transition\n# Default values for transitions as described in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# Reserved [0-9], publicly available transitions.\n# When a node is in one of these primary states, these transitions can be\n# invoked.\n\n# This transition will instantiate the node, but will not run any code beyond\n# the constructor.\nuint8 TRANSITION_CREATE = 0\n\n# The node's onConfigure callback will be called to allow the node to load its\n# configuration and conduct any required setup.\nuint8 TRANSITION_CONFIGURE = 1\n\n# The node's callback onCleanup will be called in this transition to allow the\n# node to load its configuration and conduct any required setup.\nuint8 TRANSITION_CLEANUP = 2\n\n# The node's callback onActivate will be executed to do any final preparations\n# to start executing.\nuint8 TRANSITION_ACTIVATE = 3\n\n# The node's callback onDeactivate will be executed to do any cleanup to start\n# executing, and reverse the onActivate changes.\nuint8 TRANSITION_DEACTIVATE = 4\n\n# This signals shutdown during an unconfigured state, the node's callback\n# onShutdown will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\n# This signals shutdown during an inactive state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\n# This signals shutdown during an active state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\n# This transition will simply cause the deallocation of the node.\nuint8 TRANSITION_DESTROY = 8\n\n# Reserved [10-69], private transitions\n# These transitions are not publicly available and cannot be invoked by a user.\n# The following transitions are implicitly invoked based on the callback\n# feedback of the intermediate transition states.\nuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\nuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\nuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\nuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\nuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\nuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\nuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\nuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\nuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\nuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\nuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\nuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\nuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\nuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\nuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\nuint8 TRANSITION_ON_ERROR_SUCCESS = 60\nuint8 TRANSITION_ON_ERROR_FAILURE = 61\nuint8 TRANSITION_ON_ERROR_ERROR = 62\n\n# Reserved [90-99]. Transition callback success values.\n# These return values ought to be set as a return value for each callback.\n# Depending on which return value, the transition will be executed correctly or\n# fallback/error callbacks will be triggered.\n\n# The transition callback successfully performed its required functionality.\nuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\n# The transition callback failed to perform its required functionality.\nuint8 TRANSITION_CALLBACK_FAILURE = 98\n\n# The transition callback encountered an error that requires special cleanup, if\n# possible.\nuint8 TRANSITION_CALLBACK_ERROR = 99\n\n##\n## Fields\n##\n\n# The transition id from above definitions.\nuint8 id\n\n# A text label of the transition.\nstring label\n",
         "# This represents a 2-D grid map\nstd_msgs/Header header\n\n# MetaData for the map\nMapMetaData info\n\n# The map data, in row-major order, starting with (0,0). \n# Cell (1, 0) will be listed second, representing the next cell in the x direction. \n# Cell (0, 1) will be at the index equal to info.width, followed by (1, 1).\n# The values inside are application dependent, but frequently, \n# 0 represents unoccupied, 1 represents definitely occupied, and\n# -1 represents unknown. \nint8[] data\n\n================================================================================\nMSG: nav_msgs/MapMetaData\n# This hold basic information about the characteristics of the OccupancyGrid\n\n# The time at which the map was loaded\nbuiltin_interfaces/Time map_load_time\n\n# The map resolution [m/cell]\nfloat32 resolution\n\n# Map width [cells]\nuint32 width\n\n# Map height [cells]\nuint32 height\n\n# The origin of the map [m, m, rad].  This is the real-world pose of the\n# bottom left corner of cell (0,0) in the map.\ngeometry_msgs/Pose origin\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n",
         "# This represents a 2-D grid map, in which each cell has an associated cost\n\nstd_msgs/Header header\n\n# MetaData for the map\nCostmapMetaData metadata\n\n# The cost data, in row-major order, starting with (0,0).\nuint8[] data\n\n================================================================================\nMSG: nav2_msgs/CostmapMetaData\n# This hold basic information about the characteristics of the Costmap\n\n# The time at which the static map was loaded\nbuiltin_interfaces/Time map_load_time\n\n# The time of the last update to costmap\nbuiltin_interfaces/Time update_time\n\n# The corresponding layer name\nstring layer\n\n# The map resolution [m/cell]\nfloat32 resolution\n\n# Number of cells in the horizontal direction\nuint32 size_x\n\n# Number of cells in the vertical direction\nuint32 size_y\n\n# The origin of the costmap [m, m, rad].\n# This is the real-world pose of the cell (0,0) in the map.\ngeometry_msgs/Pose origin\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n",
         "# Update msg for Costmap containing the modified part of Costmap\nstd_msgs/Header header\n\nuint32 x\nuint32 y\n\nuint32 size_x\nuint32 size_y\n\n# The cost data, in row-major order, starting with (x,y) from 0-255 in Costmap format rather than OccupancyGrid 0-100.\nuint8[] data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "std_msgs/Header header\nint32 x\nint32 y\nuint32 width\nuint32 height\nint8[] data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This represents a Polygon with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPolygon polygon\n\n================================================================================\nMSG: geometry_msgs/Polygon\n# A specification of a polygon where the first and last points are assumed to be connected\n\nPoint32[] points\n\n================================================================================\nMSG: geometry_msgs/Point32\n# This contains the position of a point in free space(with 32 bits of precision).\n# It is recommended to use Point wherever possible instead of Point32.\n#\n# This recommendation is to promote interoperability.\n#\n# This message is designed to take up less space when sending\n# lots of points at once, as in the case of a PointCloud.\n\nfloat32 x\nfloat32 y\nfloat32 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This represents a 2-D grid map\nstd_msgs/Header header\n\n# MetaData for the map\nMapMetaData info\n\n# The map data, in row-major order, starting with (0,0). \n# Cell (1, 0) will be listed second, representing the next cell in the x direction. \n# Cell (0, 1) will be at the index equal to info.width, followed by (1, 1).\n# The values inside are application dependent, but frequently, \n# 0 represents unoccupied, 1 represents definitely occupied, and\n# -1 represents unknown. \nint8[] data\n\n================================================================================\nMSG: nav_msgs/MapMetaData\n# This hold basic information about the characteristics of the OccupancyGrid\n\n# The time at which the map was loaded\nbuiltin_interfaces/Time map_load_time\n\n# The map resolution [m/cell]\nfloat32 resolution\n\n# Map width [cells]\nuint32 width\n\n# Map height [cells]\nuint32 height\n\n# The origin of the map [m, m, rad].  This is the real-world pose of the\n# bottom left corner of cell (0,0) in the map.\ngeometry_msgs/Pose origin\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n",
         "# This represents a 2-D grid map, in which each cell has an associated cost\n\nstd_msgs/Header header\n\n# MetaData for the map\nCostmapMetaData metadata\n\n# The cost data, in row-major order, starting with (0,0).\nuint8[] data\n\n================================================================================\nMSG: nav2_msgs/CostmapMetaData\n# This hold basic information about the characteristics of the Costmap\n\n# The time at which the static map was loaded\nbuiltin_interfaces/Time map_load_time\n\n# The time of the last update to costmap\nbuiltin_interfaces/Time update_time\n\n# The corresponding layer name\nstring layer\n\n# The map resolution [m/cell]\nfloat32 resolution\n\n# Number of cells in the horizontal direction\nuint32 size_x\n\n# Number of cells in the vertical direction\nuint32 size_y\n\n# The origin of the costmap [m, m, rad].\n# This is the real-world pose of the cell (0,0) in the map.\ngeometry_msgs/Pose origin\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n",
         "# Update msg for Costmap containing the modified part of Costmap\nstd_msgs/Header header\n\nuint32 x\nuint32 y\n\nuint32 size_x\nuint32 size_y\n\n# The cost data, in row-major order, starting with (x,y) from 0-255 in Costmap format rather than OccupancyGrid 0-100.\nuint8[] data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "std_msgs/Header header\nint32 x\nint32 y\nuint32 width\nuint32 height\nint8[] data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This represents a 2-D grid map\nstd_msgs/Header header\n\n# MetaData for the map\nMapMetaData info\n\n# The map data, in row-major order, starting with (0,0). \n# Cell (1, 0) will be listed second, representing the next cell in the x direction. \n# Cell (0, 1) will be at the index equal to info.width, followed by (1, 1).\n# The values inside are application dependent, but frequently, \n# 0 represents unoccupied, 1 represents definitely occupied, and\n# -1 represents unknown. \nint8[] data\n\n================================================================================\nMSG: nav_msgs/MapMetaData\n# This hold basic information about the characteristics of the OccupancyGrid\n\n# The time at which the map was loaded\nbuiltin_interfaces/Time map_load_time\n\n# The map resolution [m/cell]\nfloat32 resolution\n\n# Map width [cells]\nuint32 width\n\n# Map height [cells]\nuint32 height\n\n# The origin of the map [m, m, rad].  This is the real-world pose of the\n# bottom left corner of cell (0,0) in the map.\ngeometry_msgs/Pose origin\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n",
         "# This represents a 2-D grid map, in which each cell has an associated cost\n\nstd_msgs/Header header\n\n# MetaData for the map\nCostmapMetaData metadata\n\n# The cost data, in row-major order, starting with (0,0).\nuint8[] data\n\n================================================================================\nMSG: nav2_msgs/CostmapMetaData\n# This hold basic information about the characteristics of the Costmap\n\n# The time at which the static map was loaded\nbuiltin_interfaces/Time map_load_time\n\n# The time of the last update to costmap\nbuiltin_interfaces/Time update_time\n\n# The corresponding layer name\nstring layer\n\n# The map resolution [m/cell]\nfloat32 resolution\n\n# Number of cells in the horizontal direction\nuint32 size_x\n\n# Number of cells in the vertical direction\nuint32 size_y\n\n# The origin of the costmap [m, m, rad].\n# This is the real-world pose of the cell (0,0) in the map.\ngeometry_msgs/Pose origin\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n",
         "# Update msg for Costmap containing the modified part of Costmap\nstd_msgs/Header header\n\nuint32 x\nuint32 y\n\nuint32 size_x\nuint32 size_y\n\n# The cost data, in row-major order, starting with (x,y) from 0-255 in Costmap format rather than OccupancyGrid 0-100.\nuint8[] data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "std_msgs/Header header\nint32 x\nint32 y\nuint32 width\nuint32 height\nint8[] data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This represents a 2-D grid map\nstd_msgs/Header header\n\n# MetaData for the map\nMapMetaData info\n\n# The map data, in row-major order, starting with (0,0). \n# Cell (1, 0) will be listed second, representing the next cell in the x direction. \n# Cell (0, 1) will be at the index equal to info.width, followed by (1, 1).\n# The values inside are application dependent, but frequently, \n# 0 represents unoccupied, 1 represents definitely occupied, and\n# -1 represents unknown. \nint8[] data\n\n================================================================================\nMSG: nav_msgs/MapMetaData\n# This hold basic information about the characteristics of the OccupancyGrid\n\n# The time at which the map was loaded\nbuiltin_interfaces/Time map_load_time\n\n# The map resolution [m/cell]\nfloat32 resolution\n\n# Map width [cells]\nuint32 width\n\n# Map height [cells]\nuint32 height\n\n# The origin of the map [m, m, rad].  This is the real-world pose of the\n# bottom left corner of cell (0,0) in the map.\ngeometry_msgs/Pose origin\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n",
         "# This represents a 2-D grid map, in which each cell has an associated cost\n\nstd_msgs/Header header\n\n# MetaData for the map\nCostmapMetaData metadata\n\n# The cost data, in row-major order, starting with (0,0).\nuint8[] data\n\n================================================================================\nMSG: nav2_msgs/CostmapMetaData\n# This hold basic information about the characteristics of the Costmap\n\n# The time at which the static map was loaded\nbuiltin_interfaces/Time map_load_time\n\n# The time of the last update to costmap\nbuiltin_interfaces/Time update_time\n\n# The corresponding layer name\nstring layer\n\n# The map resolution [m/cell]\nfloat32 resolution\n\n# Number of cells in the horizontal direction\nuint32 size_x\n\n# Number of cells in the vertical direction\nuint32 size_y\n\n# The origin of the costmap [m, m, rad].\n# This is the real-world pose of the cell (0,0) in the map.\ngeometry_msgs/Pose origin\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n",
         "# Update msg for Costmap containing the modified part of Costmap\nstd_msgs/Header header\n\nuint32 x\nuint32 y\n\nuint32 size_x\nuint32 size_y\n\n# The cost data, in row-major order, starting with (x,y) from 0-255 in Costmap format rather than OccupancyGrid 0-100.\nuint8[] data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "std_msgs/Header header\nint32 x\nint32 y\nuint32 width\nuint32 height\nint8[] data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This represents a 2-D grid map\nstd_msgs/Header header\n\n# MetaData for the map\nMapMetaData info\n\n# The map data, in row-major order, starting with (0,0). \n# Cell (1, 0) will be listed second, representing the next cell in the x direction. \n# Cell (0, 1) will be at the index equal to info.width, followed by (1, 1).\n# The values inside are application dependent, but frequently, \n# 0 represents unoccupied, 1 represents definitely occupied, and\n# -1 represents unknown. \nint8[] data\n\n================================================================================\nMSG: nav_msgs/MapMetaData\n# This hold basic information about the characteristics of the OccupancyGrid\n\n# The time at which the map was loaded\nbuiltin_interfaces/Time map_load_time\n\n# The map resolution [m/cell]\nfloat32 resolution\n\n# Map width [cells]\nuint32 width\n\n# Map height [cells]\nuint32 height\n\n# The origin of the map [m, m, rad].  This is the real-world pose of the\n# bottom left corner of cell (0,0) in the map.\ngeometry_msgs/Pose origin\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n",
         "# This represents a 2-D grid map, in which each cell has an associated cost\n\nstd_msgs/Header header\n\n# MetaData for the map\nCostmapMetaData metadata\n\n# The cost data, in row-major order, starting with (0,0).\nuint8[] data\n\n================================================================================\nMSG: nav2_msgs/CostmapMetaData\n# This hold basic information about the characteristics of the Costmap\n\n# The time at which the static map was loaded\nbuiltin_interfaces/Time map_load_time\n\n# The time of the last update to costmap\nbuiltin_interfaces/Time update_time\n\n# The corresponding layer name\nstring layer\n\n# The map resolution [m/cell]\nfloat32 resolution\n\n# Number of cells in the horizontal direction\nuint32 size_x\n\n# Number of cells in the vertical direction\nuint32 size_y\n\n# The origin of the costmap [m, m, rad].\n# This is the real-world pose of the cell (0,0) in the map.\ngeometry_msgs/Pose origin\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n",
         "# Update msg for Costmap containing the modified part of Costmap\nstd_msgs/Header header\n\nuint32 x\nuint32 y\n\nuint32 size_x\nuint32 size_y\n\n# The cost data, in row-major order, starting with (x,y) from 0-255 in Costmap format rather than OccupancyGrid 0-100.\nuint8[] data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "std_msgs/Header header\nint32 x\nint32 y\nuint32 width\nuint32 height\nint8[] data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This represents a 2-D grid map\nstd_msgs/Header header\n\n# MetaData for the map\nMapMetaData info\n\n# The map data, in row-major order, starting with (0,0). \n# Cell (1, 0) will be listed second, representing the next cell in the x direction. \n# Cell (0, 1) will be at the index equal to info.width, followed by (1, 1).\n# The values inside are application dependent, but frequently, \n# 0 represents unoccupied, 1 represents definitely occupied, and\n# -1 represents unknown. \nint8[] data\n\n================================================================================\nMSG: nav_msgs/MapMetaData\n# This hold basic information about the characteristics of the OccupancyGrid\n\n# The time at which the map was loaded\nbuiltin_interfaces/Time map_load_time\n\n# The map resolution [m/cell]\nfloat32 resolution\n\n# Map width [cells]\nuint32 width\n\n# Map height [cells]\nuint32 height\n\n# The origin of the map [m, m, rad].  This is the real-world pose of the\n# bottom left corner of cell (0,0) in the map.\ngeometry_msgs/Pose origin\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n",
         "# This represents a 2-D grid map, in which each cell has an associated cost\n\nstd_msgs/Header header\n\n# MetaData for the map\nCostmapMetaData metadata\n\n# The cost data, in row-major order, starting with (0,0).\nuint8[] data\n\n================================================================================\nMSG: nav2_msgs/CostmapMetaData\n# This hold basic information about the characteristics of the Costmap\n\n# The time at which the static map was loaded\nbuiltin_interfaces/Time map_load_time\n\n# The time of the last update to costmap\nbuiltin_interfaces/Time update_time\n\n# The corresponding layer name\nstring layer\n\n# The map resolution [m/cell]\nfloat32 resolution\n\n# Number of cells in the horizontal direction\nuint32 size_x\n\n# Number of cells in the vertical direction\nuint32 size_y\n\n# The origin of the costmap [m, m, rad].\n# This is the real-world pose of the cell (0,0) in the map.\ngeometry_msgs/Pose origin\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n",
         "# Update msg for Costmap containing the modified part of Costmap\nstd_msgs/Header header\n\nuint32 x\nuint32 y\n\nuint32 size_x\nuint32 size_y\n\n# The cost data, in row-major order, starting with (x,y) from 0-255 in Costmap format rather than OccupancyGrid 0-100.\nuint8[] data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "std_msgs/Header header\nint32 x\nint32 y\nuint32 width\nuint32 height\nint8[] data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This message holds a collection of N-dimensional points, which may\n# contain additional information such as normals, intensity, etc. The\n# point data is stored as a binary blob, its layout described by the\n# contents of the \"fields\" array.\n#\n# The point cloud data may be organized 2d (image-like) or 1d (unordered).\n# Point clouds organized as 2d images may be produced by camera depth sensors\n# such as stereo or time-of-flight.\n\n# Time of sensor data acquisition, and the coordinate frame ID (for 3d points).\nstd_msgs/Header header\n\n# 2D structure of the point cloud. If the cloud is unordered, height is\n# 1 and width is the length of the point cloud.\nuint32 height\nuint32 width\n\n# Describes the channels and their layout in the binary data blob.\nPointField[] fields\n\nbool    is_bigendian # Is this data bigendian?\nuint32  point_step   # Length of a point in bytes\nuint32  row_step     # Length of a row in bytes\nuint8[] data         # Actual point data, size is (row_step*height)\n\nbool is_dense        # True if there are no invalid points\n\n================================================================================\nMSG: sensor_msgs/PointField\n# This message holds the description of one point entry in the\n# PointCloud2 message format.\nuint8 INT8    = 1\nuint8 UINT8   = 2\nuint8 INT16   = 3\nuint8 UINT16  = 4\nuint8 INT32   = 5\nuint8 UINT32  = 6\nuint8 FLOAT32 = 7\nuint8 FLOAT64 = 8\n\n# Common PointField names are x, y, z, intensity, rgb, rgba\nstring name      # Name of field\nuint32 offset    # Offset from start of point struct\nuint8  datatype  # Datatype enumeration, see above\nuint32 count     # How many elements in the field\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# A Pose with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPose pose\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# Navigation Satellite fix for any Global Navigation Satellite System\n#\n# Specified using the WGS 84 reference ellipsoid\n\n# header.stamp specifies the ROS time for this measurement (the\n#        corresponding satellite time may be reported using the\n#        sensor_msgs/TimeReference message).\n#\n# header.frame_id is the frame of reference reported by the satellite\n#        receiver, usually the location of the antenna.  This is a\n#        Euclidean frame relative to the vehicle, not a reference\n#        ellipsoid.\nstd_msgs/Header header\n\n# Satellite fix status information.\nNavSatStatus status\n\n# Latitude [degrees]. Positive is north of equator; negative is south.\nfloat64 latitude\n\n# Longitude [degrees]. Positive is east of prime meridian; negative is west.\nfloat64 longitude\n\n# Altitude [m]. Positive is above the WGS 84 ellipsoid\n# (quiet NaN if no altitude is available).\nfloat64 altitude\n\n# Position covariance [m^2] defined relative to a tangential plane\n# through the reported position. The components are East, North, and\n# Up (ENU), in row-major order.\n#\n# Beware: this coordinate system exhibits singularities at the poles.\nfloat64[9] position_covariance\n\n# If the covariance of the fix is known, fill it in completely. If the\n# GPS receiver provides the variance of each measurement, put them\n# along the diagonal. If only Dilution of Precision is available,\n# estimate an approximate covariance from that.\n\nuint8 COVARIANCE_TYPE_UNKNOWN = 0\nuint8 COVARIANCE_TYPE_APPROXIMATED = 1\nuint8 COVARIANCE_TYPE_DIAGONAL_KNOWN = 2\nuint8 COVARIANCE_TYPE_KNOWN = 3\n\nuint8 position_covariance_type\n\n================================================================================\nMSG: sensor_msgs/NavSatStatus\n# Navigation Satellite fix status for any Global Navigation Satellite System.\n#\n# Whether to output an augmented fix is determined by both the fix\n# type and the last time differential corrections were received.  A\n# fix is valid when status >= STATUS_FIX.\n\nint8 STATUS_NO_FIX =  -1        # unable to fix position\nint8 STATUS_FIX =      0        # unaugmented fix\nint8 STATUS_SBAS_FIX = 1        # with satellite-based augmentation\nint8 STATUS_GBAS_FIX = 2        # with ground-based augmentation\n\nint8 status\n\n# Bits defining which Global Navigation Satellite System signals were\n# used by the receiver.\n\nuint16 SERVICE_GPS =     1\nuint16 SERVICE_GLONASS = 2\nuint16 SERVICE_COMPASS = 4      # includes BeiDou.\nuint16 SERVICE_GALILEO = 8\n\nuint16 service\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This is a message to hold data from an IMU (Inertial Measurement Unit)\n#\n# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec\n#\n# If the covariance of the measurement is known, it should be filled in (if all you know is the\n# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)\n# A covariance matrix of all zeros will be interpreted as \"covariance unknown\", and to use the\n# data a covariance will have to be assumed or gotten from some other source\n#\n# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an\n# orientation estimate), please set element 0 of the associated covariance matrix to -1\n# If you are interpreting this message, please check for a value of -1 in the first element of each\n# covariance matrix, and disregard the associated estimate.\n\nstd_msgs/Header header\n\ngeometry_msgs/Quaternion orientation\nfloat64[9] orientation_covariance # Row major about x, y, z axes\n\ngeometry_msgs/Vector3 angular_velocity\nfloat64[9] angular_velocity_covariance # Row major about x, y, z axes\n\ngeometry_msgs/Vector3 linear_acceleration\nfloat64[9] linear_acceleration_covariance # Row major x, y z\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space.\n\n# This is semantically different than a point.\n# A vector is always anchored at the origin.\n# When a transform is applied to a vector, only the rotational component is applied.\n\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This is a message to hold data from an IMU (Inertial Measurement Unit)\n#\n# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec\n#\n# If the covariance of the measurement is known, it should be filled in (if all you know is the\n# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)\n# A covariance matrix of all zeros will be interpreted as \"covariance unknown\", and to use the\n# data a covariance will have to be assumed or gotten from some other source\n#\n# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an\n# orientation estimate), please set element 0 of the associated covariance matrix to -1\n# If you are interpreting this message, please check for a value of -1 in the first element of each\n# covariance matrix, and disregard the associated estimate.\n\nstd_msgs/Header header\n\ngeometry_msgs/Quaternion orientation\nfloat64[9] orientation_covariance # Row major about x, y, z axes\n\ngeometry_msgs/Vector3 angular_velocity\nfloat64[9] angular_velocity_covariance # Row major about x, y, z axes\n\ngeometry_msgs/Vector3 linear_acceleration\nfloat64[9] linear_acceleration_covariance # Row major x, y z\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space.\n\n# This is semantically different than a point.\n# A vector is always anchored at the origin.\n# When a transform is applied to a vector, only the rotational component is applied.\n\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# failed to get full definition text for usr_msgs/msg/ImuError: //",
         "# Measurement of the Magnetic Field vector at a specific location.\n#\n# If the covariance of the measurement is known, it should be filled in.\n# If all you know is the variance of each measurement, e.g. from the datasheet,\n# just put those along the diagonal.\n# A covariance matrix of all zeros will be interpreted as \"covariance unknown\",\n# and to use the data a covariance will have to be assumed or gotten from some\n# other source.\n\nstd_msgs/Header header               # timestamp is the time the\n                                           # field was measured\n                                           # frame_id is the location and orientation\n                                           # of the field measurement\n\ngeometry_msgs/Vector3 magnetic_field # x, y, and z components of the\n                                           # field vector in Tesla\n                                           # If your sensor does not output 3 axes,\n                                           # put NaNs in the components not reported.\n\nfloat64[9] magnetic_field_covariance       # Row major about x, y, z axes\n                                           # 0 is interpreted as variance unknown\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space.\n\n# This is semantically different than a point.\n# A vector is always anchored at the origin.\n# When a transform is applied to a vector, only the rotational component is applied.\n\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This is a message to hold data from an IMU (Inertial Measurement Unit)\n#\n# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec\n#\n# If the covariance of the measurement is known, it should be filled in (if all you know is the\n# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)\n# A covariance matrix of all zeros will be interpreted as \"covariance unknown\", and to use the\n# data a covariance will have to be assumed or gotten from some other source\n#\n# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an\n# orientation estimate), please set element 0 of the associated covariance matrix to -1\n# If you are interpreting this message, please check for a value of -1 in the first element of each\n# covariance matrix, and disregard the associated estimate.\n\nstd_msgs/Header header\n\ngeometry_msgs/Quaternion orientation\nfloat64[9] orientation_covariance # Row major about x, y, z axes\n\ngeometry_msgs/Vector3 angular_velocity\nfloat64[9] angular_velocity_covariance # Row major about x, y, z axes\n\ngeometry_msgs/Vector3 linear_acceleration\nfloat64[9] linear_acceleration_covariance # Row major x, y z\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space.\n\n# This is semantically different than a point.\n# A vector is always anchored at the origin.\n# When a transform is applied to a vector, only the rotational component is applied.\n\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# Single temperature reading.\n\nstd_msgs/Header header # timestamp is the time the temperature was measured\n                             # frame_id is the location of the temperature reading\n\nfloat64 temperature          # Measurement of the Temperature in Degrees Celsius.\n\nfloat64 variance             # 0 is interpreted as variance unknown.\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This expresses an estimated pose with a reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPoseWithCovariance pose\n\n================================================================================\nMSG: geometry_msgs/PoseWithCovariance\n# This represents a pose in free space with uncertainty.\n\nPose pose\n\n# Row-major representation of the 6x6 covariance matrix\n# The orientation parameters use a fixed-axis representation.\n# In order, the parameters are:\n# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\nfloat64[36] covariance\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "Marker[] markers\n\n================================================================================\nMSG: visualization_msgs/Marker\n# See:\n#  - http://www.ros.org/wiki/rviz/DisplayTypes/Marker\n#  - http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes\n#\n# for more information on using this message with rviz.\n\nint32 ARROW=0\nint32 CUBE=1\nint32 SPHERE=2\nint32 CYLINDER=3\nint32 LINE_STRIP=4\nint32 LINE_LIST=5\nint32 CUBE_LIST=6\nint32 SPHERE_LIST=7\nint32 POINTS=8\nint32 TEXT_VIEW_FACING=9\nint32 MESH_RESOURCE=10\nint32 TRIANGLE_LIST=11\n\nint32 ADD=0\nint32 MODIFY=0\nint32 DELETE=2\nint32 DELETEALL=3\n\n# Header for timestamp and frame id.\nstd_msgs/Header header\n# Namespace in which to place the object.\n# Used in conjunction with id to create a unique name for the object.\nstring ns\n# Object ID used in conjunction with the namespace for manipulating and deleting the object later.\nint32 id\n# Type of object.\nint32 type\n# Action to take; one of:\n#  - 0 add/modify an object\n#  - 1 (deprecated)\n#  - 2 deletes an object (with the given ns and id)\n#  - 3 deletes all objects (or those with the given ns if any)\nint32 action\n# Pose of the object with respect the frame_id specified in the header.\ngeometry_msgs/Pose pose\n# Scale of the object; 1,1,1 means default (usually 1 meter square).\ngeometry_msgs/Vector3 scale\n# Color of the object; in the range: [0.0-1.0]\nstd_msgs/ColorRGBA color\n# How long the object should last before being automatically deleted.\n# 0 indicates forever.\nbuiltin_interfaces/Duration lifetime\n# If this marker should be frame-locked, i.e. retransformed into its frame every timestep.\nbool frame_locked\n\n# Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, etc.)\ngeometry_msgs/Point[] points\n# Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, etc.)\n# The number of colors provided must either be 0 or equal to the number of points provided.\n# NOTE: alpha is not yet used\nstd_msgs/ColorRGBA[] colors\n\n# Texture resource is a special URI that can either reference a texture file in\n# a format acceptable to (resource retriever)[https://index.ros.org/p/resource_retriever/]\n# or an embedded texture via a string matching the format:\n#   \"embedded://texture_name\"\nstring texture_resource\n# An image to be loaded into the rendering engine as the texture for this marker.\n# This will be used iff texture_resource is set to embedded.\nsensor_msgs/CompressedImage texture\n# Location of each vertex within the texture; in the range: [0.0-1.0]\nUVCoordinate[] uv_coordinates\n\n# Only used for text markers\nstring text\n\n# Only used for MESH_RESOURCE markers.\n# Similar to texture_resource, mesh_resource uses resource retriever to load a mesh.\n# Optionally, a mesh file can be sent in-message via the mesh_file field. If doing so,\n# use the following format for mesh_resource:\n#   \"embedded://mesh_name\"\nstring mesh_resource\nMeshFile mesh_file\nbool mesh_use_embedded_materials\n\n================================================================================\nMSG: visualization_msgs/MeshFile\n# Used to send raw mesh files.\n\n# The filename is used for both debug purposes and to provide a file extension\n# for whatever parser is used.\nstring filename\n\n# This stores the raw text of the mesh file.\nuint8[] data\n\n================================================================================\nMSG: visualization_msgs/UVCoordinate\n# Location of the pixel as a ratio of the width of a 2D texture.\n# Values should be in range: [0.0-1.0].\nfloat32 u\nfloat32 v\n\n================================================================================\nMSG: sensor_msgs/CompressedImage\n# This message contains a compressed image.\n\nstd_msgs/Header header # Header timestamp should be acquisition time of image\n                             # Header frame_id should be optical frame of camera\n                             # origin of frame should be optical center of cameara\n                             # +x should point to the right in the image\n                             # +y should point down in the image\n                             # +z should point into to plane of the image\n\nstring format                # Specifies the format of the data\n                             #   Acceptable values:\n                             #     jpeg, png, tiff\n\nuint8[] data                 # Compressed image buffer\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: builtin_interfaces/Duration\n# Duration defines a period between two time points.\n# Messages of this datatype are of ROS Time following this design:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# Seconds component, range is valid over any possible int32 value.\nint32 sec\n\n# Nanoseconds component in the range of [0, 1e9).\nuint32 nanosec\n\n================================================================================\nMSG: std_msgs/ColorRGBA\nfloat32 r\nfloat32 g\nfloat32 b\nfloat32 a\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space.\n\n# This is semantically different than a point.\n# A vector is always anchored at the origin.\n# When a transform is applied to a vector, only the rotational component is applied.\n\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# The time point at which this event occurred.\nuint64 timestamp\n\n# The id and label of this transition event.\nTransition transition\n\n# The starting state from which this event transitioned.\nState start_state\n\n# The end state of this transition event.\nState goal_state\n\n================================================================================\nMSG: lifecycle_msgs/State\n# Primary state definitions as depicted in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# These are the primary states. State changes can only be requested when the\n# node is in one of these states.\n\n# Indicates state has not yet been set.\nuint8 PRIMARY_STATE_UNKNOWN = 0\n\n# This is the life cycle state the node is in immediately after being\n# instantiated.\nuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\n# This state represents a node that is not currently performing any processing.\nuint8 PRIMARY_STATE_INACTIVE = 2\n\n# This is the main state of the node's life cycle. While in this state, the node\n# performs any processing, responds to service requests, reads and processes\n# data, produces output, etc.\nuint8 PRIMARY_STATE_ACTIVE = 3\n\n# The finalized state is the state in which the node ends immediately before\n# being destroyed.\nuint8 PRIMARY_STATE_FINALIZED = 4\n\n# Temporary intermediate states. When a transition is requested, the node\n# changes its state into one of these states.\n\n# In this transition state the node's onConfigure callback will be called to\n# allow the node to load its configuration and conduct any required setup.\nuint8 TRANSITION_STATE_CONFIGURING = 10\n\n# In this transition state the node's callback onCleanup will be called to clear\n# all state and return the node to a functionally equivalent state as when\n# first created.\nuint8 TRANSITION_STATE_CLEANINGUP = 11\n\n# In this transition state the callback onShutdown will be executed to do any\n# cleanup necessary before destruction.\nuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\n# In this transition state the callback onActivate will be executed to do any\n# final preparations to start executing.\nuint8 TRANSITION_STATE_ACTIVATING = 13\n\n# In this transition state the callback onDeactivate will be executed to do any\n# cleanup to start executing, and reverse the onActivate changes.\nuint8 TRANSITION_STATE_DEACTIVATING = 14\n\n# This transition state is where any error may be cleaned up.\nuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\n# The state id value from the above definitions.\nuint8 id\n\n# A text label of the state.\nstring label\n\n================================================================================\nMSG: lifecycle_msgs/Transition\n# Default values for transitions as described in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# Reserved [0-9], publicly available transitions.\n# When a node is in one of these primary states, these transitions can be\n# invoked.\n\n# This transition will instantiate the node, but will not run any code beyond\n# the constructor.\nuint8 TRANSITION_CREATE = 0\n\n# The node's onConfigure callback will be called to allow the node to load its\n# configuration and conduct any required setup.\nuint8 TRANSITION_CONFIGURE = 1\n\n# The node's callback onCleanup will be called in this transition to allow the\n# node to load its configuration and conduct any required setup.\nuint8 TRANSITION_CLEANUP = 2\n\n# The node's callback onActivate will be executed to do any final preparations\n# to start executing.\nuint8 TRANSITION_ACTIVATE = 3\n\n# The node's callback onDeactivate will be executed to do any cleanup to start\n# executing, and reverse the onActivate changes.\nuint8 TRANSITION_DEACTIVATE = 4\n\n# This signals shutdown during an unconfigured state, the node's callback\n# onShutdown will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\n# This signals shutdown during an inactive state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\n# This signals shutdown during an active state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\n# This transition will simply cause the deallocation of the node.\nuint8 TRANSITION_DESTROY = 8\n\n# Reserved [10-69], private transitions\n# These transitions are not publicly available and cannot be invoked by a user.\n# The following transitions are implicitly invoked based on the callback\n# feedback of the intermediate transition states.\nuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\nuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\nuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\nuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\nuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\nuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\nuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\nuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\nuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\nuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\nuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\nuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\nuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\nuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\nuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\nuint8 TRANSITION_ON_ERROR_SUCCESS = 60\nuint8 TRANSITION_ON_ERROR_FAILURE = 61\nuint8 TRANSITION_ON_ERROR_ERROR = 62\n\n# Reserved [90-99]. Transition callback success values.\n# These return values ought to be set as a return value for each callback.\n# Depending on which return value, the transition will be executed correctly or\n# fallback/error callbacks will be triggered.\n\n# The transition callback successfully performed its required functionality.\nuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\n# The transition callback failed to perform its required functionality.\nuint8 TRANSITION_CALLBACK_FAILURE = 98\n\n# The transition callback encountered an error that requires special cleanup, if\n# possible.\nuint8 TRANSITION_CALLBACK_ERROR = 99\n\n##\n## Fields\n##\n\n# The transition id from above definitions.\nuint8 id\n\n# A text label of the transition.\nstring label\n",
         "# Action type for robot in Collision Monitor\nuint8 DO_NOTHING=0 # No action\nuint8 STOP=1 # Stop the robot\nuint8 SLOWDOWN=2 # Slowdown in percentage from current operating speed\nuint8 APPROACH=3 # Keep constant time interval before collision\nuint8 LIMIT=4 # Sets a limit of velocities if pts in range\nuint8 action_type\n\n# Name of triggered polygon\nstring polygon_name\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "# Provides meta-information about a visual pipeline.\n#\n# This message serves a similar purpose to sensor_msgs/CameraInfo, but instead\n#   of being tied to hardware, it represents information about a specific\n#   computer vision pipeline. This information stays constant (or relatively\n#   constant) over time, and so it is wasteful to send it with each individual\n#   result. By listening to these messages, subscribers will receive\n#   the context in which published vision messages are to be interpreted.\n# Each vision pipeline should publish its LabelInfo messages to its own topic,\n#   in a manner similar to CameraInfo.\n# This message is meant to allow converting data from vision pipelines that\n#   return id based classifications back to human readable string class names.\n\n# Used for sequencing\nstd_msgs/Header header\n\n# An array of uint16 keys and string values containing the association\n#   between class identifiers and their names. According to the amount\n#   of classes and the datatype used to store their ids internally, the\n#   maxiumum class id allowed (65535 for uint16 and 255 for uint8) belongs to\n#   the \"UNLABELED\" class.\nvision_msgs/VisionClass[] class_map \n\n# The value between 0-1 used as confidence threshold for the inference.\nfloat32 threshold\n\n================================================================================\nMSG: vision_msgs/VisionClass\n# A key value pair that maps an integer class_id to a string class label\n#   in computer vision systems.\n\n# The int value that identifies the class.\n# Elements identified with 65535, the maximum uint16 value are assumed\n#   to belong to the \"UNLABELED\" class. For vision pipelines using less\n#   than 255 classes the \"UNLABELED\" is the maximum value in the uint8\n#   range.\nuint16 class_id\n\n# The name of the class represented by the class_id\nstring class_name\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# The time point at which this event occurred.\nuint64 timestamp\n\n# The id and label of this transition event.\nTransition transition\n\n# The starting state from which this event transitioned.\nState start_state\n\n# The end state of this transition event.\nState goal_state\n\n================================================================================\nMSG: lifecycle_msgs/State\n# Primary state definitions as depicted in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# These are the primary states. State changes can only be requested when the\n# node is in one of these states.\n\n# Indicates state has not yet been set.\nuint8 PRIMARY_STATE_UNKNOWN = 0\n\n# This is the life cycle state the node is in immediately after being\n# instantiated.\nuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\n# This state represents a node that is not currently performing any processing.\nuint8 PRIMARY_STATE_INACTIVE = 2\n\n# This is the main state of the node's life cycle. While in this state, the node\n# performs any processing, responds to service requests, reads and processes\n# data, produces output, etc.\nuint8 PRIMARY_STATE_ACTIVE = 3\n\n# The finalized state is the state in which the node ends immediately before\n# being destroyed.\nuint8 PRIMARY_STATE_FINALIZED = 4\n\n# Temporary intermediate states. When a transition is requested, the node\n# changes its state into one of these states.\n\n# In this transition state the node's onConfigure callback will be called to\n# allow the node to load its configuration and conduct any required setup.\nuint8 TRANSITION_STATE_CONFIGURING = 10\n\n# In this transition state the node's callback onCleanup will be called to clear\n# all state and return the node to a functionally equivalent state as when\n# first created.\nuint8 TRANSITION_STATE_CLEANINGUP = 11\n\n# In this transition state the callback onShutdown will be executed to do any\n# cleanup necessary before destruction.\nuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\n# In this transition state the callback onActivate will be executed to do any\n# final preparations to start executing.\nuint8 TRANSITION_STATE_ACTIVATING = 13\n\n# In this transition state the callback onDeactivate will be executed to do any\n# cleanup to start executing, and reverse the onActivate changes.\nuint8 TRANSITION_STATE_DEACTIVATING = 14\n\n# This transition state is where any error may be cleaned up.\nuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\n# The state id value from the above definitions.\nuint8 id\n\n# A text label of the state.\nstring label\n\n================================================================================\nMSG: lifecycle_msgs/Transition\n# Default values for transitions as described in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# Reserved [0-9], publicly available transitions.\n# When a node is in one of these primary states, these transitions can be\n# invoked.\n\n# This transition will instantiate the node, but will not run any code beyond\n# the constructor.\nuint8 TRANSITION_CREATE = 0\n\n# The node's onConfigure callback will be called to allow the node to load its\n# configuration and conduct any required setup.\nuint8 TRANSITION_CONFIGURE = 1\n\n# The node's callback onCleanup will be called in this transition to allow the\n# node to load its configuration and conduct any required setup.\nuint8 TRANSITION_CLEANUP = 2\n\n# The node's callback onActivate will be executed to do any final preparations\n# to start executing.\nuint8 TRANSITION_ACTIVATE = 3\n\n# The node's callback onDeactivate will be executed to do any cleanup to start\n# executing, and reverse the onActivate changes.\nuint8 TRANSITION_DEACTIVATE = 4\n\n# This signals shutdown during an unconfigured state, the node's callback\n# onShutdown will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\n# This signals shutdown during an inactive state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\n# This signals shutdown during an active state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\n# This transition will simply cause the deallocation of the node.\nuint8 TRANSITION_DESTROY = 8\n\n# Reserved [10-69], private transitions\n# These transitions are not publicly available and cannot be invoked by a user.\n# The following transitions are implicitly invoked based on the callback\n# feedback of the intermediate transition states.\nuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\nuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\nuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\nuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\nuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\nuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\nuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\nuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\nuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\nuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\nuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\nuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\nuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\nuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\nuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\nuint8 TRANSITION_ON_ERROR_SUCCESS = 60\nuint8 TRANSITION_ON_ERROR_FAILURE = 61\nuint8 TRANSITION_ON_ERROR_ERROR = 62\n\n# Reserved [90-99]. Transition callback success values.\n# These return values ought to be set as a return value for each callback.\n# Depending on which return value, the transition will be executed correctly or\n# fallback/error callbacks will be triggered.\n\n# The transition callback successfully performed its required functionality.\nuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\n# The transition callback failed to perform its required functionality.\nuint8 TRANSITION_CALLBACK_FAILURE = 98\n\n# The transition callback encountered an error that requires special cleanup, if\n# possible.\nuint8 TRANSITION_CALLBACK_ERROR = 99\n\n##\n## Fields\n##\n\n# The transition id from above definitions.\nuint8 id\n\n# A text label of the transition.\nstring label\n",
         "# The time point at which this event occurred.\nuint64 timestamp\n\n# The id and label of this transition event.\nTransition transition\n\n# The starting state from which this event transitioned.\nState start_state\n\n# The end state of this transition event.\nState goal_state\n\n================================================================================\nMSG: lifecycle_msgs/State\n# Primary state definitions as depicted in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# These are the primary states. State changes can only be requested when the\n# node is in one of these states.\n\n# Indicates state has not yet been set.\nuint8 PRIMARY_STATE_UNKNOWN = 0\n\n# This is the life cycle state the node is in immediately after being\n# instantiated.\nuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\n# This state represents a node that is not currently performing any processing.\nuint8 PRIMARY_STATE_INACTIVE = 2\n\n# This is the main state of the node's life cycle. While in this state, the node\n# performs any processing, responds to service requests, reads and processes\n# data, produces output, etc.\nuint8 PRIMARY_STATE_ACTIVE = 3\n\n# The finalized state is the state in which the node ends immediately before\n# being destroyed.\nuint8 PRIMARY_STATE_FINALIZED = 4\n\n# Temporary intermediate states. When a transition is requested, the node\n# changes its state into one of these states.\n\n# In this transition state the node's onConfigure callback will be called to\n# allow the node to load its configuration and conduct any required setup.\nuint8 TRANSITION_STATE_CONFIGURING = 10\n\n# In this transition state the node's callback onCleanup will be called to clear\n# all state and return the node to a functionally equivalent state as when\n# first created.\nuint8 TRANSITION_STATE_CLEANINGUP = 11\n\n# In this transition state the callback onShutdown will be executed to do any\n# cleanup necessary before destruction.\nuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\n# In this transition state the callback onActivate will be executed to do any\n# final preparations to start executing.\nuint8 TRANSITION_STATE_ACTIVATING = 13\n\n# In this transition state the callback onDeactivate will be executed to do any\n# cleanup to start executing, and reverse the onActivate changes.\nuint8 TRANSITION_STATE_DEACTIVATING = 14\n\n# This transition state is where any error may be cleaned up.\nuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\n# The state id value from the above definitions.\nuint8 id\n\n# A text label of the state.\nstring label\n\n================================================================================\nMSG: lifecycle_msgs/Transition\n# Default values for transitions as described in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# Reserved [0-9], publicly available transitions.\n# When a node is in one of these primary states, these transitions can be\n# invoked.\n\n# This transition will instantiate the node, but will not run any code beyond\n# the constructor.\nuint8 TRANSITION_CREATE = 0\n\n# The node's onConfigure callback will be called to allow the node to load its\n# configuration and conduct any required setup.\nuint8 TRANSITION_CONFIGURE = 1\n\n# The node's callback onCleanup will be called in this transition to allow the\n# node to load its configuration and conduct any required setup.\nuint8 TRANSITION_CLEANUP = 2\n\n# The node's callback onActivate will be executed to do any final preparations\n# to start executing.\nuint8 TRANSITION_ACTIVATE = 3\n\n# The node's callback onDeactivate will be executed to do any cleanup to start\n# executing, and reverse the onActivate changes.\nuint8 TRANSITION_DEACTIVATE = 4\n\n# This signals shutdown during an unconfigured state, the node's callback\n# onShutdown will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\n# This signals shutdown during an inactive state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\n# This signals shutdown during an active state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\n# This transition will simply cause the deallocation of the node.\nuint8 TRANSITION_DESTROY = 8\n\n# Reserved [10-69], private transitions\n# These transitions are not publicly available and cannot be invoked by a user.\n# The following transitions are implicitly invoked based on the callback\n# feedback of the intermediate transition states.\nuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\nuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\nuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\nuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\nuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\nuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\nuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\nuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\nuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\nuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\nuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\nuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\nuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\nuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\nuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\nuint8 TRANSITION_ON_ERROR_SUCCESS = 60\nuint8 TRANSITION_ON_ERROR_FAILURE = 61\nuint8 TRANSITION_ON_ERROR_ERROR = 62\n\n# Reserved [90-99]. Transition callback success values.\n# These return values ought to be set as a return value for each callback.\n# Depending on which return value, the transition will be executed correctly or\n# fallback/error callbacks will be triggered.\n\n# The transition callback successfully performed its required functionality.\nuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\n# The transition callback failed to perform its required functionality.\nuint8 TRANSITION_CALLBACK_FAILURE = 98\n\n# The transition callback encountered an error that requires special cleanup, if\n# possible.\nuint8 TRANSITION_CALLBACK_ERROR = 99\n\n##\n## Fields\n##\n\n# The transition id from above definitions.\nuint8 id\n\n# A text label of the transition.\nstring label\n",
         "# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n",
         "# This message holds a collection of N-dimensional points, which may\n# contain additional information such as normals, intensity, etc. The\n# point data is stored as a binary blob, its layout described by the\n# contents of the \"fields\" array.\n#\n# The point cloud data may be organized 2d (image-like) or 1d (unordered).\n# Point clouds organized as 2d images may be produced by camera depth sensors\n# such as stereo or time-of-flight.\n\n# Time of sensor data acquisition, and the coordinate frame ID (for 3d points).\nstd_msgs/Header header\n\n# 2D structure of the point cloud. If the cloud is unordered, height is\n# 1 and width is the length of the point cloud.\nuint32 height\nuint32 width\n\n# Describes the channels and their layout in the binary data blob.\nPointField[] fields\n\nbool    is_bigendian # Is this data bigendian?\nuint32  point_step   # Length of a point in bytes\nuint32  row_step     # Length of a row in bytes\nuint8[] data         # Actual point data, size is (row_step*height)\n\nbool is_dense        # True if there are no invalid points\n\n================================================================================\nMSG: sensor_msgs/PointField\n# This message holds the description of one point entry in the\n# PointCloud2 message format.\nuint8 INT8    = 1\nuint8 UINT8   = 2\nuint8 INT16   = 3\nuint8 UINT16  = 4\nuint8 INT32   = 5\nuint8 UINT32  = 6\nuint8 FLOAT32 = 7\nuint8 FLOAT64 = 8\n\n# Common PointField names are x, y, z, intensity, rgb, rgba\nstring name      # Name of field\nuint32 offset    # Offset from start of point struct\nuint8  datatype  # Datatype enumeration, see above\nuint32 count     # How many elements in the field\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This expresses velocity in free space broken into its linear and angular parts.\n\nVector3  linear\nVector3  angular\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space.\n\n# This is semantically different than a point.\n# A vector is always anchored at the origin.\n# When a transform is applied to a vector, only the rotational component is applied.\n\nfloat64 x\nfloat64 y\nfloat64 z\n",
         "# This represents a 2-D grid map\nstd_msgs/Header header\n\n# MetaData for the map\nMapMetaData info\n\n# The map data, in row-major order, starting with (0,0). \n# Cell (1, 0) will be listed second, representing the next cell in the x direction. \n# Cell (0, 1) will be at the index equal to info.width, followed by (1, 1).\n# The values inside are application dependent, but frequently, \n# 0 represents unoccupied, 1 represents definitely occupied, and\n# -1 represents unknown. \nint8[] data\n\n================================================================================\nMSG: nav_msgs/MapMetaData\n# This hold basic information about the characteristics of the OccupancyGrid\n\n# The time at which the map was loaded\nbuiltin_interfaces/Time map_load_time\n\n# The map resolution [m/cell]\nfloat32 resolution\n\n# Map width [cells]\nuint32 width\n\n# Map height [cells]\nuint32 height\n\n# The origin of the map [m, m, rad].  This is the real-world pose of the\n# bottom left corner of cell (0,0) in the map.\ngeometry_msgs/Pose origin\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n",
         "# This represents a 2-D grid map, in which each cell has an associated cost\n\nstd_msgs/Header header\n\n# MetaData for the map\nCostmapMetaData metadata\n\n# The cost data, in row-major order, starting with (0,0).\nuint8[] data\n\n================================================================================\nMSG: nav2_msgs/CostmapMetaData\n# This hold basic information about the characteristics of the Costmap\n\n# The time at which the static map was loaded\nbuiltin_interfaces/Time map_load_time\n\n# The time of the last update to costmap\nbuiltin_interfaces/Time update_time\n\n# The corresponding layer name\nstring layer\n\n# The map resolution [m/cell]\nfloat32 resolution\n\n# Number of cells in the horizontal direction\nuint32 size_x\n\n# Number of cells in the vertical direction\nuint32 size_y\n\n# The origin of the costmap [m, m, rad].\n# This is the real-world pose of the cell (0,0) in the map.\ngeometry_msgs/Pose origin\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n",
         "# Update msg for Costmap containing the modified part of Costmap\nstd_msgs/Header header\n\nuint32 x\nuint32 y\n\nuint32 size_x\nuint32 size_y\n\n# The cost data, in row-major order, starting with (x,y) from 0-255 in Costmap format rather than OccupancyGrid 0-100.\nuint8[] data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "std_msgs/Header header\nint32 x\nint32 y\nuint32 width\nuint32 height\nint8[] data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# A specification of a polygon where the first and last points are assumed to be connected\n\nPoint32[] points\n\n================================================================================\nMSG: geometry_msgs/Point32\n# This contains the position of a point in free space(with 32 bits of precision).\n# It is recommended to use Point wherever possible instead of Point32.\n#\n# This recommendation is to promote interoperability.\n#\n# This message is designed to take up less space when sending\n# lots of points at once, as in the case of a PointCloud.\n\nfloat32 x\nfloat32 y\nfloat32 z\n",
         "# The time point at which this event occurred.\nuint64 timestamp\n\n# The id and label of this transition event.\nTransition transition\n\n# The starting state from which this event transitioned.\nState start_state\n\n# The end state of this transition event.\nState goal_state\n\n================================================================================\nMSG: lifecycle_msgs/State\n# Primary state definitions as depicted in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# These are the primary states. State changes can only be requested when the\n# node is in one of these states.\n\n# Indicates state has not yet been set.\nuint8 PRIMARY_STATE_UNKNOWN = 0\n\n# This is the life cycle state the node is in immediately after being\n# instantiated.\nuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\n# This state represents a node that is not currently performing any processing.\nuint8 PRIMARY_STATE_INACTIVE = 2\n\n# This is the main state of the node's life cycle. While in this state, the node\n# performs any processing, responds to service requests, reads and processes\n# data, produces output, etc.\nuint8 PRIMARY_STATE_ACTIVE = 3\n\n# The finalized state is the state in which the node ends immediately before\n# being destroyed.\nuint8 PRIMARY_STATE_FINALIZED = 4\n\n# Temporary intermediate states. When a transition is requested, the node\n# changes its state into one of these states.\n\n# In this transition state the node's onConfigure callback will be called to\n# allow the node to load its configuration and conduct any required setup.\nuint8 TRANSITION_STATE_CONFIGURING = 10\n\n# In this transition state the node's callback onCleanup will be called to clear\n# all state and return the node to a functionally equivalent state as when\n# first created.\nuint8 TRANSITION_STATE_CLEANINGUP = 11\n\n# In this transition state the callback onShutdown will be executed to do any\n# cleanup necessary before destruction.\nuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\n# In this transition state the callback onActivate will be executed to do any\n# final preparations to start executing.\nuint8 TRANSITION_STATE_ACTIVATING = 13\n\n# In this transition state the callback onDeactivate will be executed to do any\n# cleanup to start executing, and reverse the onActivate changes.\nuint8 TRANSITION_STATE_DEACTIVATING = 14\n\n# This transition state is where any error may be cleaned up.\nuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\n# The state id value from the above definitions.\nuint8 id\n\n# A text label of the state.\nstring label\n\n================================================================================\nMSG: lifecycle_msgs/Transition\n# Default values for transitions as described in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# Reserved [0-9], publicly available transitions.\n# When a node is in one of these primary states, these transitions can be\n# invoked.\n\n# This transition will instantiate the node, but will not run any code beyond\n# the constructor.\nuint8 TRANSITION_CREATE = 0\n\n# The node's onConfigure callback will be called to allow the node to load its\n# configuration and conduct any required setup.\nuint8 TRANSITION_CONFIGURE = 1\n\n# The node's callback onCleanup will be called in this transition to allow the\n# node to load its configuration and conduct any required setup.\nuint8 TRANSITION_CLEANUP = 2\n\n# The node's callback onActivate will be executed to do any final preparations\n# to start executing.\nuint8 TRANSITION_ACTIVATE = 3\n\n# The node's callback onDeactivate will be executed to do any cleanup to start\n# executing, and reverse the onActivate changes.\nuint8 TRANSITION_DEACTIVATE = 4\n\n# This signals shutdown during an unconfigured state, the node's callback\n# onShutdown will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\n# This signals shutdown during an inactive state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\n# This signals shutdown during an active state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\n# This transition will simply cause the deallocation of the node.\nuint8 TRANSITION_DESTROY = 8\n\n# Reserved [10-69], private transitions\n# These transitions are not publicly available and cannot be invoked by a user.\n# The following transitions are implicitly invoked based on the callback\n# feedback of the intermediate transition states.\nuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\nuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\nuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\nuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\nuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\nuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\nuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\nuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\nuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\nuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\nuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\nuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\nuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\nuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\nuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\nuint8 TRANSITION_ON_ERROR_SUCCESS = 60\nuint8 TRANSITION_ON_ERROR_FAILURE = 61\nuint8 TRANSITION_ON_ERROR_ERROR = 62\n\n# Reserved [90-99]. Transition callback success values.\n# These return values ought to be set as a return value for each callback.\n# Depending on which return value, the transition will be executed correctly or\n# fallback/error callbacks will be triggered.\n\n# The transition callback successfully performed its required functionality.\nuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\n# The transition callback failed to perform its required functionality.\nuint8 TRANSITION_CALLBACK_FAILURE = 98\n\n# The transition callback encountered an error that requires special cleanup, if\n# possible.\nuint8 TRANSITION_CALLBACK_ERROR = 99\n\n##\n## Fields\n##\n\n# The transition id from above definitions.\nuint8 id\n\n# A text label of the transition.\nstring label\n",
         "# This represents a 2-D grid map\nstd_msgs/Header header\n\n# MetaData for the map\nMapMetaData info\n\n# The map data, in row-major order, starting with (0,0). \n# Cell (1, 0) will be listed second, representing the next cell in the x direction. \n# Cell (0, 1) will be at the index equal to info.width, followed by (1, 1).\n# The values inside are application dependent, but frequently, \n# 0 represents unoccupied, 1 represents definitely occupied, and\n# -1 represents unknown. \nint8[] data\n\n================================================================================\nMSG: nav_msgs/MapMetaData\n# This hold basic information about the characteristics of the OccupancyGrid\n\n# The time at which the map was loaded\nbuiltin_interfaces/Time map_load_time\n\n# The map resolution [m/cell]\nfloat32 resolution\n\n# Map width [cells]\nuint32 width\n\n# Map height [cells]\nuint32 height\n\n# The origin of the map [m, m, rad].  This is the real-world pose of the\n# bottom left corner of cell (0,0) in the map.\ngeometry_msgs/Pose origin\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n",
         "# This represents a 2-D grid map, in which each cell has an associated cost\n\nstd_msgs/Header header\n\n# MetaData for the map\nCostmapMetaData metadata\n\n# The cost data, in row-major order, starting with (0,0).\nuint8[] data\n\n================================================================================\nMSG: nav2_msgs/CostmapMetaData\n# This hold basic information about the characteristics of the Costmap\n\n# The time at which the static map was loaded\nbuiltin_interfaces/Time map_load_time\n\n# The time of the last update to costmap\nbuiltin_interfaces/Time update_time\n\n# The corresponding layer name\nstring layer\n\n# The map resolution [m/cell]\nfloat32 resolution\n\n# Number of cells in the horizontal direction\nuint32 size_x\n\n# Number of cells in the vertical direction\nuint32 size_y\n\n# The origin of the costmap [m, m, rad].\n# This is the real-world pose of the cell (0,0) in the map.\ngeometry_msgs/Pose origin\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n",
         "# Update msg for Costmap containing the modified part of Costmap\nstd_msgs/Header header\n\nuint32 x\nuint32 y\n\nuint32 size_x\nuint32 size_y\n\n# The cost data, in row-major order, starting with (x,y) from 0-255 in Costmap format rather than OccupancyGrid 0-100.\nuint8[] data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "std_msgs/Header header\nint32 x\nint32 y\nuint32 width\nuint32 height\nint8[] data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This represents a Polygon with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPolygon polygon\n\n================================================================================\nMSG: geometry_msgs/Polygon\n# A specification of a polygon where the first and last points are assumed to be connected\n\nPoint32[] points\n\n================================================================================\nMSG: geometry_msgs/Point32\n# This contains the position of a point in free space(with 32 bits of precision).\n# It is recommended to use Point wherever possible instead of Point32.\n#\n# This recommendation is to promote interoperability.\n#\n# This message is designed to take up less space when sending\n# lots of points at once, as in the case of a PointCloud.\n\nfloat32 x\nfloat32 y\nfloat32 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This represents a 2-D grid map\nstd_msgs/Header header\n\n# MetaData for the map\nMapMetaData info\n\n# The map data, in row-major order, starting with (0,0). \n# Cell (1, 0) will be listed second, representing the next cell in the x direction. \n# Cell (0, 1) will be at the index equal to info.width, followed by (1, 1).\n# The values inside are application dependent, but frequently, \n# 0 represents unoccupied, 1 represents definitely occupied, and\n# -1 represents unknown. \nint8[] data\n\n================================================================================\nMSG: nav_msgs/MapMetaData\n# This hold basic information about the characteristics of the OccupancyGrid\n\n# The time at which the map was loaded\nbuiltin_interfaces/Time map_load_time\n\n# The map resolution [m/cell]\nfloat32 resolution\n\n# Map width [cells]\nuint32 width\n\n# Map height [cells]\nuint32 height\n\n# The origin of the map [m, m, rad].  This is the real-world pose of the\n# bottom left corner of cell (0,0) in the map.\ngeometry_msgs/Pose origin\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n",
         "# This represents a 2-D grid map, in which each cell has an associated cost\n\nstd_msgs/Header header\n\n# MetaData for the map\nCostmapMetaData metadata\n\n# The cost data, in row-major order, starting with (0,0).\nuint8[] data\n\n================================================================================\nMSG: nav2_msgs/CostmapMetaData\n# This hold basic information about the characteristics of the Costmap\n\n# The time at which the static map was loaded\nbuiltin_interfaces/Time map_load_time\n\n# The time of the last update to costmap\nbuiltin_interfaces/Time update_time\n\n# The corresponding layer name\nstring layer\n\n# The map resolution [m/cell]\nfloat32 resolution\n\n# Number of cells in the horizontal direction\nuint32 size_x\n\n# Number of cells in the vertical direction\nuint32 size_y\n\n# The origin of the costmap [m, m, rad].\n# This is the real-world pose of the cell (0,0) in the map.\ngeometry_msgs/Pose origin\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n",
         "# Update msg for Costmap containing the modified part of Costmap\nstd_msgs/Header header\n\nuint32 x\nuint32 y\n\nuint32 size_x\nuint32 size_y\n\n# The cost data, in row-major order, starting with (x,y) from 0-255 in Costmap format rather than OccupancyGrid 0-100.\nuint8[] data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "std_msgs/Header header\nint32 x\nint32 y\nuint32 width\nuint32 height\nint8[] data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This represents a 2-D grid map\nstd_msgs/Header header\n\n# MetaData for the map\nMapMetaData info\n\n# The map data, in row-major order, starting with (0,0). \n# Cell (1, 0) will be listed second, representing the next cell in the x direction. \n# Cell (0, 1) will be at the index equal to info.width, followed by (1, 1).\n# The values inside are application dependent, but frequently, \n# 0 represents unoccupied, 1 represents definitely occupied, and\n# -1 represents unknown. \nint8[] data\n\n================================================================================\nMSG: nav_msgs/MapMetaData\n# This hold basic information about the characteristics of the OccupancyGrid\n\n# The time at which the map was loaded\nbuiltin_interfaces/Time map_load_time\n\n# The map resolution [m/cell]\nfloat32 resolution\n\n# Map width [cells]\nuint32 width\n\n# Map height [cells]\nuint32 height\n\n# The origin of the map [m, m, rad].  This is the real-world pose of the\n# bottom left corner of cell (0,0) in the map.\ngeometry_msgs/Pose origin\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n",
         "# This represents a 2-D grid map, in which each cell has an associated cost\n\nstd_msgs/Header header\n\n# MetaData for the map\nCostmapMetaData metadata\n\n# The cost data, in row-major order, starting with (0,0).\nuint8[] data\n\n================================================================================\nMSG: nav2_msgs/CostmapMetaData\n# This hold basic information about the characteristics of the Costmap\n\n# The time at which the static map was loaded\nbuiltin_interfaces/Time map_load_time\n\n# The time of the last update to costmap\nbuiltin_interfaces/Time update_time\n\n# The corresponding layer name\nstring layer\n\n# The map resolution [m/cell]\nfloat32 resolution\n\n# Number of cells in the horizontal direction\nuint32 size_x\n\n# Number of cells in the vertical direction\nuint32 size_y\n\n# The origin of the costmap [m, m, rad].\n# This is the real-world pose of the cell (0,0) in the map.\ngeometry_msgs/Pose origin\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n",
         "# Update msg for Costmap containing the modified part of Costmap\nstd_msgs/Header header\n\nuint32 x\nuint32 y\n\nuint32 size_x\nuint32 size_y\n\n# The cost data, in row-major order, starting with (x,y) from 0-255 in Costmap format rather than OccupancyGrid 0-100.\nuint8[] data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "std_msgs/Header header\nint32 x\nint32 y\nuint32 width\nuint32 height\nint8[] data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This represents a 2-D grid map\nstd_msgs/Header header\n\n# MetaData for the map\nMapMetaData info\n\n# The map data, in row-major order, starting with (0,0). \n# Cell (1, 0) will be listed second, representing the next cell in the x direction. \n# Cell (0, 1) will be at the index equal to info.width, followed by (1, 1).\n# The values inside are application dependent, but frequently, \n# 0 represents unoccupied, 1 represents definitely occupied, and\n# -1 represents unknown. \nint8[] data\n\n================================================================================\nMSG: nav_msgs/MapMetaData\n# This hold basic information about the characteristics of the OccupancyGrid\n\n# The time at which the map was loaded\nbuiltin_interfaces/Time map_load_time\n\n# The map resolution [m/cell]\nfloat32 resolution\n\n# Map width [cells]\nuint32 width\n\n# Map height [cells]\nuint32 height\n\n# The origin of the map [m, m, rad].  This is the real-world pose of the\n# bottom left corner of cell (0,0) in the map.\ngeometry_msgs/Pose origin\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n",
         "# This represents a 2-D grid map, in which each cell has an associated cost\n\nstd_msgs/Header header\n\n# MetaData for the map\nCostmapMetaData metadata\n\n# The cost data, in row-major order, starting with (0,0).\nuint8[] data\n\n================================================================================\nMSG: nav2_msgs/CostmapMetaData\n# This hold basic information about the characteristics of the Costmap\n\n# The time at which the static map was loaded\nbuiltin_interfaces/Time map_load_time\n\n# The time of the last update to costmap\nbuiltin_interfaces/Time update_time\n\n# The corresponding layer name\nstring layer\n\n# The map resolution [m/cell]\nfloat32 resolution\n\n# Number of cells in the horizontal direction\nuint32 size_x\n\n# Number of cells in the vertical direction\nuint32 size_y\n\n# The origin of the costmap [m, m, rad].\n# This is the real-world pose of the cell (0,0) in the map.\ngeometry_msgs/Pose origin\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n",
         "# Update msg for Costmap containing the modified part of Costmap\nstd_msgs/Header header\n\nuint32 x\nuint32 y\n\nuint32 size_x\nuint32 size_y\n\n# The cost data, in row-major order, starting with (x,y) from 0-255 in Costmap format rather than OccupancyGrid 0-100.\nuint8[] data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "std_msgs/Header header\nint32 x\nint32 y\nuint32 width\nuint32 height\nint8[] data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This represents a 2-D grid map\nstd_msgs/Header header\n\n# MetaData for the map\nMapMetaData info\n\n# The map data, in row-major order, starting with (0,0). \n# Cell (1, 0) will be listed second, representing the next cell in the x direction. \n# Cell (0, 1) will be at the index equal to info.width, followed by (1, 1).\n# The values inside are application dependent, but frequently, \n# 0 represents unoccupied, 1 represents definitely occupied, and\n# -1 represents unknown. \nint8[] data\n\n================================================================================\nMSG: nav_msgs/MapMetaData\n# This hold basic information about the characteristics of the OccupancyGrid\n\n# The time at which the map was loaded\nbuiltin_interfaces/Time map_load_time\n\n# The map resolution [m/cell]\nfloat32 resolution\n\n# Map width [cells]\nuint32 width\n\n# Map height [cells]\nuint32 height\n\n# The origin of the map [m, m, rad].  This is the real-world pose of the\n# bottom left corner of cell (0,0) in the map.\ngeometry_msgs/Pose origin\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n",
         "# This represents a 2-D grid map, in which each cell has an associated cost\n\nstd_msgs/Header header\n\n# MetaData for the map\nCostmapMetaData metadata\n\n# The cost data, in row-major order, starting with (0,0).\nuint8[] data\n\n================================================================================\nMSG: nav2_msgs/CostmapMetaData\n# This hold basic information about the characteristics of the Costmap\n\n# The time at which the static map was loaded\nbuiltin_interfaces/Time map_load_time\n\n# The time of the last update to costmap\nbuiltin_interfaces/Time update_time\n\n# The corresponding layer name\nstring layer\n\n# The map resolution [m/cell]\nfloat32 resolution\n\n# Number of cells in the horizontal direction\nuint32 size_x\n\n# Number of cells in the vertical direction\nuint32 size_y\n\n# The origin of the costmap [m, m, rad].\n# This is the real-world pose of the cell (0,0) in the map.\ngeometry_msgs/Pose origin\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n",
         "# Update msg for Costmap containing the modified part of Costmap\nstd_msgs/Header header\n\nuint32 x\nuint32 y\n\nuint32 size_x\nuint32 size_y\n\n# The cost data, in row-major order, starting with (x,y) from 0-255 in Costmap format rather than OccupancyGrid 0-100.\nuint8[] data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "std_msgs/Header header\nint32 x\nint32 y\nuint32 width\nuint32 height\nint8[] data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This represents a 2-D grid map\nstd_msgs/Header header\n\n# MetaData for the map\nMapMetaData info\n\n# The map data, in row-major order, starting with (0,0). \n# Cell (1, 0) will be listed second, representing the next cell in the x direction. \n# Cell (0, 1) will be at the index equal to info.width, followed by (1, 1).\n# The values inside are application dependent, but frequently, \n# 0 represents unoccupied, 1 represents definitely occupied, and\n# -1 represents unknown. \nint8[] data\n\n================================================================================\nMSG: nav_msgs/MapMetaData\n# This hold basic information about the characteristics of the OccupancyGrid\n\n# The time at which the map was loaded\nbuiltin_interfaces/Time map_load_time\n\n# The map resolution [m/cell]\nfloat32 resolution\n\n# Map width [cells]\nuint32 width\n\n# Map height [cells]\nuint32 height\n\n# The origin of the map [m, m, rad].  This is the real-world pose of the\n# bottom left corner of cell (0,0) in the map.\ngeometry_msgs/Pose origin\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n",
         "# This represents a 2-D grid map, in which each cell has an associated cost\n\nstd_msgs/Header header\n\n# MetaData for the map\nCostmapMetaData metadata\n\n# The cost data, in row-major order, starting with (0,0).\nuint8[] data\n\n================================================================================\nMSG: nav2_msgs/CostmapMetaData\n# This hold basic information about the characteristics of the Costmap\n\n# The time at which the static map was loaded\nbuiltin_interfaces/Time map_load_time\n\n# The time of the last update to costmap\nbuiltin_interfaces/Time update_time\n\n# The corresponding layer name\nstring layer\n\n# The map resolution [m/cell]\nfloat32 resolution\n\n# Number of cells in the horizontal direction\nuint32 size_x\n\n# Number of cells in the vertical direction\nuint32 size_y\n\n# The origin of the costmap [m, m, rad].\n# This is the real-world pose of the cell (0,0) in the map.\ngeometry_msgs/Pose origin\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n",
         "# Update msg for Costmap containing the modified part of Costmap\nstd_msgs/Header header\n\nuint32 x\nuint32 y\n\nuint32 size_x\nuint32 size_y\n\n# The cost data, in row-major order, starting with (x,y) from 0-255 in Costmap format rather than OccupancyGrid 0-100.\nuint8[] data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "std_msgs/Header header\nint32 x\nint32 y\nuint32 width\nuint32 height\nint8[] data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This message holds a collection of N-dimensional points, which may\n# contain additional information such as normals, intensity, etc. The\n# point data is stored as a binary blob, its layout described by the\n# contents of the \"fields\" array.\n#\n# The point cloud data may be organized 2d (image-like) or 1d (unordered).\n# Point clouds organized as 2d images may be produced by camera depth sensors\n# such as stereo or time-of-flight.\n\n# Time of sensor data acquisition, and the coordinate frame ID (for 3d points).\nstd_msgs/Header header\n\n# 2D structure of the point cloud. If the cloud is unordered, height is\n# 1 and width is the length of the point cloud.\nuint32 height\nuint32 width\n\n# Describes the channels and their layout in the binary data blob.\nPointField[] fields\n\nbool    is_bigendian # Is this data bigendian?\nuint32  point_step   # Length of a point in bytes\nuint32  row_step     # Length of a row in bytes\nuint8[] data         # Actual point data, size is (row_step*height)\n\nbool is_dense        # True if there are no invalid points\n\n================================================================================\nMSG: sensor_msgs/PointField\n# This message holds the description of one point entry in the\n# PointCloud2 message format.\nuint8 INT8    = 1\nuint8 UINT8   = 2\nuint8 INT16   = 3\nuint8 UINT16  = 4\nuint8 INT32   = 5\nuint8 UINT32  = 6\nuint8 FLOAT32 = 7\nuint8 FLOAT64 = 8\n\n# Common PointField names are x, y, z, intensity, rgb, rgba\nstring name      # Name of field\nuint32 offset    # Offset from start of point struct\nuint8  datatype  # Datatype enumeration, see above\nuint32 count     # How many elements in the field\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# An array of poses that represents a Path for a robot to follow.\n\n# Indicates the frame_id of the path.\nstd_msgs/Header header\n\n# Array of poses to follow.\ngeometry_msgs/PoseStamped[] poses\n\n================================================================================\nMSG: geometry_msgs/PoseStamped\n# A Pose with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPose pose\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# failed to get full definition text for usr_msgs/msg/LocationMsg: //",
         "# Navigation Satellite fix for any Global Navigation Satellite System\n#\n# Specified using the WGS 84 reference ellipsoid\n\n# header.stamp specifies the ROS time for this measurement (the\n#        corresponding satellite time may be reported using the\n#        sensor_msgs/TimeReference message).\n#\n# header.frame_id is the frame of reference reported by the satellite\n#        receiver, usually the location of the antenna.  This is a\n#        Euclidean frame relative to the vehicle, not a reference\n#        ellipsoid.\nstd_msgs/Header header\n\n# Satellite fix status information.\nNavSatStatus status\n\n# Latitude [degrees]. Positive is north of equator; negative is south.\nfloat64 latitude\n\n# Longitude [degrees]. Positive is east of prime meridian; negative is west.\nfloat64 longitude\n\n# Altitude [m]. Positive is above the WGS 84 ellipsoid\n# (quiet NaN if no altitude is available).\nfloat64 altitude\n\n# Position covariance [m^2] defined relative to a tangential plane\n# through the reported position. The components are East, North, and\n# Up (ENU), in row-major order.\n#\n# Beware: this coordinate system exhibits singularities at the poles.\nfloat64[9] position_covariance\n\n# If the covariance of the fix is known, fill it in completely. If the\n# GPS receiver provides the variance of each measurement, put them\n# along the diagonal. If only Dilution of Precision is available,\n# estimate an approximate covariance from that.\n\nuint8 COVARIANCE_TYPE_UNKNOWN = 0\nuint8 COVARIANCE_TYPE_APPROXIMATED = 1\nuint8 COVARIANCE_TYPE_DIAGONAL_KNOWN = 2\nuint8 COVARIANCE_TYPE_KNOWN = 3\n\nuint8 position_covariance_type\n\n================================================================================\nMSG: sensor_msgs/NavSatStatus\n# Navigation Satellite fix status for any Global Navigation Satellite System.\n#\n# Whether to output an augmented fix is determined by both the fix\n# type and the last time differential corrections were received.  A\n# fix is valid when status >= STATUS_FIX.\n\nint8 STATUS_NO_FIX =  -1        # unable to fix position\nint8 STATUS_FIX =      0        # unaugmented fix\nint8 STATUS_SBAS_FIX = 1        # with satellite-based augmentation\nint8 STATUS_GBAS_FIX = 2        # with ground-based augmentation\n\nint8 status\n\n# Bits defining which Global Navigation Satellite System signals were\n# used by the receiver.\n\nuint16 SERVICE_GPS =     1\nuint16 SERVICE_GLONASS = 2\nuint16 SERVICE_COMPASS = 4      # includes BeiDou.\nuint16 SERVICE_GALILEO = 8\n\nuint16 service\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This represents a 2-D grid map\nstd_msgs/Header header\n\n# MetaData for the map\nMapMetaData info\n\n# The map data, in row-major order, starting with (0,0). \n# Cell (1, 0) will be listed second, representing the next cell in the x direction. \n# Cell (0, 1) will be at the index equal to info.width, followed by (1, 1).\n# The values inside are application dependent, but frequently, \n# 0 represents unoccupied, 1 represents definitely occupied, and\n# -1 represents unknown. \nint8[] data\n\n================================================================================\nMSG: nav_msgs/MapMetaData\n# This hold basic information about the characteristics of the OccupancyGrid\n\n# The time at which the map was loaded\nbuiltin_interfaces/Time map_load_time\n\n# The map resolution [m/cell]\nfloat32 resolution\n\n# Map width [cells]\nuint32 width\n\n# Map height [cells]\nuint32 height\n\n# The origin of the map [m, m, rad].  This is the real-world pose of the\n# bottom left corner of cell (0,0) in the map.\ngeometry_msgs/Pose origin\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n",
         "# Message that contains the closest Map Node Information\n# c2c_operable [bool]: Is the current location C2C operable?\n# inside_way [bool]: Is the bot inside the way with restrictions?\n# way_type [string]: Way_type, See WayMetadata message\n# gps_accuracy [float]: GPS estimated error\n# node_distance [float]: Distance to the closest node\n\nbool c2c_operable\nbool inside_way\nstring way_type\nfloat64 node_distance\nfloat64 gps_accuracy\n",
         "# The time point at which this event occurred.\nuint64 timestamp\n\n# The id and label of this transition event.\nTransition transition\n\n# The starting state from which this event transitioned.\nState start_state\n\n# The end state of this transition event.\nState goal_state\n\n================================================================================\nMSG: lifecycle_msgs/State\n# Primary state definitions as depicted in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# These are the primary states. State changes can only be requested when the\n# node is in one of these states.\n\n# Indicates state has not yet been set.\nuint8 PRIMARY_STATE_UNKNOWN = 0\n\n# This is the life cycle state the node is in immediately after being\n# instantiated.\nuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\n# This state represents a node that is not currently performing any processing.\nuint8 PRIMARY_STATE_INACTIVE = 2\n\n# This is the main state of the node's life cycle. While in this state, the node\n# performs any processing, responds to service requests, reads and processes\n# data, produces output, etc.\nuint8 PRIMARY_STATE_ACTIVE = 3\n\n# The finalized state is the state in which the node ends immediately before\n# being destroyed.\nuint8 PRIMARY_STATE_FINALIZED = 4\n\n# Temporary intermediate states. When a transition is requested, the node\n# changes its state into one of these states.\n\n# In this transition state the node's onConfigure callback will be called to\n# allow the node to load its configuration and conduct any required setup.\nuint8 TRANSITION_STATE_CONFIGURING = 10\n\n# In this transition state the node's callback onCleanup will be called to clear\n# all state and return the node to a functionally equivalent state as when\n# first created.\nuint8 TRANSITION_STATE_CLEANINGUP = 11\n\n# In this transition state the callback onShutdown will be executed to do any\n# cleanup necessary before destruction.\nuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\n# In this transition state the callback onActivate will be executed to do any\n# final preparations to start executing.\nuint8 TRANSITION_STATE_ACTIVATING = 13\n\n# In this transition state the callback onDeactivate will be executed to do any\n# cleanup to start executing, and reverse the onActivate changes.\nuint8 TRANSITION_STATE_DEACTIVATING = 14\n\n# This transition state is where any error may be cleaned up.\nuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\n# The state id value from the above definitions.\nuint8 id\n\n# A text label of the state.\nstring label\n\n================================================================================\nMSG: lifecycle_msgs/Transition\n# Default values for transitions as described in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# Reserved [0-9], publicly available transitions.\n# When a node is in one of these primary states, these transitions can be\n# invoked.\n\n# This transition will instantiate the node, but will not run any code beyond\n# the constructor.\nuint8 TRANSITION_CREATE = 0\n\n# The node's onConfigure callback will be called to allow the node to load its\n# configuration and conduct any required setup.\nuint8 TRANSITION_CONFIGURE = 1\n\n# The node's callback onCleanup will be called in this transition to allow the\n# node to load its configuration and conduct any required setup.\nuint8 TRANSITION_CLEANUP = 2\n\n# The node's callback onActivate will be executed to do any final preparations\n# to start executing.\nuint8 TRANSITION_ACTIVATE = 3\n\n# The node's callback onDeactivate will be executed to do any cleanup to start\n# executing, and reverse the onActivate changes.\nuint8 TRANSITION_DEACTIVATE = 4\n\n# This signals shutdown during an unconfigured state, the node's callback\n# onShutdown will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\n# This signals shutdown during an inactive state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\n# This signals shutdown during an active state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\n# This transition will simply cause the deallocation of the node.\nuint8 TRANSITION_DESTROY = 8\n\n# Reserved [10-69], private transitions\n# These transitions are not publicly available and cannot be invoked by a user.\n# The following transitions are implicitly invoked based on the callback\n# feedback of the intermediate transition states.\nuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\nuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\nuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\nuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\nuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\nuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\nuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\nuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\nuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\nuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\nuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\nuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\nuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\nuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\nuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\nuint8 TRANSITION_ON_ERROR_SUCCESS = 60\nuint8 TRANSITION_ON_ERROR_FAILURE = 61\nuint8 TRANSITION_ON_ERROR_ERROR = 62\n\n# Reserved [90-99]. Transition callback success values.\n# These return values ought to be set as a return value for each callback.\n# Depending on which return value, the transition will be executed correctly or\n# fallback/error callbacks will be triggered.\n\n# The transition callback successfully performed its required functionality.\nuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\n# The transition callback failed to perform its required functionality.\nuint8 TRANSITION_CALLBACK_FAILURE = 98\n\n# The transition callback encountered an error that requires special cleanup, if\n# possible.\nuint8 TRANSITION_CALLBACK_ERROR = 99\n\n##\n## Fields\n##\n\n# The transition id from above definitions.\nuint8 id\n\n# A text label of the transition.\nstring label\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nstring data\n",
         "# The time point at which this event occurred.\nuint64 timestamp\n\n# The id and label of this transition event.\nTransition transition\n\n# The starting state from which this event transitioned.\nState start_state\n\n# The end state of this transition event.\nState goal_state\n\n================================================================================\nMSG: lifecycle_msgs/State\n# Primary state definitions as depicted in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# These are the primary states. State changes can only be requested when the\n# node is in one of these states.\n\n# Indicates state has not yet been set.\nuint8 PRIMARY_STATE_UNKNOWN = 0\n\n# This is the life cycle state the node is in immediately after being\n# instantiated.\nuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\n# This state represents a node that is not currently performing any processing.\nuint8 PRIMARY_STATE_INACTIVE = 2\n\n# This is the main state of the node's life cycle. While in this state, the node\n# performs any processing, responds to service requests, reads and processes\n# data, produces output, etc.\nuint8 PRIMARY_STATE_ACTIVE = 3\n\n# The finalized state is the state in which the node ends immediately before\n# being destroyed.\nuint8 PRIMARY_STATE_FINALIZED = 4\n\n# Temporary intermediate states. When a transition is requested, the node\n# changes its state into one of these states.\n\n# In this transition state the node's onConfigure callback will be called to\n# allow the node to load its configuration and conduct any required setup.\nuint8 TRANSITION_STATE_CONFIGURING = 10\n\n# In this transition state the node's callback onCleanup will be called to clear\n# all state and return the node to a functionally equivalent state as when\n# first created.\nuint8 TRANSITION_STATE_CLEANINGUP = 11\n\n# In this transition state the callback onShutdown will be executed to do any\n# cleanup necessary before destruction.\nuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\n# In this transition state the callback onActivate will be executed to do any\n# final preparations to start executing.\nuint8 TRANSITION_STATE_ACTIVATING = 13\n\n# In this transition state the callback onDeactivate will be executed to do any\n# cleanup to start executing, and reverse the onActivate changes.\nuint8 TRANSITION_STATE_DEACTIVATING = 14\n\n# This transition state is where any error may be cleaned up.\nuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\n# The state id value from the above definitions.\nuint8 id\n\n# A text label of the state.\nstring label\n\n================================================================================\nMSG: lifecycle_msgs/Transition\n# Default values for transitions as described in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# Reserved [0-9], publicly available transitions.\n# When a node is in one of these primary states, these transitions can be\n# invoked.\n\n# This transition will instantiate the node, but will not run any code beyond\n# the constructor.\nuint8 TRANSITION_CREATE = 0\n\n# The node's onConfigure callback will be called to allow the node to load its\n# configuration and conduct any required setup.\nuint8 TRANSITION_CONFIGURE = 1\n\n# The node's callback onCleanup will be called in this transition to allow the\n# node to load its configuration and conduct any required setup.\nuint8 TRANSITION_CLEANUP = 2\n\n# The node's callback onActivate will be executed to do any final preparations\n# to start executing.\nuint8 TRANSITION_ACTIVATE = 3\n\n# The node's callback onDeactivate will be executed to do any cleanup to start\n# executing, and reverse the onActivate changes.\nuint8 TRANSITION_DEACTIVATE = 4\n\n# This signals shutdown during an unconfigured state, the node's callback\n# onShutdown will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\n# This signals shutdown during an inactive state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\n# This signals shutdown during an active state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\n# This transition will simply cause the deallocation of the node.\nuint8 TRANSITION_DESTROY = 8\n\n# Reserved [10-69], private transitions\n# These transitions are not publicly available and cannot be invoked by a user.\n# The following transitions are implicitly invoked based on the callback\n# feedback of the intermediate transition states.\nuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\nuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\nuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\nuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\nuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\nuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\nuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\nuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\nuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\nuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\nuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\nuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\nuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\nuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\nuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\nuint8 TRANSITION_ON_ERROR_SUCCESS = 60\nuint8 TRANSITION_ON_ERROR_FAILURE = 61\nuint8 TRANSITION_ON_ERROR_ERROR = 62\n\n# Reserved [90-99]. Transition callback success values.\n# These return values ought to be set as a return value for each callback.\n# Depending on which return value, the transition will be executed correctly or\n# fallback/error callbacks will be triggered.\n\n# The transition callback successfully performed its required functionality.\nuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\n# The transition callback failed to perform its required functionality.\nuint8 TRANSITION_CALLBACK_FAILURE = 98\n\n# The transition callback encountered an error that requires special cleanup, if\n# possible.\nuint8 TRANSITION_CALLBACK_ERROR = 99\n\n##\n## Fields\n##\n\n# The transition id from above definitions.\nuint8 id\n\n# A text label of the transition.\nstring label\n",
         "# MON-HW (0x0A 0x09)\n# Hardware Status\n#\n# Status of different aspect of the hardware, such as Antenna, PIO/Peripheral\n# Pins, Noise Level, Automatic Gain Control (AGC)\n#\n# WARNING: this message is a different length than the MonHW message for\n# firmware version 6\n\nuint8 CLASS_ID = 10\nuint8 MESSAGE_ID = 9\n\nuint32 pin_sel                 # Mask of Pins Set as Peripheral/PIO\nuint32 pin_bank                # Mask of Pins Set as Bank A/B\nuint32 pin_dir                 # Mask of Pins Set as Input/Output\nuint32 pin_val                 # Mask of Pins Value Low/High\nuint16 noise_per_ms             # Noise Level as measured by the GPS Core\nuint16 agc_cnt                 # AGC Monitor (counts SIGHI xor SIGLO,\n                              # range 0 to 8191)\nuint8 a_status                 # Status of the Antenna Supervisor State Machine\nuint8 A_STATUS_INIT = 0\nuint8 A_STATUS_UNKNOWN = 1\nuint8 A_STATUS_OK = 2\nuint8 A_STATUS_SHORT = 3\nuint8 A_STATUS_OPEN = 4\n\nuint8 a_power                  # Current PowerStatus of Antenna\nuint8 A_POWER_OFF = 0\nuint8 A_POWER_ON = 1\nuint8 A_POWER_UNKNOWN = 2\n\nuint8 flags                   # Flags:\nuint8 FLAGS_RTC_CALIB = 1            # RTC is calibrated\nuint8 FLAGS_SAFE_BOOT =  2           # Safe boot mode (0 = inactive, 1 = active)\nuint8 FLAGS_JAMMING_STATE_MASK = 12  # output from Jamming/Interference Monitor:\nuint8 JAMMING_STATE_UNKNOWN_OR_DISABLED = 0   # unknown or feature disabled\nuint8 JAMMING_STATE_OK = 4                    # ok - no significant jamming\nuint8 JAMMING_STATE_WARNING = 8               # interference visible but fix OK\nuint8 JAMMING_STATE_CRITICAL = 12             # interference visible and no fix\nuint8 FLAGS_XTAL_ABSENT =  16        # RTC XTAL is absent\n                                     # (not supported in protocol versions < 18)\nuint8 reserved0               # Reserved\nuint32 used_mask               # Mask of Pins that are used by the Virtual Pin\n                              # Manager\nuint8[17] vp                  # Array of Pin Mappings for each of the 17\n                              # Physical Pins\nuint8 jam_ind                  # CW Jamming indicator, scaled:\nuint8 JAM_IND_NONE = 0          # No CW Jamming\nuint8 JAM_IND_STRONG = 255      # Strong CW Jamming\n\nuint8[2] reserved1            # Reserved\n\nuint32 pin_irq                 # Mask of Pins Value using the PIO Irq\nuint32 pull_h                  # Mask of Pins Value using the PIO Pull High\n                              # Resistor\nuint32 pull_l                  # Mask of Pins Value using the PIO Pull Low\n                              # Resistor\n",
         "# A twist with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nTwist twist\n\n================================================================================\nMSG: geometry_msgs/Twist\n# This expresses velocity in free space broken into its linear and angular parts.\n\nVector3  linear\nVector3  angular\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space.\n\n# This is semantically different than a point.\n# A vector is always anchored at the origin.\n# When a transform is applied to a vector, only the rotational component is applied.\n\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nfloat32 data\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nfloat32 data\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "# A Pose with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPose pose\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nfloat32 data\n",
         "# A Pose with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPose pose\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# failed to get full definition text for usr_msgs/msg/Coordinates: //",
         "\n### Message containing the Errors of each controller\n# yaw: yaw error [rad]\n# steering: steering error [m/s]\n# throttle: throttle error [rad/s]\nfloat32 yaw\nfloat32 steering\nfloat32 throttle",
         "# This expresses velocity in free space broken into its linear and angular parts.\n\nVector3  linear\nVector3  angular\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space.\n\n# This is semantically different than a point.\n# A vector is always anchored at the origin.\n# When a transform is applied to a vector, only the rotational component is applied.\n\nfloat64 x\nfloat64 y\nfloat64 z\n",
         "\n### Message containing the Errors of each controller\n# yaw: yaw error [rad]\n# steering: steering error [m/s]\n# throttle: throttle error [rad/s]\nfloat32 yaw\nfloat32 steering\nfloat32 throttle",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "# A twist with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nTwist twist\n\n================================================================================\nMSG: geometry_msgs/Twist\n# This expresses velocity in free space broken into its linear and angular parts.\n\nVector3  linear\nVector3  angular\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space.\n\n# This is semantically different than a point.\n# A vector is always anchored at the origin.\n# When a transform is applied to a vector, only the rotational component is applied.\n\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# A Pose with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPose pose\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "# Deprecated as of Foxy and will potentially be removed in any following release.\n# Please use the full 3D pose.\n\n# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.\n\n# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.# This expresses a position and orientation on a 2D manifold.\n\nfloat64 x\nfloat64 y\nfloat64 theta\n",
         "# An array of poses that represents a Path for a robot to follow.\n\n# Indicates the frame_id of the path.\nstd_msgs/Header header\n\n# Array of poses to follow.\ngeometry_msgs/PoseStamped[] poses\n\n================================================================================\nMSG: geometry_msgs/PoseStamped\n# A Pose with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPose pose\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nstring data\n",
         "# message to store the way metadata\n\n# Way Types\n# The different types of ways that a map way can represent.\nstring WAY_TYPE_CROSSROAD = \"crossroad\"\nstring WAY_TYPE_SIDEWALK = \"sidewalk\"\nstring WAY_TYPE_SQUARE = \"square\"\nstring WAY_TYPE_DRIVEWAY = \"driveway\"\nstring WAY_TYPE_HALLWAY = \"hallway\"\nstring WAY_TYPE_OTHER = \"other\"\n\n# Way operability\n# The different levels of operability that a way can have, according to different stacks.\nstring WAY_OPERABILITY_OPERABLE = \"operable\"\nstring WAY_OPERABILITY_NO_OPERABLE = \"no_operable\"\nstring WAY_OPERABILITY_UNKNOWN = \"unknown\"\n\n# Way risk\n# The different levels of risk associated with traversing a way.\nstring WAY_RISK_VERY_HIGH = \"very-high\"\nstring WAY_RISK_HIGH = \"high\"\nstring WAY_RISK_MEDIUM = \"medium\"\nstring WAY_RISK_LOW = \"low\"\nstring WAY_RISK_VERY_LOW = \"very-low\"\nstring WAY_RISK_NO_TRAVERSABLE = \"no-traversable\"\n\n# The type of way this map way represents.\nstring way_type\nstring way_sub_type\n\n# The operability of the way according to the navigation2 stack.\nstring nav2_operability\n\n# The operability of the way according to the c2c stack.\nstring c2c_operability\n\n# The risk level of the way.\nstring risk\n\n# The width of the sidewalk in meters, if applicable.\nfloat32 sidewalk_width -1.0\n\n# Whether the sidewalk allows vehicle traffic, if applicable.\nbool sidewalk_vehicle_traffic\n\n# Whether the sidewalk allows bicycle traffic, if applicable.\nbool sidewalk_bicycle_traffic\n\n# Whether the way should be traversed using semantic segmentation\nbool nav2_use_segmentation 1\n\n# Whether the way should be traversed using the stereo camera\nbool nav2_use_stereo 1\n\n# Whether the way should be traversed using the 2D lidar\nbool nav2_use_lidar 1\n\n# Whether the way should be traversed using the tf mini lidars\nbool nav2_use_mini_lidars 1\n\n# Whether the way should be traversed using the nav2 static map\nbool nav2_use_static_map 1\n\n# The category of velocity allowed, if applicable.\nstring nav2_max_velocity",
         "# failed to get full definition text for usr_msgs/msg/Nav2FeedBack: //",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nstring data\n",
         "# This represents a Polygon with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPolygon polygon\n\n================================================================================\nMSG: geometry_msgs/Polygon\n# A specification of a polygon where the first and last points are assumed to be connected\n\nPoint32[] points\n\n================================================================================\nMSG: geometry_msgs/Point32\n# This contains the position of a point in free space(with 32 bits of precision).\n# It is recommended to use Point wherever possible instead of Point32.\n#\n# This recommendation is to promote interoperability.\n#\n# This message is designed to take up less space when sending\n# lots of points at once, as in the case of a PointCloud.\n\nfloat32 x\nfloat32 y\nfloat32 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This represents a Polygon with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPolygon polygon\n\n================================================================================\nMSG: geometry_msgs/Polygon\n# A specification of a polygon where the first and last points are assumed to be connected\n\nPoint32[] points\n\n================================================================================\nMSG: geometry_msgs/Point32\n# This contains the position of a point in free space(with 32 bits of precision).\n# It is recommended to use Point wherever possible instead of Point32.\n#\n# This recommendation is to promote interoperability.\n#\n# This message is designed to take up less space when sending\n# lots of points at once, as in the case of a PointCloud.\n\nfloat32 x\nfloat32 y\nfloat32 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This represents a Polygon with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPolygon polygon\n\n================================================================================\nMSG: geometry_msgs/Polygon\n# A specification of a polygon where the first and last points are assumed to be connected\n\nPoint32[] points\n\n================================================================================\nMSG: geometry_msgs/Point32\n# This contains the position of a point in free space(with 32 bits of precision).\n# It is recommended to use Point wherever possible instead of Point32.\n#\n# This recommendation is to promote interoperability.\n#\n# This message is designed to take up less space when sending\n# lots of points at once, as in the case of a PointCloud.\n\nfloat32 x\nfloat32 y\nfloat32 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This represents a Polygon with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPolygon polygon\n\n================================================================================\nMSG: geometry_msgs/Polygon\n# A specification of a polygon where the first and last points are assumed to be connected\n\nPoint32[] points\n\n================================================================================\nMSG: geometry_msgs/Point32\n# This contains the position of a point in free space(with 32 bits of precision).\n# It is recommended to use Point wherever possible instead of Point32.\n#\n# This recommendation is to promote interoperability.\n#\n# This message is designed to take up less space when sending\n# lots of points at once, as in the case of a PointCloud.\n\nfloat32 x\nfloat32 y\nfloat32 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "# This expresses velocity in free space broken into its linear and angular parts.\n\nVector3  linear\nVector3  angular\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space.\n\n# This is semantically different than a point.\n# A vector is always anchored at the origin.\n# When a transform is applied to a vector, only the rotational component is applied.\n\nfloat64 x\nfloat64 y\nfloat64 z\n",
         "# This represents a Polygon with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPolygon polygon\n\n================================================================================\nMSG: geometry_msgs/Polygon\n# A specification of a polygon where the first and last points are assumed to be connected\n\nPoint32[] points\n\n================================================================================\nMSG: geometry_msgs/Point32\n# This contains the position of a point in free space(with 32 bits of precision).\n# It is recommended to use Point wherever possible instead of Point32.\n#\n# This recommendation is to promote interoperability.\n#\n# This message is designed to take up less space when sending\n# lots of points at once, as in the case of a PointCloud.\n\nfloat32 x\nfloat32 y\nfloat32 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This represents a Polygon with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPolygon polygon\n\n================================================================================\nMSG: geometry_msgs/Polygon\n# A specification of a polygon where the first and last points are assumed to be connected\n\nPoint32[] points\n\n================================================================================\nMSG: geometry_msgs/Point32\n# This contains the position of a point in free space(with 32 bits of precision).\n# It is recommended to use Point wherever possible instead of Point32.\n#\n# This recommendation is to promote interoperability.\n#\n# This message is designed to take up less space when sending\n# lots of points at once, as in the case of a PointCloud.\n\nfloat32 x\nfloat32 y\nfloat32 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This represents a Polygon with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPolygon polygon\n\n================================================================================\nMSG: geometry_msgs/Polygon\n# A specification of a polygon where the first and last points are assumed to be connected\n\nPoint32[] points\n\n================================================================================\nMSG: geometry_msgs/Point32\n# This contains the position of a point in free space(with 32 bits of precision).\n# It is recommended to use Point wherever possible instead of Point32.\n#\n# This recommendation is to promote interoperability.\n#\n# This message is designed to take up less space when sending\n# lots of points at once, as in the case of a PointCloud.\n\nfloat32 x\nfloat32 y\nfloat32 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This represents a Polygon with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPolygon polygon\n\n================================================================================\nMSG: geometry_msgs/Polygon\n# A specification of a polygon where the first and last points are assumed to be connected\n\nPoint32[] points\n\n================================================================================\nMSG: geometry_msgs/Point32\n# This contains the position of a point in free space(with 32 bits of precision).\n# It is recommended to use Point wherever possible instead of Point32.\n#\n# This recommendation is to promote interoperability.\n#\n# This message is designed to take up less space when sending\n# lots of points at once, as in the case of a PointCloud.\n\nfloat32 x\nfloat32 y\nfloat32 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This expresses velocity in free space broken into its linear and angular parts.\n\nVector3  linear\nVector3  angular\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space.\n\n# This is semantically different than a point.\n# A vector is always anchored at the origin.\n# When a transform is applied to a vector, only the rotational component is applied.\n\nfloat64 x\nfloat64 y\nfloat64 z\n",
         "# failed to get full definition text for usr_msgs/msg/Nav2GeoPath: //",
         "# failed to get full definition text for usr_msgs/msg/Nav2ReferencePath: //",
         "# A Pose with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPose pose\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# failed to get full definition text for usr_msgs/msg/Nav2RouteStats: //",
         "# An array of poses that represents a Path for a robot to follow.\n\n# Indicates the frame_id of the path.\nstd_msgs/Header header\n\n# Array of poses to follow.\ngeometry_msgs/PoseStamped[] poses\n\n================================================================================\nMSG: geometry_msgs/PoseStamped\n# A Pose with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPose pose\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This expresses velocity in free space broken into its linear and angular parts.\n\nVector3  linear\nVector3  angular\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space.\n\n# This is semantically different than a point.\n# A vector is always anchored at the origin.\n# When a transform is applied to a vector, only the rotational component is applied.\n\nfloat64 x\nfloat64 y\nfloat64 z\n",
         "# failed to get full definition text for usr_msgs/msg/Nav2StartupCheck: //",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nstring data\n",
         "# This represents a Polygon with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPolygon polygon\n\n================================================================================\nMSG: geometry_msgs/Polygon\n# A specification of a polygon where the first and last points are assumed to be connected\n\nPoint32[] points\n\n================================================================================\nMSG: geometry_msgs/Point32\n# This contains the position of a point in free space(with 32 bits of precision).\n# It is recommended to use Point wherever possible instead of Point32.\n#\n# This recommendation is to promote interoperability.\n#\n# This message is designed to take up less space when sending\n# lots of points at once, as in the case of a PointCloud.\n\nfloat32 x\nfloat32 y\nfloat32 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This represents a Polygon with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPolygon polygon\n\n================================================================================\nMSG: geometry_msgs/Polygon\n# A specification of a polygon where the first and last points are assumed to be connected\n\nPoint32[] points\n\n================================================================================\nMSG: geometry_msgs/Point32\n# This contains the position of a point in free space(with 32 bits of precision).\n# It is recommended to use Point wherever possible instead of Point32.\n#\n# This recommendation is to promote interoperability.\n#\n# This message is designed to take up less space when sending\n# lots of points at once, as in the case of a PointCloud.\n\nfloat32 x\nfloat32 y\nfloat32 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This represents a Polygon with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPolygon polygon\n\n================================================================================\nMSG: geometry_msgs/Polygon\n# A specification of a polygon where the first and last points are assumed to be connected\n\nPoint32[] points\n\n================================================================================\nMSG: geometry_msgs/Point32\n# This contains the position of a point in free space(with 32 bits of precision).\n# It is recommended to use Point wherever possible instead of Point32.\n#\n# This recommendation is to promote interoperability.\n#\n# This message is designed to take up less space when sending\n# lots of points at once, as in the case of a PointCloud.\n\nfloat32 x\nfloat32 y\nfloat32 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This represents a Polygon with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPolygon polygon\n\n================================================================================\nMSG: geometry_msgs/Polygon\n# A specification of a polygon where the first and last points are assumed to be connected\n\nPoint32[] points\n\n================================================================================\nMSG: geometry_msgs/Point32\n# This contains the position of a point in free space(with 32 bits of precision).\n# It is recommended to use Point wherever possible instead of Point32.\n#\n# This recommendation is to promote interoperability.\n#\n# This message is designed to take up less space when sending\n# lots of points at once, as in the case of a PointCloud.\n\nfloat32 x\nfloat32 y\nfloat32 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# A twist with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nTwist twist\n\n================================================================================\nMSG: geometry_msgs/Twist\n# This expresses velocity in free space broken into its linear and angular parts.\n\nVector3  linear\nVector3  angular\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space.\n\n# This is semantically different than a point.\n# A vector is always anchored at the origin.\n# When a transform is applied to a vector, only the rotational component is applied.\n\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This represents a Polygon with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPolygon polygon\n\n================================================================================\nMSG: geometry_msgs/Polygon\n# A specification of a polygon where the first and last points are assumed to be connected\n\nPoint32[] points\n\n================================================================================\nMSG: geometry_msgs/Point32\n# This contains the position of a point in free space(with 32 bits of precision).\n# It is recommended to use Point wherever possible instead of Point32.\n#\n# This recommendation is to promote interoperability.\n#\n# This message is designed to take up less space when sending\n# lots of points at once, as in the case of a PointCloud.\n\nfloat32 x\nfloat32 y\nfloat32 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This represents a Polygon with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPolygon polygon\n\n================================================================================\nMSG: geometry_msgs/Polygon\n# A specification of a polygon where the first and last points are assumed to be connected\n\nPoint32[] points\n\n================================================================================\nMSG: geometry_msgs/Point32\n# This contains the position of a point in free space(with 32 bits of precision).\n# It is recommended to use Point wherever possible instead of Point32.\n#\n# This recommendation is to promote interoperability.\n#\n# This message is designed to take up less space when sending\n# lots of points at once, as in the case of a PointCloud.\n\nfloat32 x\nfloat32 y\nfloat32 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This represents a Polygon with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPolygon polygon\n\n================================================================================\nMSG: geometry_msgs/Polygon\n# A specification of a polygon where the first and last points are assumed to be connected\n\nPoint32[] points\n\n================================================================================\nMSG: geometry_msgs/Point32\n# This contains the position of a point in free space(with 32 bits of precision).\n# It is recommended to use Point wherever possible instead of Point32.\n#\n# This recommendation is to promote interoperability.\n#\n# This message is designed to take up less space when sending\n# lots of points at once, as in the case of a PointCloud.\n\nfloat32 x\nfloat32 y\nfloat32 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This represents a Polygon with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPolygon polygon\n\n================================================================================\nMSG: geometry_msgs/Polygon\n# A specification of a polygon where the first and last points are assumed to be connected\n\nPoint32[] points\n\n================================================================================\nMSG: geometry_msgs/Point32\n# This contains the position of a point in free space(with 32 bits of precision).\n# It is recommended to use Point wherever possible instead of Point32.\n#\n# This recommendation is to promote interoperability.\n#\n# This message is designed to take up less space when sending\n# lots of points at once, as in the case of a PointCloud.\n\nfloat32 x\nfloat32 y\nfloat32 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "# NAV-CLOCK (0x01 0x22)\n# Clock Solution\n#\n\nuint8 CLASS_ID = 1\nuint8 MESSAGE_ID = 34\n\nuint32 i_tow             # GPS Millisecond Time of week [ms]\n\nint32 clk_b              # Clock bias in nanoseconds [ns]\nint32 clk_d              # Clock drift in nanoseconds per second [ns/s]\nuint32 t_acc             # Time Accuracy Estimate [ns]\nuint32 f_acc             # Frequency Accuracy Estimate [ps/s]\n",
         "# NAV-COV (0x01 0x36)\n# Covariance matrices for position and velocity solutions\n#\n\nuint8 CLASS_ID = 1\nuint8 MESSAGE_ID = 54\n\nuint32 i_tow             # GPS Millisecond time of week [ms]\n\nuint8 version            # Message version (0x00 for this version)\nuint8 pos_cov_valid      # Position covariance matrix validity flag\nuint8 vel_cov_valid      # Velocity covariance matrix validity flag\nuint8[9] reserved_0      # Reserved\n\nfloat32 pos_cov_nn       # Position covariance matrix value p_NN [m^2]\nfloat32 pos_cov_ne       # Position covariance matrix value p_NE [m^2]\nfloat32 pos_cov_nd       # Position covariance matrix value p_ND [m^2]\nfloat32 pos_cov_ee       # Position covariance matrix value p_EE [m^2]\nfloat32 pos_cov_ed       # Position covariance matrix value p_ED [m^2]\nfloat32 pos_cov_dd       # Position covariance matrix value p_DD [m^2]\n\n\nfloat32 vel_cov_nn       # Velocity covariance matrix value v_NN [m^2/s^2]\nfloat32 vel_cov_ne       # Velocity covariance matrix value v_NE [m^2/s^2]\nfloat32 vel_cov_nd       # Velocity covariance matrix value v_ND [m^2/s^2]\nfloat32 vel_cov_ee       # Velocity covariance matrix value v_EE [m^2/s^2]\nfloat32 vel_cov_ed       # Velocity covariance matrix value v_ED [m^2/s^2]\nfloat32 vel_cov_dd       # Velocity covariance matrix value v_DD [m^2/s^2]\n",
         "# This is a message to hold data from an IMU (Inertial Measurement Unit)\n#\n# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec\n#\n# If the covariance of the measurement is known, it should be filled in (if all you know is the\n# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)\n# A covariance matrix of all zeros will be interpreted as \"covariance unknown\", and to use the\n# data a covariance will have to be assumed or gotten from some other source\n#\n# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an\n# orientation estimate), please set element 0 of the associated covariance matrix to -1\n# If you are interpreting this message, please check for a value of -1 in the first element of each\n# covariance matrix, and disregard the associated estimate.\n\nstd_msgs/Header header\n\ngeometry_msgs/Quaternion orientation\nfloat64[9] orientation_covariance # Row major about x, y, z axes\n\ngeometry_msgs/Vector3 angular_velocity\nfloat64[9] angular_velocity_covariance # Row major about x, y, z axes\n\ngeometry_msgs/Vector3 linear_acceleration\nfloat64[9] linear_acceleration_covariance # Row major x, y z\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space.\n\n# This is semantically different than a point.\n# A vector is always anchored at the origin.\n# When a transform is applied to a vector, only the rotational component is applied.\n\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# NAV-PVT (0x01 0x07)\n# Navigation Position Velocity Time Solution\n#\n# Note that during a leap second there may be more (or less) than 60 seconds in\n# a minute; see the description of leap seconds for details.\n#\n# This message combines Position, velocity and time solution in LLH,\n# including accuracy figures\n#\n# WARNING: For firmware version 7, this message is a different length.\n#\n\nuint8 CLASS_ID = 1\nuint8 MESSAGE_ID = 7\n\nuint32 i_tow            # GPS Millisecond time of week [ms]\nuint16 year             # Year (UTC)\nuint8 month             # Month, range 1..12 (UTC)\nuint8 day               # Day of month, range 1..31 (UTC)\nuint8 hour              # Hour of day, range 0..23 (UTC)\nuint8 min               # Minute of hour, range 0..59 (UTC)\nuint8 sec               # Seconds of minute, range 0..60 (UTC)\n\nuint8 valid             # Validity flags\nuint8 VALID_DATE = 1            # Valid UTC Date\nuint8 VALID_TIME = 2            # Valid\nuint8 VALID_FULLY_RESOLVED = 4  # UTC time of day has been fully resolved\n                                # (no seconds uncertainty)\nuint8 VALID_MAG = 8             # Valid Magnetic Declination\n\nuint32 t_acc            # time accuracy estimate [ns] (UTC)\nint32 nano              # fraction of a second [ns], range -1e9 .. 1e9 (UTC)\n\nuint8 fix_type           # GNSS fix Type, range 0..5\nuint8 FIX_TYPE_NO_FIX = 0\nuint8 FIX_TYPE_DEAD_RECKONING_ONLY = 1\nuint8 FIX_TYPE_2D = 2                           # Signal from only 3 SVs,\n                                                # constant altitude assumed\nuint8 FIX_TYPE_3D = 3\nuint8 FIX_TYPE_GNSS_DEAD_RECKONING_COMBINED = 4 # GNSS + Dead reckoning\nuint8 FIX_TYPE_TIME_ONLY = 5                    # Time only fix (High precision\n                                                # devices)\n\nuint8 flags             # Fix Status Flags\nuint8 FLAGS_GNSS_FIX_OK = 1          # i.e. within DOP & accuracy masks\nuint8 FLAGS_DIFF_SOLN = 2            # DGPS used\nuint8 FLAGS_PSM_MASK = 28            # Power Save Mode\nuint8 PSM_OFF = 0                       # PSM is off\nuint8 PSM_ENABLED = 4                   # Enabled (state before acquisition)\nuint8 PSM_ACQUIRED = 8                  # Acquisition\nuint8 PSM_TRACKING = 12                 # Tracking\nuint8 PSM_POWER_OPTIMIZED_TRACKING = 16 # Power Optimized Tracking\nuint8 PSM_INACTIVE = 20                 # Inactive\nuint8 FLAGS_HEAD_VEH_VALID = 32         # heading of vehicle is valid\nuint8 FLAGS_CARRIER_PHASE_MASK = 192 # Carrier Phase Range Solution Status\nuint8 CARRIER_PHASE_NO_SOLUTION = 0     # no carrier phase range solution\nuint8 CARRIER_PHASE_FLOAT = 64          # carrier phase float solution (no fixed\n                                        # integer measurements have been used to\n                                        # calculate the solution)\nuint8 CARRIER_PHASE_FIXED = 128         # fixed solution (>=1 fixed integer\n                                        # carrier phase range measurements have\n                                        # been used to calculate  the solution)\n\nuint8 flags2            # Additional Flags\nuint8 FLAGS2_CONFIRMED_AVAILABLE = 32   # information about UTC Date and Time of\n                                        # Day validity confirmation is available\nuint8 FLAGS2_CONFIRMED_DATE = 64        # UTC Date validity could be confirmed\nuint8 FLAGS2_CONFIRMED_TIME = 128       # UTC Time of Day could be confirmed\n\nuint8 num_sv             # Number of SVs used in Nav Solution\nint32 lon                # Longitude [deg / 1e-7]\nint32 lat                # Latitude [deg / 1e-7]\nint32 height             # Height above Ellipsoid [mm]\nint32 h_msl              # Height above mean sea level [mm]\nuint32 h_acc             # Horizontal Accuracy Estimate [mm]\nuint32 v_acc             # Vertical Accuracy Estimate [mm]\n\nint32 vel_n              # NED north velocity [mm/s]\nint32 vel_e              # NED east velocity [mm/s]\nint32 vel_d              # NED down velocity [mm/s]\nint32 g_speed            # Ground Speed (2-D) [mm/s]\nint32 heading            # Heading of motion 2-D [deg / 1e-5]\nuint32 s_acc             # Speed Accuracy Estimate [mm/s]\nuint32 head_acc          # Heading Accuracy Estimate (both motion & vehicle)\n                         # [deg / 1e-5]\n\nuint16 p_dop             # Position DOP [1 / 0.01]\nuint8[6] reserved1       # Reserved\n\nint32 head_veh           # Heading of vehicle (2-D) [deg / 1e-5]\nint16 mag_dec            # Magnetic declination [deg / 1e-2]\nuint16 mag_acc           # Magnetic declination accuracy [deg / 1e-2]\n",
         "# NAV-RELPOSNED (0x01 0x3C)\n# Relative Positioning Information in NED frame\n#\n# The NED frame is defined as the local topological system at the reference\n# station. The relative position vector components in this message, along with\n# their associated accuracies, are given in that local topological system\n# This message contains the relative position vector from the Reference Station\n# to the Rover, including accuracy figures, in the local topological system\n# defined at the reference station\n#\n# Supported on:\n#  - u-blox 9 from protocol version 27.11 (only with High Precision GNSS products)\n#\n\nuint8 CLASS_ID = 1\nuint8 MESSAGE_ID = 60\n\nuint8 version                     # Message version (0x00 for this version)\nuint8 reserved1                   # Reserved\nuint16 ref_station_id             # Reference Station ID. Must be in the range\n                                  # 0..4095\nuint32 i_tow                      # GPS time of week of the navigation epoch\n                                  # [ms]\n\nint32 rel_pos_n                   # North component of relative position vector\n                                  # [cm]\nint32 rel_pos_e                   # East component of relative position vector\n                                  # [cm]\nint32 rel_pos_d                   # Down component of relative position vector\n                                  # [cm]\nint32 rel_pos_length              # Length of the relative position vector\n                                  # [cm]\nint32 rel_pos_heading             # Heading of the relative position vector\n                                  # [1e-5 deg]\nuint8[4] reserved2                # Reserved\nint8 rel_pos_hpn                  # High-precision North component of relative\n                                  # position vector. [0.1 mm]\n                                  # Must be in the range -99 to +99.\n                                  # The full North component of the relative\n                                  # position vector, in units of cm, is given by\n                                  # relPosN + (relPosHPN * 1e-2)\nint8 rel_pos_hpe                  # High-precision East component of relative\n                                  # position vector. [0.1 mm]\n                                  # Must be in the range -99 to +99.\n                                  # The full East component of the relative\n                                  # position vector, in units of cm, is given by\n                                  # relPosE + (relPosHPE * 1e-2)\nint8 rel_pos_hpd                  # High-precision Down component of relative\n                                  # position vector. [0.1 mm]\n                                  # Must be in the range -99 to +99.\n                                  # The full Down component of the relative\n                                  # position vector, in units of cm, is given by\n                                  # relPosD + (relPosHPD * 1e-2)\nint8 rel_pos_hp_length            # High-precision component of the length of\n                                  # the relative position vector.\n                                  # Must be in the range -99 to +99.\n                                  # The full length of the relative position\n                                  # vector, in units of cm, is given by\n                                  # relPosLength + (relPosHPLength * 1e-2)\n\nuint32 acc_n                      # Accuracy of relative position North\n                                  # component [0.1 mm]\nuint32 acc_e                      # Accuracy of relative position East component\n                                  # [0.1 mm]\nuint32 acc_d                      # Accuracy of relative position Down component\n                                  # [0.1 mm]\nuint32 acc_length                 # Accuracy of length of the relative position\n                                  # vector [0.1 mm]\nuint32 acc_heading                # Accuracy of heading of the relative position\n                                  # vector [1e-5 deg]\n\nuint8[4] reserved3                # Reserved\n\nuint32 flags\nuint32 FLAGS_GNSS_FIX_OK = 1      # A valid fix (i.e within DOP & accuracy\n                                  # masks)\nuint32 FLAGS_DIFF_SOLN = 2        # Set if differential corrections were applied\nuint32 FLAGS_REL_POS_VALID = 4    # Set if relative position components and\n                                  # accuracies are valid\nuint32 FLAGS_CARR_SOLN_MASK = 24  # Carrier phase range solution status:\nuint32 FLAGS_CARR_SOLN_NONE = 0     # No carrier phase range solution\nuint32 FLAGS_CARR_SOLN_FLOAT = 8    # Float solution. No fixed integer carrier\n                                    # phase measurements have been used to\n                                    # calculate the solution\nuint32 FLAGS_CARR_SOLN_FIXED = 16   # Fixed solution. One or more fixed\n                                    # integer carrier phase range measurements\n                                    # have been used to calculate the solution\nuint32 FLAGS_IS_MOVING = 32       # if the receiver is operating in moving\n                                  # baseline mode (not supported in protocol\n                                  # versions less than 20.3)\nuint32 FLAGS_REF_POS_MISS = 64    # Set if extrapolated reference position was\n                                  # used to compute moving baseline solution\n                                  # this epoch (not supported in protocol\n                                  # versions less than 20.3)\nuint32 FLAGS_REF_OBS_MISS = 128   # Set if extrapolated reference observations\n                                  # were used to compute moving baseline\n                                  # solution this epoch (not supported in\n                                  # protocol versions less than 20.3)\nuint32 FLAGS_REL_POS_HEAD_VALID = 256   # Set if extrapolated reference observations\n                                        # were used to compute moving baseline\n                                        # solution this epoch (not supported in\n                                        # protocol versions less than 20.3)\nuint32 FLAGS_REL_POS_NORM = 512   # Set if extrapolated reference observations\n                                  # were used to compute moving baseline\n                                  # solution this epoch (not supported in\n                                  # protocol versions less than 20.3)\n",
         "# NAV-SAT (0x01 0x35)\n# Satellite Information\n#\n# This message displays information about SVs which are either known to be\n# visible or currently tracked by the receiver.\n#\n\nuint8 CLASS_ID = 1\nuint8 MESSAGE_ID = 53\n\nuint32 i_tow                # GPS time of week of the navigation epoch. [ms]\nuint8 version              # Message version (1 for this version)\nuint8 num_svs               # Number of satellites\nuint8[2] reserved0         # Reserved\n\n# start of repeated block (numSvs times)\nNavSATSV[]  sv\n# end of repeated block\n\n================================================================================\nMSG: ublox_msgs/NavSATSV\n# see NAV-SAT message\n#\n\nuint8 gnss_id      # GNSS identifier\nuint8 sv_id        # Satellite identifier\n\nuint8 cno         # Carrier to noise ratio (signal strength) ]dBHz\nint8 elev         # Elevation (range: +/-90), unknown if out of range [deg]\nint16 azim        # Azimuth (range 0-360), unknown if elevation is out of range\n                  # [deg]\nint16 pr_res       # Pseudo range residual [0.1 m]\n\nuint32 flags      # Bitmask\nuint32 FLAGS_QUALITY_IND_MASK = 7     # Signal quality indicator:\nuint8 QUALITY_IND_NO_SIGNAL = 0                     # no signal\nuint8 QUALITY_IND_SEARCHING_SIGNAL = 1              # searching signal\nuint8 QUALITY_IND_SIGNAL_ACQUIRED = 2               # signal acquired\nuint8 QUALITY_IND_SIGNAL_DETECTED_BUT_UNUSABLE = 3  # signal detected but\n                                                    # unusable\nuint8 QUALITY_IND_CODE_LOCKED_AND_TIME_SYNC = 4     # code locked and time\n                                                    # synchronized\nuint8 QUALITY_IND_CODE_AND_CARR_LOCK_AND_TIME_SYNC1 = 5 # code and carrier\n                                                        # locked and time\n                                                        # synchronized,\n                                                        # quality = 1\nuint8 QUALITY_IND_CODE_AND_CARR_LOCK_AND_TIME_SYNC2 = 6 # code and carrier\n                                                        # locked and time\n                                                        # synchronized,\n                                                        # quality = 2\nuint8 QUALITY_IND_CODE_AND_CARR_LOCK_AND_TIME_SYNC3 = 7 # code and carrier\n                                                        # locked and time\n                                                        # synchronized,\n                                                        # quality = 3\n# Note: Since IMES signals are not time synchronized, a channel tracking an IMES\n# signal can never reach a quality indicator value of higher than 3.\nuint32 FLAGS_SV_USED = 8                      # whether SV is currently being\n                                              # used for navigation\nuint32 FLAGS_HEALTH_MASK = 48                 # SV health flag:\nuint32 HEALTH_UNKNOWN = 0                       # unknown\nuint32 HEALTH_HEALTHY = 1                       # healthy\nuint32 HEALTH_UNHEALTHY = 2                     # unhealthy\nuint32 FLAGS_DIFF_CORR = 64                   # whether differential correction\n                                              # data is available for this SV\nuint32 FLAGS_SMOOTHED = 128                   # whether carrier smoothed\n                                              # pseudorange used\nuint32 FLAGS_ORBIT_SOURCE_MASK = 1792         # Orbit source:\nuint32 ORBIT_SOURCE_UNAVAILABLE = 0             # no orbit information is\n                                              # available for this SV\nuint32 ORBIT_SOURCE_EPH = 256                   # ephemeris is used\nuint32 ORBIT_SOURCE_ALM = 512                   # almanac is used\nuint32 ORBIT_SOURCE_ASSIST_OFFLINE = 768        # AssistNow Offline orbit is\n                                                # used\nuint32 ORBIT_SOURCE_ASSIST_AUTONOMOUS = 1024    # AssistNow Autonomous orbit is\n                                                # used\nuint32 ORBIT_SOURCE_OTHER1 = 1280               # other orbit information is\n                                                # used\nuint32 ORBIT_SOURCE_OTHER2 = 1536               # other orbit information is\n                                                # used\nuint32 ORBIT_SOURCE_OTHER3 = 1792               # other orbit information is\n                                                # used\nuint32 FLAGS_EPH_AVAIL = 2048                 # whether ephemeris is available\n                                              # for this SV\nuint32 FLAGS_ALM_AVAIL = 4096                 # whether almanac is available for\n                                              # this SV\nuint32 FLAGS_ANO_AVAIL = 8192                 # whether AssistNow Offline data\n                                              # is available for this SV\nuint32 FLAGS_AOP_AVAIL = 16384                # whether AssistNow Autonomous\n                                              # data is available for this SV\nuint32 FLAGS_SBAS_CORR_USED = 65536           # whether SBAS corrections have\n                                              # been used for this SV\nuint32 FLAGS_RTCM_CORR_USED = 131072          # whether RTCM corrections have\n                                              # been used for this SV\nuint32 FLAGS_PR_CORR_USED = 1048576           # whether Pseudorange corrections\n                                              # have been used for this SV\nuint32 FLAGS_CR_CORR_USED = 2097152           # whether Carrier range\n                                              # corrections have been used for\n                                              # this SV\nuint32 FLAGS_DO_CORR_USED = 4194304           # whether Range rate (Doppler)\n                                              # corrections have been used for\n                                              # this SV\n",
         "# NAV-STATUS (0x01 0x03)\n# Receiver Navigation Status\n#\n# See important comments concerning validity of position and velocity given in\n# section Navigation Output Filters.\n#\n\nuint8 CLASS_ID = 1\nuint8 MESSAGE_ID = 3\n\nuint32 i_tow             # GPS Millisecond time of week [ms]\n\nuint8 gps_fix            # GPSfix Type, this value does not qualify a fix as\n                        # valid and within the limits. See note on flag gpsFixOk\n                        # below\nuint8 GPS_NO_FIX = 0\nuint8 GPS_DEAD_RECKONING_ONLY = 1\nuint8 GPS_2D_FIX = 2\nuint8 GPS_3D_FIX = 3\nuint8 GPS_GPS_DEAD_RECKONING_COMBINED = 4\nuint8 GPS_TIME_ONLY_FIX = 5\n\nuint8 flags             # Navigation Status Flags\nuint8 FLAGS_GPS_FIX_OK = 1      # position & velocity valid & within DOP & ACC\n                                # Masks\nuint8 FLAGS_DIFF_SOLN = 2       # Differential corrections were applied\nuint8 FLAGS_WKNSET = 4          # Week Number valid\nuint8 FLAGS_TOWSET = 8          # Time of Week valid\n\nuint8 fix_stat           # Fix Status Information\nuint8 FIX_STAT_DIFF_CORR_MASK = 1       # 1 = differential corrections available\n# map matching status:\nuint8 FIX_STAT_MAP_MATCHING_MASK = 192\nuint8 MAP_MATCHING_NONE = 0      # none\nuint8 MAP_MATCHING_VALID = 64    # valid but not used, i.e. map matching data\n                                 # was received, but was too old\nuint8 MAP_MATCHING_USED = 128    # valid and used, map matching data was applied\nuint8 MAP_MATCHING_DR = 192      # valid and used, map matching data was\n                                 # applied. In case of sensor unavailability map\n                                 # matching data enables dead reckoning.\n                                 # This requires map matched latitude/longitude\n                                 # or heading data.\n\nuint8 flags2            # further information about navigation output\n# power safe mode state (Only for FW version >= 7.01; undefined otherwise)\nuint8 FLAGS2_PSM_STATE_MASK = 3\nuint8 PSM_STATE_ACQUISITION = 0                # ACQUISITION\n                                               # [or when psm disabled]\nuint8 PSM_STATE_TRACKING = 1                   # TRACKING\nuint8 PSM_STATE_POWER_OPTIMIZED_TRACKING = 2   # POWER OPTIMIZED TRACKING\nuint8 PSM_STATE_INACTIVE = 3                   # INACTIVE\n# Note that the spoofing state value only reflects the detector state for the\n# current navigation epoch. As spoofing can be detected most easily at the\n# transition from real signal to spoofing signal, this is also where the\n# detector is triggered the most. I.e. a value of 1 - No spoofing indicated does\n# not mean that the receiver is not spoofed, it #simply states that the detector\n# was not triggered in this epoch.\nuint8 FLAGS2_SPOOF_DET_STATE_MASK = 24\nuint8 SPOOF_DET_STATE_UNKNOWN = 0    # Unknown or deactivated\nuint8 SPOOF_DET_STATE_NONE = 8       # No spoofing indicated\nuint8 SPOOF_DET_STATE_SPOOFING = 16  # Spoofing indicated\nuint8 SPOOF_DET_STATE_MULTIPLE = 24  # Multiple spoofing indication\n\nuint32 ttff             # Time to first fix (millisecond time tag) [ms]\nuint32 msss             # Milliseconds since Startup / Reset [ms]\n",
         "# NAV-SVIN (0x01 0x3B)\n# Survey-in data\n#\n# This message contains information about survey-in parameters.\n# Supported on:\n#  - u-blox 8 / u-blox M8 with protocol version 20 (only with High Precision\n#    GNSS products)\n\nuint8 CLASS_ID = 1\nuint8 MESSAGE_ID = 59\n\nuint8 version           # Message version (0x00 for this version)\nuint8[3] reserved0      # Reserved\n\nuint32 i_tow             # GPS time of week of the navigation epoch [ms]\n\nuint32 dur              # Passed survey-in observation time [s]\n\nint32 mean_x             # Current survey-in mean position ECEF X coordinate [cm]\nint32 mean_y             # Current survey-in mean position ECEF Y coordinate [cm]\nint32 mean_z             # Current survey-in mean position ECEF Z coordinate [cm]\n\nint8 mean_xhp            # Current high-precision survey-in mean position\n                        # ECEF X coordinate. 0.1_mm\n                        # Must be in the range -99..+99.\n                        # The current survey-in mean position ECEF X\n                        # coordinate, in units of cm, is given by\n                        # meanX + (0.01 * meanXHP)\nint8 mean_yhp            # Current high-precision survey-in mean position\n                        # ECEF Y coordinate. [0.1 mm]\n                        # Must be in the range -99..+99.\n                        # The current survey-in mean position ECEF Y\n                        # coordinate, in units of cm, is given by\n                        # meanY + (0.01 * meanYHP)\nint8 mean_zhp            # Current high-precision survey-in mean position\n                        # ECEF Z coordinate. [0.1 mm]\n                        # Must be in the range -99..+99.\n                        # The current survey-in mean position ECEF Z\n                        # coordinate, in units of cm, is given by\n                        # meanZ + (0.01 * meanZHP)\n\nuint8 reserved1         # Reserved\n\nuint32 mean_acc          # Current survey-in mean position accuracy [0.1 mm]\nuint32 obs              # Number of position observations used during survey-in\nuint8 valid             # Survey-in position validity flag, 1 = valid\n                        # otherwise 0\nuint8 active            # Survey-in in progress flag, 1 = in-progress\n                        # otherwise 0\n\nuint8[2] reserved3      # Reserved\n",
         "# A message representing a single NMEA0183 sentence.\n\n# header.stamp is the ROS Time when the sentence was read.\n# header.frame_id is the frame of reference reported by the satellite\n#        receiver, usually the location of the antenna.  This is a\n#        Euclidean frame relative to the vehicle, not a reference\n#        ellipsoid.\nstd_msgs/Header header\n\n# This should only contain ASCII characters in order to be a valid NMEA0183 sentence.\nstring sentence\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# Provides meta-information about a visual pipeline.\n#\n# This message serves a similar purpose to sensor_msgs/CameraInfo, but instead\n#   of being tied to hardware, it represents information about a specific\n#   computer vision pipeline. This information stays constant (or relatively\n#   constant) over time, and so it is wasteful to send it with each individual\n#   result. By listening to these messages, subscribers will receive\n#   the context in which published vision messages are to be interpreted.\n# Each vision pipeline should publish its LabelInfo messages to its own topic,\n#   in a manner similar to CameraInfo.\n# This message is meant to allow converting data from vision pipelines that\n#   return id based classifications back to human readable string class names.\n\n# Used for sequencing\nstd_msgs/Header header\n\n# An array of uint16 keys and string values containing the association\n#   between class identifiers and their names. According to the amount\n#   of classes and the datatype used to store their ids internally, the\n#   maxiumum class id allowed (65535 for uint16 and 255 for uint8) belongs to\n#   the \"UNLABELED\" class.\nvision_msgs/VisionClass[] class_map \n\n# The value between 0-1 used as confidence threshold for the inference.\nfloat32 threshold\n\n================================================================================\nMSG: vision_msgs/VisionClass\n# A key value pair that maps an integer class_id to a string class label\n#   in computer vision systems.\n\n# The int value that identifies the class.\n# Elements identified with 65535, the maximum uint16 value are assumed\n#   to belong to the \"UNLABELED\" class. For vision pipelines using less\n#   than 255 classes the \"UNLABELED\" is the maximum value in the uint8\n#   range.\nuint16 class_id\n\n# The name of the class represented by the class_id\nstring class_name\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "# failed to get full definition text for usr_msgs/msg/Detections: //",
         "# This message contains an uncompressed image\n# (0, 0) is at top-left corner of image\n\nstd_msgs/Header header # Header timestamp should be acquisition time of image\n                             # Header frame_id should be optical frame of camera\n                             # origin of frame should be optical center of cameara\n                             # +x should point to the right in the image\n                             # +y should point down in the image\n                             # +z should point into to plane of the image\n                             # If the frame_id here and the frame_id of the CameraInfo\n                             # message associated with the image conflict\n                             # the behavior is undefined\n\nuint32 height                # image height, that is, number of rows\nuint32 width                 # image width, that is, number of columns\n\n# The legal values for encoding are in file include/sensor_msgs/image_encodings.hpp\n# If you want to standardize a new string format, join\n# ros-users@lists.ros.org and send an email proposing a new encoding.\n\nstring encoding       # Encoding of pixels -- channel meaning, ordering, size\n                      # taken from the list of strings in include/sensor_msgs/image_encodings.hpp\n\nuint8 is_bigendian    # is this data bigendian?\nuint32 step           # Full row length in bytes\nuint8[] data          # actual matrix data, size is (step * rows)\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This represents an estimate of a position and velocity in free space.\n# The pose in this message should be specified in the coordinate frame given by header.frame_id\n# The twist in this message should be specified in the coordinate frame given by the child_frame_id\n\n# Includes the frame id of the pose parent.\nstd_msgs/Header header\n\n# Frame id the pose points to. The twist is in this coordinate frame.\nstring child_frame_id\n\n# Estimated pose that is typically relative to a fixed world frame.\ngeometry_msgs/PoseWithCovariance pose\n\n# Estimated linear and angular velocity relative to child_frame_id.\ngeometry_msgs/TwistWithCovariance twist\n\n================================================================================\nMSG: geometry_msgs/TwistWithCovariance\n# This expresses velocity in free space with uncertainty.\n\nTwist twist\n\n# Row-major representation of the 6x6 covariance matrix\n# The orientation parameters use a fixed-axis representation.\n# In order, the parameters are:\n# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\nfloat64[36] covariance\n\n================================================================================\nMSG: geometry_msgs/Twist\n# This expresses velocity in free space broken into its linear and angular parts.\n\nVector3  linear\nVector3  angular\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space.\n\n# This is semantically different than a point.\n# A vector is always anchored at the origin.\n# When a transform is applied to a vector, only the rotational component is applied.\n\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/PoseWithCovariance\n# This represents a pose in free space with uncertainty.\n\nPose pose\n\n# Row-major representation of the 6x6 covariance matrix\n# The orientation parameters use a fixed-axis representation.\n# In order, the parameters are:\n# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\nfloat64[36] covariance\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This represents an estimate of a position and velocity in free space.\n# The pose in this message should be specified in the coordinate frame given by header.frame_id\n# The twist in this message should be specified in the coordinate frame given by the child_frame_id\n\n# Includes the frame id of the pose parent.\nstd_msgs/Header header\n\n# Frame id the pose points to. The twist is in this coordinate frame.\nstring child_frame_id\n\n# Estimated pose that is typically relative to a fixed world frame.\ngeometry_msgs/PoseWithCovariance pose\n\n# Estimated linear and angular velocity relative to child_frame_id.\ngeometry_msgs/TwistWithCovariance twist\n\n================================================================================\nMSG: geometry_msgs/TwistWithCovariance\n# This expresses velocity in free space with uncertainty.\n\nTwist twist\n\n# Row-major representation of the 6x6 covariance matrix\n# The orientation parameters use a fixed-axis representation.\n# In order, the parameters are:\n# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\nfloat64[36] covariance\n\n================================================================================\nMSG: geometry_msgs/Twist\n# This expresses velocity in free space broken into its linear and angular parts.\n\nVector3  linear\nVector3  angular\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space.\n\n# This is semantically different than a point.\n# A vector is always anchored at the origin.\n# When a transform is applied to a vector, only the rotational component is applied.\n\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/PoseWithCovariance\n# This represents a pose in free space with uncertainty.\n\nPose pose\n\n# Row-major representation of the 6x6 covariance matrix\n# The orientation parameters use a fixed-axis representation.\n# In order, the parameters are:\n# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\nfloat64[36] covariance\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This represents an estimate of a position and velocity in free space.\n# The pose in this message should be specified in the coordinate frame given by header.frame_id\n# The twist in this message should be specified in the coordinate frame given by the child_frame_id\n\n# Includes the frame id of the pose parent.\nstd_msgs/Header header\n\n# Frame id the pose points to. The twist is in this coordinate frame.\nstring child_frame_id\n\n# Estimated pose that is typically relative to a fixed world frame.\ngeometry_msgs/PoseWithCovariance pose\n\n# Estimated linear and angular velocity relative to child_frame_id.\ngeometry_msgs/TwistWithCovariance twist\n\n================================================================================\nMSG: geometry_msgs/TwistWithCovariance\n# This expresses velocity in free space with uncertainty.\n\nTwist twist\n\n# Row-major representation of the 6x6 covariance matrix\n# The orientation parameters use a fixed-axis representation.\n# In order, the parameters are:\n# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\nfloat64[36] covariance\n\n================================================================================\nMSG: geometry_msgs/Twist\n# This expresses velocity in free space broken into its linear and angular parts.\n\nVector3  linear\nVector3  angular\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space.\n\n# This is semantically different than a point.\n# A vector is always anchored at the origin.\n# When a transform is applied to a vector, only the rotational component is applied.\n\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/PoseWithCovariance\n# This represents a pose in free space with uncertainty.\n\nPose pose\n\n# Row-major representation of the 6x6 covariance matrix\n# The orientation parameters use a fixed-axis representation.\n# In order, the parameters are:\n# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\nfloat64[36] covariance\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This message contains a parameter event.\n# Because the parameter event was an atomic update, a specific parameter name\n# can only be in one of the three sets.\n\n# The time stamp when this parameter event occurred.\nbuiltin_interfaces/Time stamp\n\n# Fully qualified ROS path to node.\nstring node\n\n# New parameters that have been set for this node.\nParameter[] new_parameters\n\n# Parameters that have been changed during this event.\nParameter[] changed_parameters\n\n# Parameters that have been deleted during this event.\nParameter[] deleted_parameters\n\n================================================================================\nMSG: rcl_interfaces/Parameter\n# This is the message to communicate a parameter. It is an open struct with an enum in\n# the descriptor to select which value is active.\n\n# The full name of the parameter.\nstring name\n\n# The parameter's value which can be one of several types, see\n# `ParameterValue.msg` and `ParameterType.msg`.\nParameterValue value\n\n================================================================================\nMSG: rcl_interfaces/ParameterValue\n# Used to determine which of the next *_value fields are set.\n# ParameterType.PARAMETER_NOT_SET indicates that the parameter was not set\n# (if gotten) or is uninitialized.\n# Values are enumerated in `ParameterType.msg`.\n\n# The type of this parameter, which corresponds to the appropriate field below.\nuint8 type\n\n# \"Variant\" style storage of the parameter value. Only the value corresponding\n# the type field will have valid information.\n\n# Boolean value, can be either true or false.\nbool bool_value\n\n# Integer value ranging from -9,223,372,036,854,775,808 to\n# 9,223,372,036,854,775,807.\nint64 integer_value\n\n# A double precision floating point value following IEEE 754.\nfloat64 double_value\n\n# A textual value with no practical length limit.\nstring string_value\n\n# An array of bytes, used for non-textual information.\nbyte[] byte_array_value\n\n# An array of boolean values.\nbool[] bool_array_value\n\n# An array of 64-bit integer values.\nint64[] integer_array_value\n\n# An array of 64-bit floating point values.\nfloat64[] double_array_value\n\n# An array of string values.\nstring[] string_array_value\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# An array of poses that represents a Path for a robot to follow.\n\n# Indicates the frame_id of the path.\nstd_msgs/Header header\n\n# Array of poses to follow.\ngeometry_msgs/PoseStamped[] poses\n\n================================================================================\nMSG: geometry_msgs/PoseStamped\n# A Pose with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPose pose\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# The time point at which this event occurred.\nuint64 timestamp\n\n# The id and label of this transition event.\nTransition transition\n\n# The starting state from which this event transitioned.\nState start_state\n\n# The end state of this transition event.\nState goal_state\n\n================================================================================\nMSG: lifecycle_msgs/State\n# Primary state definitions as depicted in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# These are the primary states. State changes can only be requested when the\n# node is in one of these states.\n\n# Indicates state has not yet been set.\nuint8 PRIMARY_STATE_UNKNOWN = 0\n\n# This is the life cycle state the node is in immediately after being\n# instantiated.\nuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\n# This state represents a node that is not currently performing any processing.\nuint8 PRIMARY_STATE_INACTIVE = 2\n\n# This is the main state of the node's life cycle. While in this state, the node\n# performs any processing, responds to service requests, reads and processes\n# data, produces output, etc.\nuint8 PRIMARY_STATE_ACTIVE = 3\n\n# The finalized state is the state in which the node ends immediately before\n# being destroyed.\nuint8 PRIMARY_STATE_FINALIZED = 4\n\n# Temporary intermediate states. When a transition is requested, the node\n# changes its state into one of these states.\n\n# In this transition state the node's onConfigure callback will be called to\n# allow the node to load its configuration and conduct any required setup.\nuint8 TRANSITION_STATE_CONFIGURING = 10\n\n# In this transition state the node's callback onCleanup will be called to clear\n# all state and return the node to a functionally equivalent state as when\n# first created.\nuint8 TRANSITION_STATE_CLEANINGUP = 11\n\n# In this transition state the callback onShutdown will be executed to do any\n# cleanup necessary before destruction.\nuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\n# In this transition state the callback onActivate will be executed to do any\n# final preparations to start executing.\nuint8 TRANSITION_STATE_ACTIVATING = 13\n\n# In this transition state the callback onDeactivate will be executed to do any\n# cleanup to start executing, and reverse the onActivate changes.\nuint8 TRANSITION_STATE_DEACTIVATING = 14\n\n# This transition state is where any error may be cleaned up.\nuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\n# The state id value from the above definitions.\nuint8 id\n\n# A text label of the state.\nstring label\n\n================================================================================\nMSG: lifecycle_msgs/Transition\n# Default values for transitions as described in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# Reserved [0-9], publicly available transitions.\n# When a node is in one of these primary states, these transitions can be\n# invoked.\n\n# This transition will instantiate the node, but will not run any code beyond\n# the constructor.\nuint8 TRANSITION_CREATE = 0\n\n# The node's onConfigure callback will be called to allow the node to load its\n# configuration and conduct any required setup.\nuint8 TRANSITION_CONFIGURE = 1\n\n# The node's callback onCleanup will be called in this transition to allow the\n# node to load its configuration and conduct any required setup.\nuint8 TRANSITION_CLEANUP = 2\n\n# The node's callback onActivate will be executed to do any final preparations\n# to start executing.\nuint8 TRANSITION_ACTIVATE = 3\n\n# The node's callback onDeactivate will be executed to do any cleanup to start\n# executing, and reverse the onActivate changes.\nuint8 TRANSITION_DEACTIVATE = 4\n\n# This signals shutdown during an unconfigured state, the node's callback\n# onShutdown will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\n# This signals shutdown during an inactive state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\n# This signals shutdown during an active state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\n# This transition will simply cause the deallocation of the node.\nuint8 TRANSITION_DESTROY = 8\n\n# Reserved [10-69], private transitions\n# These transitions are not publicly available and cannot be invoked by a user.\n# The following transitions are implicitly invoked based on the callback\n# feedback of the intermediate transition states.\nuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\nuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\nuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\nuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\nuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\nuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\nuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\nuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\nuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\nuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\nuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\nuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\nuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\nuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\nuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\nuint8 TRANSITION_ON_ERROR_SUCCESS = 60\nuint8 TRANSITION_ON_ERROR_FAILURE = 61\nuint8 TRANSITION_ON_ERROR_ERROR = 62\n\n# Reserved [90-99]. Transition callback success values.\n# These return values ought to be set as a return value for each callback.\n# Depending on which return value, the transition will be executed correctly or\n# fallback/error callbacks will be triggered.\n\n# The transition callback successfully performed its required functionality.\nuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\n# The transition callback failed to perform its required functionality.\nuint8 TRANSITION_CALLBACK_FAILURE = 98\n\n# The transition callback encountered an error that requires special cleanup, if\n# possible.\nuint8 TRANSITION_CALLBACK_ERROR = 99\n\n##\n## Fields\n##\n\n# The transition id from above definitions.\nuint8 id\n\n# A text label of the transition.\nstring label\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "# failed to get full definition text for usr_msgs/msg/QrMessage: //",
         "# failed to get full definition text for usr_msgs/msg/NodeChangeState: //",
         "# failed to get full definition text for usr_msgs/msg/ResourcesUsage: //",
         "##\n## Severity level constants\n## \n## These logging levels follow the Python Standard\n## https://docs.python.org/3/library/logging.html#logging-levels\n## And are implemented in rcutils as well\n## https://github.com/ros2/rcutils/blob/35f29850064e0c33a4063cbc947ebbfeada11dba/include/rcutils/logging.h#L164-L172\n## This leaves space for other standard logging levels to be inserted in the middle in the future,\n## as well as custom user defined levels.\n## Since there are several other logging enumeration standard for different implementations,\n## other logging implementations may need to provide level mappings to match their internal implementations.\n##\n\n# Debug is for pedantic information, which is useful when debugging issues.\nbyte DEBUG=10\n\n# Info is the standard informational level and is used to report expected\n# information.\nbyte INFO=20\n\n# Warning is for information that may potentially cause issues or possibly unexpected\n# behavior.\nbyte WARN=30\n\n# Error is for information that this node cannot resolve.\nbyte ERROR=40\n\n# Information about a impending node shutdown.\nbyte FATAL=50\n\n##\n## Fields\n##\n\n# Timestamp when this message was generated by the node.\nbuiltin_interfaces/Time stamp\n\n# Corresponding log level, see above definitions.\nuint8 level\n\n# The name representing the logger this message came from.\nstring name\n\n# The full log message.\nstring msg\n\n# The file the message came from.\nstring file\n\n# The function the message came from.\nstring function\n\n# The line in the file the message came from.\nuint32 line\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# Geographic point, using the WGS 84 reference ellipsoid.\n\n# Latitude [degrees]. Positive is north of equator; negative is south\n# (-90.0 <= latitude <= +90.0).\nfloat64 latitude\n\n# Longitude [degrees]. Positive is east of prime meridian; negative is\n# west (-180.0 <= longitude <= +180.0). At the poles, latitude is -90.0 or\n# +90.0, and longitude is irrelevant, but must be in range.\nfloat64 longitude\n\n# Altitude [m]. Positive is above the WGS 84 ellipsoid (NaN if unspecified).\nfloat64 altitude\n",
         "# Navigation Satellite fix for any Global Navigation Satellite System\n#\n# Specified using the WGS 84 reference ellipsoid\n\n# header.stamp specifies the ROS time for this measurement (the\n#        corresponding satellite time may be reported using the\n#        sensor_msgs/TimeReference message).\n#\n# header.frame_id is the frame of reference reported by the satellite\n#        receiver, usually the location of the antenna.  This is a\n#        Euclidean frame relative to the vehicle, not a reference\n#        ellipsoid.\nstd_msgs/Header header\n\n# Satellite fix status information.\nNavSatStatus status\n\n# Latitude [degrees]. Positive is north of equator; negative is south.\nfloat64 latitude\n\n# Longitude [degrees]. Positive is east of prime meridian; negative is west.\nfloat64 longitude\n\n# Altitude [m]. Positive is above the WGS 84 ellipsoid\n# (quiet NaN if no altitude is available).\nfloat64 altitude\n\n# Position covariance [m^2] defined relative to a tangential plane\n# through the reported position. The components are East, North, and\n# Up (ENU), in row-major order.\n#\n# Beware: this coordinate system exhibits singularities at the poles.\nfloat64[9] position_covariance\n\n# If the covariance of the fix is known, fill it in completely. If the\n# GPS receiver provides the variance of each measurement, put them\n# along the diagonal. If only Dilution of Precision is available,\n# estimate an approximate covariance from that.\n\nuint8 COVARIANCE_TYPE_UNKNOWN = 0\nuint8 COVARIANCE_TYPE_APPROXIMATED = 1\nuint8 COVARIANCE_TYPE_DIAGONAL_KNOWN = 2\nuint8 COVARIANCE_TYPE_KNOWN = 3\n\nuint8 position_covariance_type\n\n================================================================================\nMSG: sensor_msgs/NavSatStatus\n# Navigation Satellite fix status for any Global Navigation Satellite System.\n#\n# Whether to output an augmented fix is determined by both the fix\n# type and the last time differential corrections were received.  A\n# fix is valid when status >= STATUS_FIX.\n\nint8 STATUS_NO_FIX =  -1        # unable to fix position\nint8 STATUS_FIX =      0        # unaugmented fix\nint8 STATUS_SBAS_FIX = 1        # with satellite-based augmentation\nint8 STATUS_GBAS_FIX = 2        # with ground-based augmentation\n\nint8 status\n\n# Bits defining which Global Navigation Satellite System signals were\n# used by the receiver.\n\nuint16 SERVICE_GPS =     1\nuint16 SERVICE_GLONASS = 2\nuint16 SERVICE_COMPASS = 4      # includes BeiDou.\nuint16 SERVICE_GALILEO = 8\n\nuint16 service\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# message to store data usage in bytes\nstring iccid\nint64 upload\nint64 download\n",
         "# Message for reporting the current download/upload speed of the router\n# download:   Download speed of the router.\n# upload:     Upload speed of the router.\n# units:      Current speed unit such as kbps\nfloat32 download\nfloat32 upload\nstring units",
         "# Message for reporting the general state of the entire set of router WAN connections\n# ethernet:     Array with the current state of the ethernet networks\n# cellular:     Array with the current state of the cellular networks.\n# wifi:         Array with the current statue of the WiFi networks.\nWanEthernet[] ethernet\nWanCellular[] cellular\nWanWifi[] wifi\n================================================================================\nMSG: router_msgs/WanWifi\n# Message containing the state of the available WiFi connections.\n# id:               Wan connection ID of the respective SimCard.\n# ssid:             Wifi Network name.\n# message:          Acknowledge message sent by the network\n# bssid:            Basic service set identifiers\n# securitypolicy:   Current security policy \n# priority:         Current priority level\n# signallevel:      Signal level between 0 and 5\n# signalstrength:   Signal strength in dB\n# channel:          Current connection channel\n# enable:           Indicates whether the wan connection is enabled or disabled\n# statusinuse:      Indicates wheter or not the network is being used.\n# statusconnected:  Indicates wheter or not the network is connected.\n# allowance     Includes all the allowance related data\nstring id\nstring ssid\nstring message\nstring bssid\nstring securitypolicy\nint16 priority\nint16 signallevel\nint16 signalstrength\nint16 channel\nbool enable\nbool statusinuse\nbool statusconnected\nWanAllowance allowance\n================================================================================\nMSG: router_msgs/WanAllowance\n# date:         Starting day of the allowance period\n# limit:        Limit of the allowed data during the indicated period.\n# unit:         Unit of the reported allowance data.\n# usage:        Currently consumed data\n# percent:      Percentage of consumed data from the allowed range\n# enable:       Indicates whether or not the allowance is currently enabled\nint8 date\nint32 limit\nstring unit\nfloat32 usage\nfloat32 percent\nbool enable\n================================================================================\nMSG: router_msgs/WanCellular\n# Message containing the state of the available cellular connections.\n# id:           Wan connection ID of the respective SimCard.\n# carriername:  Company name of the service provider.\n# network:      Type of network such as LTE\n# bandname:     Frequency and name of the band\n# imsi:         International Mobile Subscriber Identity \n# iccid:        Integrated Circuit Card ID\n# imei:         IMEI of the respective SIM Slot\n# priority:     Current priority level\n# enable:       Indicates whether the wan connection is enabled or disabled\n# signal_stats: Current signal quality metrics\n# allowance     Includes all the allowance related data\n\nstring id\nstring carriername\nstring network\nstring bandname\nstring imsi\nstring iccid\nstring imei\nint16 priority\nbool enable\nWanCellularSignal signal_stats\nWanAllowance allowance\n================================================================================\nMSG: router_msgs/WanCellularSignal\n# Message containing the cellular signal quality metrics.\n# signallevel:  Signal level between 0 and 5\n# rssi:         Received Signal Strength Indicator\n# sinr:         Signal to Interference & Noise Ratio\n# rsrp:         Reference Signal Received Power\n# rsrq:         Reference Signal Received Quality\n\nint16 signallevel -1\nfloat32 rssi -1\nfloat32 sinr -1\nfloat32 rsrp -1\nfloat32 rsrq -1\n================================================================================\nMSG: router_msgs/WanEthernet\n# Message for reporting the current state of the ethernet connection\n# id:           Wan connection ID of the ethernet Connection.\n# priority:     Current priority level\n# uptime:       Current time connected to ethernet\n# enable:       Indicates whether the wan connection is enabled or disabled\n# connected:    Indicates whether the ethernet connection is connected or disconnected \n# allowance     Includes all the allowance related data\nstring id\nint16 priority\nint16 uptime\nbool enable\nbool connected\nWanAllowance allowance\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "# A twist with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nTwist twist\n\n================================================================================\nMSG: geometry_msgs/Twist\n# This expresses velocity in free space broken into its linear and angular parts.\n\nVector3  linear\nVector3  angular\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space.\n\n# This is semantically different than a point.\n# A vector is always anchored at the origin.\n# When a transform is applied to a vector, only the rotational component is applied.\n\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nint8 data\n",
         "# A message representing a single RTCM message.\nstd_msgs/Header header\n\nuint8[] message\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "# RXM-RTCM (0x02 0x32)\n# RTCM input status\n#\n# Output upon processing of an RTCM input message\n# Supported on:\n# - u-blox 8 / u-blox M8 from protocol version 20.01 up to version 23.01\n#\n\nuint8 CLASS_ID = 2\nuint8 MESSAGE_ID = 50\n\nuint8 version                 # Message version (0x02 for this version)\nuint8 flags                   # RTCM input status flags\nuint8 FLAGS_CRC_FAILED = 1    # 0 when RTCM message received and passed CRC\n                              # check, 1 when failed in which case refStation\n                              # and msgType might be corrupted and misleading\n\nuint8[2] reserved0            # Reserved\n\nuint16 ref_station             # Reference station ID\nuint16 msg_type                # Message type\n",
         "# Single scan from a planar laser range-finder\n#\n# If you have another ranging device with different behavior (e.g. a sonar\n# array), please find or create a different message, since applications\n# will make fairly laser-specific assumptions about this data\n\nstd_msgs/Header header # timestamp in the header is the acquisition time of\n                             # the first ray in the scan.\n                             #\n                             # in frame frame_id, angles are measured around\n                             # the positive Z axis (counterclockwise, if Z is up)\n                             # with zero angle being forward along the x axis\n\nfloat32 angle_min            # start angle of the scan [rad]\nfloat32 angle_max            # end angle of the scan [rad]\nfloat32 angle_increment      # angular distance between measurements [rad]\n\nfloat32 time_increment       # time between measurements [seconds] - if your scanner\n                             # is moving, this will be used in interpolating position\n                             # of 3d points\nfloat32 scan_time            # time between scans [seconds]\n\nfloat32 range_min            # minimum range value [m]\nfloat32 range_max            # maximum range value [m]\n\nfloat32[] ranges             # range data [m]\n                             # (Note: values < range_min or > range_max should be discarded)\nfloat32[] intensities        # intensity data [device-specific units].  If your\n                             # device does not provide intensities, please leave\n                             # the array empty.\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# Single scan from a planar laser range-finder\n#\n# If you have another ranging device with different behavior (e.g. a sonar\n# array), please find or create a different message, since applications\n# will make fairly laser-specific assumptions about this data\n\nstd_msgs/Header header # timestamp in the header is the acquisition time of\n                             # the first ray in the scan.\n                             #\n                             # in frame frame_id, angles are measured around\n                             # the positive Z axis (counterclockwise, if Z is up)\n                             # with zero angle being forward along the x axis\n\nfloat32 angle_min            # start angle of the scan [rad]\nfloat32 angle_max            # end angle of the scan [rad]\nfloat32 angle_increment      # angular distance between measurements [rad]\n\nfloat32 time_increment       # time between measurements [seconds] - if your scanner\n                             # is moving, this will be used in interpolating position\n                             # of 3d points\nfloat32 scan_time            # time between scans [seconds]\n\nfloat32 range_min            # minimum range value [m]\nfloat32 range_max            # maximum range value [m]\n\nfloat32[] ranges             # range data [m]\n                             # (Note: values < range_min or > range_max should be discarded)\nfloat32[] intensities        # intensity data [device-specific units].  If your\n                             # device does not provide intensities, please leave\n                             # the array empty.\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# Register which scheduled times were reached\nbool shutdown\nbool lights_on\nbool emitter_on\nbool stereo_filter\nbool disable_segmentation\nbool disabled_sensors",
         "# failed to get full definition text for usr_msgs/msg/WayPointsNav: //",
         "# This message contains an uncompressed image\n# (0, 0) is at top-left corner of image\n\nstd_msgs/Header header # Header timestamp should be acquisition time of image\n                             # Header frame_id should be optical frame of camera\n                             # origin of frame should be optical center of cameara\n                             # +x should point to the right in the image\n                             # +y should point down in the image\n                             # +z should point into to plane of the image\n                             # If the frame_id here and the frame_id of the CameraInfo\n                             # message associated with the image conflict\n                             # the behavior is undefined\n\nuint32 height                # image height, that is, number of rows\nuint32 width                 # image width, that is, number of columns\n\n# The legal values for encoding are in file include/sensor_msgs/image_encodings.hpp\n# If you want to standardize a new string format, join\n# ros-users@lists.ros.org and send an email proposing a new encoding.\n\nstring encoding       # Encoding of pixels -- channel meaning, ordering, size\n                      # taken from the list of strings in include/sensor_msgs/image_encodings.hpp\n\nuint8 is_bigendian    # is this data bigendian?\nuint32 step           # Full row length in bytes\nuint8[] data          # actual matrix data, size is (step * rows)\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This message contains an uncompressed image\n# (0, 0) is at top-left corner of image\n\nstd_msgs/Header header # Header timestamp should be acquisition time of image\n                             # Header frame_id should be optical frame of camera\n                             # origin of frame should be optical center of cameara\n                             # +x should point to the right in the image\n                             # +y should point down in the image\n                             # +z should point into to plane of the image\n                             # If the frame_id here and the frame_id of the CameraInfo\n                             # message associated with the image conflict\n                             # the behavior is undefined\n\nuint32 height                # image height, that is, number of rows\nuint32 width                 # image width, that is, number of columns\n\n# The legal values for encoding are in file include/sensor_msgs/image_encodings.hpp\n# If you want to standardize a new string format, join\n# ros-users@lists.ros.org and send an email proposing a new encoding.\n\nstring encoding       # Encoding of pixels -- channel meaning, ordering, size\n                      # taken from the list of strings in include/sensor_msgs/image_encodings.hpp\n\nuint8 is_bigendian    # is this data bigendian?\nuint32 step           # Full row length in bytes\nuint8[] data          # actual matrix data, size is (step * rows)\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# Provides meta-information about a visual pipeline.\n#\n# This message serves a similar purpose to sensor_msgs/CameraInfo, but instead\n#   of being tied to hardware, it represents information about a specific\n#   computer vision pipeline. This information stays constant (or relatively\n#   constant) over time, and so it is wasteful to send it with each individual\n#   result. By listening to these messages, subscribers will receive\n#   the context in which published vision messages are to be interpreted.\n# Each vision pipeline should publish its LabelInfo messages to its own topic,\n#   in a manner similar to CameraInfo.\n# This message is meant to allow converting data from vision pipelines that\n#   return id based classifications back to human readable string class names.\n\n# Used for sequencing\nstd_msgs/Header header\n\n# An array of uint16 keys and string values containing the association\n#   between class identifiers and their names. According to the amount\n#   of classes and the datatype used to store their ids internally, the\n#   maxiumum class id allowed (65535 for uint16 and 255 for uint8) belongs to\n#   the \"UNLABELED\" class.\nvision_msgs/VisionClass[] class_map \n\n# The value between 0-1 used as confidence threshold for the inference.\nfloat32 threshold\n\n================================================================================\nMSG: vision_msgs/VisionClass\n# A key value pair that maps an integer class_id to a string class label\n#   in computer vision systems.\n\n# The int value that identifies the class.\n# Elements identified with 65535, the maximum uint16 value are assumed\n#   to belong to the \"UNLABELED\" class. For vision pipelines using less\n#   than 255 classes the \"UNLABELED\" is the maximum value in the uint8\n#   range.\nuint16 class_id\n\n# The name of the class represented by the class_id\nstring class_name\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This message contains an uncompressed image\n# (0, 0) is at top-left corner of image\n\nstd_msgs/Header header # Header timestamp should be acquisition time of image\n                             # Header frame_id should be optical frame of camera\n                             # origin of frame should be optical center of cameara\n                             # +x should point to the right in the image\n                             # +y should point down in the image\n                             # +z should point into to plane of the image\n                             # If the frame_id here and the frame_id of the CameraInfo\n                             # message associated with the image conflict\n                             # the behavior is undefined\n\nuint32 height                # image height, that is, number of rows\nuint32 width                 # image width, that is, number of columns\n\n# The legal values for encoding are in file include/sensor_msgs/image_encodings.hpp\n# If you want to standardize a new string format, join\n# ros-users@lists.ros.org and send an email proposing a new encoding.\n\nstring encoding       # Encoding of pixels -- channel meaning, ordering, size\n                      # taken from the list of strings in include/sensor_msgs/image_encodings.hpp\n\nuint8 is_bigendian    # is this data bigendian?\nuint32 step           # Full row length in bytes\nuint8[] data          # actual matrix data, size is (step * rows)\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This message contains an uncompressed image\n# (0, 0) is at top-left corner of image\n\nstd_msgs/Header header # Header timestamp should be acquisition time of image\n                             # Header frame_id should be optical frame of camera\n                             # origin of frame should be optical center of cameara\n                             # +x should point to the right in the image\n                             # +y should point down in the image\n                             # +z should point into to plane of the image\n                             # If the frame_id here and the frame_id of the CameraInfo\n                             # message associated with the image conflict\n                             # the behavior is undefined\n\nuint32 height                # image height, that is, number of rows\nuint32 width                 # image width, that is, number of columns\n\n# The legal values for encoding are in file include/sensor_msgs/image_encodings.hpp\n# If you want to standardize a new string format, join\n# ros-users@lists.ros.org and send an email proposing a new encoding.\n\nstring encoding       # Encoding of pixels -- channel meaning, ordering, size\n                      # taken from the list of strings in include/sensor_msgs/image_encodings.hpp\n\nuint8 is_bigendian    # is this data bigendian?\nuint32 step           # Full row length in bytes\nuint8[] data          # actual matrix data, size is (step * rows)\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "int32 CIRCLE=0\nint32 LINE_STRIP=1\nint32 LINE_LIST=2\nint32 POLYGON=3\nint32 POINTS=4\n\nint32 ADD=0\nint32 REMOVE=1\n\nstd_msgs/Header header\n# Namespace which is used with the id to form a unique id.\nstring ns\n# Unique id within the namespace.\nint32 id\n# One of the above types, e.g. CIRCLE, LINE_STRIP, etc.\nint32 type\n# Either ADD or REMOVE.\nint32 action\n# Two-dimensional coordinate position, in pixel-coordinates.\ngeometry_msgs/Point position\n# The scale of the object, e.g. the diameter for a CIRCLE.\nfloat32 scale\n# The outline color of the marker.\nstd_msgs/ColorRGBA outline_color\n# Whether or not to fill in the shape with color.\nuint8 filled\n# Fill color; in the range: [0.0-1.0]\nstd_msgs/ColorRGBA fill_color\n# How long the object should last before being automatically deleted.\n# 0 indicates forever.\nbuiltin_interfaces/Duration lifetime\n\n# Coordinates in 2D in pixel coords. Used for LINE_STRIP, LINE_LIST, POINTS, etc.\ngeometry_msgs/Point[] points\n# The color for each line, point, etc. in the points field.\nstd_msgs/ColorRGBA[] outline_colors\n\n================================================================================\nMSG: builtin_interfaces/Duration\n# Duration defines a period between two time points.\n# Messages of this datatype are of ROS Time following this design:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# Seconds component, range is valid over any possible int32 value.\nint32 sec\n\n# Nanoseconds component in the range of [0, 1e9).\nuint32 nanosec\n\n================================================================================\nMSG: std_msgs/ColorRGBA\nfloat32 r\nfloat32 g\nfloat32 b\nfloat32 a\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# failed to get full definition text for usr_msgs/msg/PolyDetections: //",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "# The time point at which this event occurred.\nuint64 timestamp\n\n# The id and label of this transition event.\nTransition transition\n\n# The starting state from which this event transitioned.\nState start_state\n\n# The end state of this transition event.\nState goal_state\n\n================================================================================\nMSG: lifecycle_msgs/State\n# Primary state definitions as depicted in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# These are the primary states. State changes can only be requested when the\n# node is in one of these states.\n\n# Indicates state has not yet been set.\nuint8 PRIMARY_STATE_UNKNOWN = 0\n\n# This is the life cycle state the node is in immediately after being\n# instantiated.\nuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\n# This state represents a node that is not currently performing any processing.\nuint8 PRIMARY_STATE_INACTIVE = 2\n\n# This is the main state of the node's life cycle. While in this state, the node\n# performs any processing, responds to service requests, reads and processes\n# data, produces output, etc.\nuint8 PRIMARY_STATE_ACTIVE = 3\n\n# The finalized state is the state in which the node ends immediately before\n# being destroyed.\nuint8 PRIMARY_STATE_FINALIZED = 4\n\n# Temporary intermediate states. When a transition is requested, the node\n# changes its state into one of these states.\n\n# In this transition state the node's onConfigure callback will be called to\n# allow the node to load its configuration and conduct any required setup.\nuint8 TRANSITION_STATE_CONFIGURING = 10\n\n# In this transition state the node's callback onCleanup will be called to clear\n# all state and return the node to a functionally equivalent state as when\n# first created.\nuint8 TRANSITION_STATE_CLEANINGUP = 11\n\n# In this transition state the callback onShutdown will be executed to do any\n# cleanup necessary before destruction.\nuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\n# In this transition state the callback onActivate will be executed to do any\n# final preparations to start executing.\nuint8 TRANSITION_STATE_ACTIVATING = 13\n\n# In this transition state the callback onDeactivate will be executed to do any\n# cleanup to start executing, and reverse the onActivate changes.\nuint8 TRANSITION_STATE_DEACTIVATING = 14\n\n# This transition state is where any error may be cleaned up.\nuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\n# The state id value from the above definitions.\nuint8 id\n\n# A text label of the state.\nstring label\n\n================================================================================\nMSG: lifecycle_msgs/Transition\n# Default values for transitions as described in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# Reserved [0-9], publicly available transitions.\n# When a node is in one of these primary states, these transitions can be\n# invoked.\n\n# This transition will instantiate the node, but will not run any code beyond\n# the constructor.\nuint8 TRANSITION_CREATE = 0\n\n# The node's onConfigure callback will be called to allow the node to load its\n# configuration and conduct any required setup.\nuint8 TRANSITION_CONFIGURE = 1\n\n# The node's callback onCleanup will be called in this transition to allow the\n# node to load its configuration and conduct any required setup.\nuint8 TRANSITION_CLEANUP = 2\n\n# The node's callback onActivate will be executed to do any final preparations\n# to start executing.\nuint8 TRANSITION_ACTIVATE = 3\n\n# The node's callback onDeactivate will be executed to do any cleanup to start\n# executing, and reverse the onActivate changes.\nuint8 TRANSITION_DEACTIVATE = 4\n\n# This signals shutdown during an unconfigured state, the node's callback\n# onShutdown will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\n# This signals shutdown during an inactive state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\n# This signals shutdown during an active state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\n# This transition will simply cause the deallocation of the node.\nuint8 TRANSITION_DESTROY = 8\n\n# Reserved [10-69], private transitions\n# These transitions are not publicly available and cannot be invoked by a user.\n# The following transitions are implicitly invoked based on the callback\n# feedback of the intermediate transition states.\nuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\nuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\nuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\nuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\nuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\nuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\nuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\nuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\nuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\nuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\nuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\nuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\nuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\nuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\nuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\nuint8 TRANSITION_ON_ERROR_SUCCESS = 60\nuint8 TRANSITION_ON_ERROR_FAILURE = 61\nuint8 TRANSITION_ON_ERROR_ERROR = 62\n\n# Reserved [90-99]. Transition callback success values.\n# These return values ought to be set as a return value for each callback.\n# Depending on which return value, the transition will be executed correctly or\n# fallback/error callbacks will be triggered.\n\n# The transition callback successfully performed its required functionality.\nuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\n# The transition callback failed to perform its required functionality.\nuint8 TRANSITION_CALLBACK_FAILURE = 98\n\n# The transition callback encountered an error that requires special cleanup, if\n# possible.\nuint8 TRANSITION_CALLBACK_ERROR = 99\n\n##\n## Fields\n##\n\n# The transition id from above definitions.\nuint8 id\n\n# A text label of the transition.\nstring label\n",
         "# The time point at which this event occurred.\nuint64 timestamp\n\n# The id and label of this transition event.\nTransition transition\n\n# The starting state from which this event transitioned.\nState start_state\n\n# The end state of this transition event.\nState goal_state\n\n================================================================================\nMSG: lifecycle_msgs/State\n# Primary state definitions as depicted in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# These are the primary states. State changes can only be requested when the\n# node is in one of these states.\n\n# Indicates state has not yet been set.\nuint8 PRIMARY_STATE_UNKNOWN = 0\n\n# This is the life cycle state the node is in immediately after being\n# instantiated.\nuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\n# This state represents a node that is not currently performing any processing.\nuint8 PRIMARY_STATE_INACTIVE = 2\n\n# This is the main state of the node's life cycle. While in this state, the node\n# performs any processing, responds to service requests, reads and processes\n# data, produces output, etc.\nuint8 PRIMARY_STATE_ACTIVE = 3\n\n# The finalized state is the state in which the node ends immediately before\n# being destroyed.\nuint8 PRIMARY_STATE_FINALIZED = 4\n\n# Temporary intermediate states. When a transition is requested, the node\n# changes its state into one of these states.\n\n# In this transition state the node's onConfigure callback will be called to\n# allow the node to load its configuration and conduct any required setup.\nuint8 TRANSITION_STATE_CONFIGURING = 10\n\n# In this transition state the node's callback onCleanup will be called to clear\n# all state and return the node to a functionally equivalent state as when\n# first created.\nuint8 TRANSITION_STATE_CLEANINGUP = 11\n\n# In this transition state the callback onShutdown will be executed to do any\n# cleanup necessary before destruction.\nuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\n# In this transition state the callback onActivate will be executed to do any\n# final preparations to start executing.\nuint8 TRANSITION_STATE_ACTIVATING = 13\n\n# In this transition state the callback onDeactivate will be executed to do any\n# cleanup to start executing, and reverse the onActivate changes.\nuint8 TRANSITION_STATE_DEACTIVATING = 14\n\n# This transition state is where any error may be cleaned up.\nuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\n# The state id value from the above definitions.\nuint8 id\n\n# A text label of the state.\nstring label\n\n================================================================================\nMSG: lifecycle_msgs/Transition\n# Default values for transitions as described in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# Reserved [0-9], publicly available transitions.\n# When a node is in one of these primary states, these transitions can be\n# invoked.\n\n# This transition will instantiate the node, but will not run any code beyond\n# the constructor.\nuint8 TRANSITION_CREATE = 0\n\n# The node's onConfigure callback will be called to allow the node to load its\n# configuration and conduct any required setup.\nuint8 TRANSITION_CONFIGURE = 1\n\n# The node's callback onCleanup will be called in this transition to allow the\n# node to load its configuration and conduct any required setup.\nuint8 TRANSITION_CLEANUP = 2\n\n# The node's callback onActivate will be executed to do any final preparations\n# to start executing.\nuint8 TRANSITION_ACTIVATE = 3\n\n# The node's callback onDeactivate will be executed to do any cleanup to start\n# executing, and reverse the onActivate changes.\nuint8 TRANSITION_DEACTIVATE = 4\n\n# This signals shutdown during an unconfigured state, the node's callback\n# onShutdown will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\n# This signals shutdown during an inactive state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\n# This signals shutdown during an active state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\n# This transition will simply cause the deallocation of the node.\nuint8 TRANSITION_DESTROY = 8\n\n# Reserved [10-69], private transitions\n# These transitions are not publicly available and cannot be invoked by a user.\n# The following transitions are implicitly invoked based on the callback\n# feedback of the intermediate transition states.\nuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\nuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\nuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\nuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\nuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\nuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\nuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\nuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\nuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\nuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\nuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\nuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\nuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\nuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\nuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\nuint8 TRANSITION_ON_ERROR_SUCCESS = 60\nuint8 TRANSITION_ON_ERROR_FAILURE = 61\nuint8 TRANSITION_ON_ERROR_ERROR = 62\n\n# Reserved [90-99]. Transition callback success values.\n# These return values ought to be set as a return value for each callback.\n# Depending on which return value, the transition will be executed correctly or\n# fallback/error callbacks will be triggered.\n\n# The transition callback successfully performed its required functionality.\nuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\n# The transition callback failed to perform its required functionality.\nuint8 TRANSITION_CALLBACK_FAILURE = 98\n\n# The transition callback encountered an error that requires special cleanup, if\n# possible.\nuint8 TRANSITION_CALLBACK_ERROR = 99\n\n##\n## Fields\n##\n\n# The transition id from above definitions.\nuint8 id\n\n# A text label of the transition.\nstring label\n",
         "# The time point at which this event occurred.\nuint64 timestamp\n\n# The id and label of this transition event.\nTransition transition\n\n# The starting state from which this event transitioned.\nState start_state\n\n# The end state of this transition event.\nState goal_state\n\n================================================================================\nMSG: lifecycle_msgs/State\n# Primary state definitions as depicted in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# These are the primary states. State changes can only be requested when the\n# node is in one of these states.\n\n# Indicates state has not yet been set.\nuint8 PRIMARY_STATE_UNKNOWN = 0\n\n# This is the life cycle state the node is in immediately after being\n# instantiated.\nuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\n# This state represents a node that is not currently performing any processing.\nuint8 PRIMARY_STATE_INACTIVE = 2\n\n# This is the main state of the node's life cycle. While in this state, the node\n# performs any processing, responds to service requests, reads and processes\n# data, produces output, etc.\nuint8 PRIMARY_STATE_ACTIVE = 3\n\n# The finalized state is the state in which the node ends immediately before\n# being destroyed.\nuint8 PRIMARY_STATE_FINALIZED = 4\n\n# Temporary intermediate states. When a transition is requested, the node\n# changes its state into one of these states.\n\n# In this transition state the node's onConfigure callback will be called to\n# allow the node to load its configuration and conduct any required setup.\nuint8 TRANSITION_STATE_CONFIGURING = 10\n\n# In this transition state the node's callback onCleanup will be called to clear\n# all state and return the node to a functionally equivalent state as when\n# first created.\nuint8 TRANSITION_STATE_CLEANINGUP = 11\n\n# In this transition state the callback onShutdown will be executed to do any\n# cleanup necessary before destruction.\nuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\n# In this transition state the callback onActivate will be executed to do any\n# final preparations to start executing.\nuint8 TRANSITION_STATE_ACTIVATING = 13\n\n# In this transition state the callback onDeactivate will be executed to do any\n# cleanup to start executing, and reverse the onActivate changes.\nuint8 TRANSITION_STATE_DEACTIVATING = 14\n\n# This transition state is where any error may be cleaned up.\nuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\n# The state id value from the above definitions.\nuint8 id\n\n# A text label of the state.\nstring label\n\n================================================================================\nMSG: lifecycle_msgs/Transition\n# Default values for transitions as described in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# Reserved [0-9], publicly available transitions.\n# When a node is in one of these primary states, these transitions can be\n# invoked.\n\n# This transition will instantiate the node, but will not run any code beyond\n# the constructor.\nuint8 TRANSITION_CREATE = 0\n\n# The node's onConfigure callback will be called to allow the node to load its\n# configuration and conduct any required setup.\nuint8 TRANSITION_CONFIGURE = 1\n\n# The node's callback onCleanup will be called in this transition to allow the\n# node to load its configuration and conduct any required setup.\nuint8 TRANSITION_CLEANUP = 2\n\n# The node's callback onActivate will be executed to do any final preparations\n# to start executing.\nuint8 TRANSITION_ACTIVATE = 3\n\n# The node's callback onDeactivate will be executed to do any cleanup to start\n# executing, and reverse the onActivate changes.\nuint8 TRANSITION_DEACTIVATE = 4\n\n# This signals shutdown during an unconfigured state, the node's callback\n# onShutdown will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\n# This signals shutdown during an inactive state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\n# This signals shutdown during an active state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\n# This transition will simply cause the deallocation of the node.\nuint8 TRANSITION_DESTROY = 8\n\n# Reserved [10-69], private transitions\n# These transitions are not publicly available and cannot be invoked by a user.\n# The following transitions are implicitly invoked based on the callback\n# feedback of the intermediate transition states.\nuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\nuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\nuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\nuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\nuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\nuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\nuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\nuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\nuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\nuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\nuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\nuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\nuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\nuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\nuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\nuint8 TRANSITION_ON_ERROR_SUCCESS = 60\nuint8 TRANSITION_ON_ERROR_FAILURE = 61\nuint8 TRANSITION_ON_ERROR_ERROR = 62\n\n# Reserved [90-99]. Transition callback success values.\n# These return values ought to be set as a return value for each callback.\n# Depending on which return value, the transition will be executed correctly or\n# fallback/error callbacks will be triggered.\n\n# The transition callback successfully performed its required functionality.\nuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\n# The transition callback failed to perform its required functionality.\nuint8 TRANSITION_CALLBACK_FAILURE = 98\n\n# The transition callback encountered an error that requires special cleanup, if\n# possible.\nuint8 TRANSITION_CALLBACK_ERROR = 99\n\n##\n## Fields\n##\n\n# The transition id from above definitions.\nuint8 id\n\n# A text label of the transition.\nstring label\n",
         "# The time point at which this event occurred.\nuint64 timestamp\n\n# The id and label of this transition event.\nTransition transition\n\n# The starting state from which this event transitioned.\nState start_state\n\n# The end state of this transition event.\nState goal_state\n\n================================================================================\nMSG: lifecycle_msgs/State\n# Primary state definitions as depicted in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# These are the primary states. State changes can only be requested when the\n# node is in one of these states.\n\n# Indicates state has not yet been set.\nuint8 PRIMARY_STATE_UNKNOWN = 0\n\n# This is the life cycle state the node is in immediately after being\n# instantiated.\nuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\n# This state represents a node that is not currently performing any processing.\nuint8 PRIMARY_STATE_INACTIVE = 2\n\n# This is the main state of the node's life cycle. While in this state, the node\n# performs any processing, responds to service requests, reads and processes\n# data, produces output, etc.\nuint8 PRIMARY_STATE_ACTIVE = 3\n\n# The finalized state is the state in which the node ends immediately before\n# being destroyed.\nuint8 PRIMARY_STATE_FINALIZED = 4\n\n# Temporary intermediate states. When a transition is requested, the node\n# changes its state into one of these states.\n\n# In this transition state the node's onConfigure callback will be called to\n# allow the node to load its configuration and conduct any required setup.\nuint8 TRANSITION_STATE_CONFIGURING = 10\n\n# In this transition state the node's callback onCleanup will be called to clear\n# all state and return the node to a functionally equivalent state as when\n# first created.\nuint8 TRANSITION_STATE_CLEANINGUP = 11\n\n# In this transition state the callback onShutdown will be executed to do any\n# cleanup necessary before destruction.\nuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\n# In this transition state the callback onActivate will be executed to do any\n# final preparations to start executing.\nuint8 TRANSITION_STATE_ACTIVATING = 13\n\n# In this transition state the callback onDeactivate will be executed to do any\n# cleanup to start executing, and reverse the onActivate changes.\nuint8 TRANSITION_STATE_DEACTIVATING = 14\n\n# This transition state is where any error may be cleaned up.\nuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\n# The state id value from the above definitions.\nuint8 id\n\n# A text label of the state.\nstring label\n\n================================================================================\nMSG: lifecycle_msgs/Transition\n# Default values for transitions as described in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# Reserved [0-9], publicly available transitions.\n# When a node is in one of these primary states, these transitions can be\n# invoked.\n\n# This transition will instantiate the node, but will not run any code beyond\n# the constructor.\nuint8 TRANSITION_CREATE = 0\n\n# The node's onConfigure callback will be called to allow the node to load its\n# configuration and conduct any required setup.\nuint8 TRANSITION_CONFIGURE = 1\n\n# The node's callback onCleanup will be called in this transition to allow the\n# node to load its configuration and conduct any required setup.\nuint8 TRANSITION_CLEANUP = 2\n\n# The node's callback onActivate will be executed to do any final preparations\n# to start executing.\nuint8 TRANSITION_ACTIVATE = 3\n\n# The node's callback onDeactivate will be executed to do any cleanup to start\n# executing, and reverse the onActivate changes.\nuint8 TRANSITION_DEACTIVATE = 4\n\n# This signals shutdown during an unconfigured state, the node's callback\n# onShutdown will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\n# This signals shutdown during an inactive state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\n# This signals shutdown during an active state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\n# This transition will simply cause the deallocation of the node.\nuint8 TRANSITION_DESTROY = 8\n\n# Reserved [10-69], private transitions\n# These transitions are not publicly available and cannot be invoked by a user.\n# The following transitions are implicitly invoked based on the callback\n# feedback of the intermediate transition states.\nuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\nuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\nuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\nuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\nuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\nuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\nuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\nuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\nuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\nuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\nuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\nuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\nuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\nuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\nuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\nuint8 TRANSITION_ON_ERROR_SUCCESS = 60\nuint8 TRANSITION_ON_ERROR_FAILURE = 61\nuint8 TRANSITION_ON_ERROR_ERROR = 62\n\n# Reserved [90-99]. Transition callback success values.\n# These return values ought to be set as a return value for each callback.\n# Depending on which return value, the transition will be executed correctly or\n# fallback/error callbacks will be triggered.\n\n# The transition callback successfully performed its required functionality.\nuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\n# The transition callback failed to perform its required functionality.\nuint8 TRANSITION_CALLBACK_FAILURE = 98\n\n# The transition callback encountered an error that requires special cleanup, if\n# possible.\nuint8 TRANSITION_CALLBACK_ERROR = 99\n\n##\n## Fields\n##\n\n# The transition id from above definitions.\nuint8 id\n\n# A text label of the transition.\nstring label\n",
         "# The time point at which this event occurred.\nuint64 timestamp\n\n# The id and label of this transition event.\nTransition transition\n\n# The starting state from which this event transitioned.\nState start_state\n\n# The end state of this transition event.\nState goal_state\n\n================================================================================\nMSG: lifecycle_msgs/State\n# Primary state definitions as depicted in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# These are the primary states. State changes can only be requested when the\n# node is in one of these states.\n\n# Indicates state has not yet been set.\nuint8 PRIMARY_STATE_UNKNOWN = 0\n\n# This is the life cycle state the node is in immediately after being\n# instantiated.\nuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\n# This state represents a node that is not currently performing any processing.\nuint8 PRIMARY_STATE_INACTIVE = 2\n\n# This is the main state of the node's life cycle. While in this state, the node\n# performs any processing, responds to service requests, reads and processes\n# data, produces output, etc.\nuint8 PRIMARY_STATE_ACTIVE = 3\n\n# The finalized state is the state in which the node ends immediately before\n# being destroyed.\nuint8 PRIMARY_STATE_FINALIZED = 4\n\n# Temporary intermediate states. When a transition is requested, the node\n# changes its state into one of these states.\n\n# In this transition state the node's onConfigure callback will be called to\n# allow the node to load its configuration and conduct any required setup.\nuint8 TRANSITION_STATE_CONFIGURING = 10\n\n# In this transition state the node's callback onCleanup will be called to clear\n# all state and return the node to a functionally equivalent state as when\n# first created.\nuint8 TRANSITION_STATE_CLEANINGUP = 11\n\n# In this transition state the callback onShutdown will be executed to do any\n# cleanup necessary before destruction.\nuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\n# In this transition state the callback onActivate will be executed to do any\n# final preparations to start executing.\nuint8 TRANSITION_STATE_ACTIVATING = 13\n\n# In this transition state the callback onDeactivate will be executed to do any\n# cleanup to start executing, and reverse the onActivate changes.\nuint8 TRANSITION_STATE_DEACTIVATING = 14\n\n# This transition state is where any error may be cleaned up.\nuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\n# The state id value from the above definitions.\nuint8 id\n\n# A text label of the state.\nstring label\n\n================================================================================\nMSG: lifecycle_msgs/Transition\n# Default values for transitions as described in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# Reserved [0-9], publicly available transitions.\n# When a node is in one of these primary states, these transitions can be\n# invoked.\n\n# This transition will instantiate the node, but will not run any code beyond\n# the constructor.\nuint8 TRANSITION_CREATE = 0\n\n# The node's onConfigure callback will be called to allow the node to load its\n# configuration and conduct any required setup.\nuint8 TRANSITION_CONFIGURE = 1\n\n# The node's callback onCleanup will be called in this transition to allow the\n# node to load its configuration and conduct any required setup.\nuint8 TRANSITION_CLEANUP = 2\n\n# The node's callback onActivate will be executed to do any final preparations\n# to start executing.\nuint8 TRANSITION_ACTIVATE = 3\n\n# The node's callback onDeactivate will be executed to do any cleanup to start\n# executing, and reverse the onActivate changes.\nuint8 TRANSITION_DEACTIVATE = 4\n\n# This signals shutdown during an unconfigured state, the node's callback\n# onShutdown will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\n# This signals shutdown during an inactive state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\n# This signals shutdown during an active state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\n# This transition will simply cause the deallocation of the node.\nuint8 TRANSITION_DESTROY = 8\n\n# Reserved [10-69], private transitions\n# These transitions are not publicly available and cannot be invoked by a user.\n# The following transitions are implicitly invoked based on the callback\n# feedback of the intermediate transition states.\nuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\nuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\nuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\nuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\nuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\nuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\nuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\nuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\nuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\nuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\nuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\nuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\nuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\nuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\nuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\nuint8 TRANSITION_ON_ERROR_SUCCESS = 60\nuint8 TRANSITION_ON_ERROR_FAILURE = 61\nuint8 TRANSITION_ON_ERROR_ERROR = 62\n\n# Reserved [90-99]. Transition callback success values.\n# These return values ought to be set as a return value for each callback.\n# Depending on which return value, the transition will be executed correctly or\n# fallback/error callbacks will be triggered.\n\n# The transition callback successfully performed its required functionality.\nuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\n# The transition callback failed to perform its required functionality.\nuint8 TRANSITION_CALLBACK_FAILURE = 98\n\n# The transition callback encountered an error that requires special cleanup, if\n# possible.\nuint8 TRANSITION_CALLBACK_ERROR = 99\n\n##\n## Fields\n##\n\n# The transition id from above definitions.\nuint8 id\n\n# A text label of the transition.\nstring label\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nstring data\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nstring data\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nstring data\n",
         "# A Pose with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPose pose\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "",
         "",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nstring data\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "# failed to get full definition text for usr_msgs/msg/General: //",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nfloat32 data\n",
         "# failed to get full definition text for usr_msgs/msg/EmergencyStop: //",
         "# failed to get full definition text for usr_msgs/msg/General: //",
         "# failed to get full definition text for usr_msgs/msg/BrakeStatus: //",
         "# The time point at which this event occurred.\nuint64 timestamp\n\n# The id and label of this transition event.\nTransition transition\n\n# The starting state from which this event transitioned.\nState start_state\n\n# The end state of this transition event.\nState goal_state\n\n================================================================================\nMSG: lifecycle_msgs/State\n# Primary state definitions as depicted in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# These are the primary states. State changes can only be requested when the\n# node is in one of these states.\n\n# Indicates state has not yet been set.\nuint8 PRIMARY_STATE_UNKNOWN = 0\n\n# This is the life cycle state the node is in immediately after being\n# instantiated.\nuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\n# This state represents a node that is not currently performing any processing.\nuint8 PRIMARY_STATE_INACTIVE = 2\n\n# This is the main state of the node's life cycle. While in this state, the node\n# performs any processing, responds to service requests, reads and processes\n# data, produces output, etc.\nuint8 PRIMARY_STATE_ACTIVE = 3\n\n# The finalized state is the state in which the node ends immediately before\n# being destroyed.\nuint8 PRIMARY_STATE_FINALIZED = 4\n\n# Temporary intermediate states. When a transition is requested, the node\n# changes its state into one of these states.\n\n# In this transition state the node's onConfigure callback will be called to\n# allow the node to load its configuration and conduct any required setup.\nuint8 TRANSITION_STATE_CONFIGURING = 10\n\n# In this transition state the node's callback onCleanup will be called to clear\n# all state and return the node to a functionally equivalent state as when\n# first created.\nuint8 TRANSITION_STATE_CLEANINGUP = 11\n\n# In this transition state the callback onShutdown will be executed to do any\n# cleanup necessary before destruction.\nuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\n# In this transition state the callback onActivate will be executed to do any\n# final preparations to start executing.\nuint8 TRANSITION_STATE_ACTIVATING = 13\n\n# In this transition state the callback onDeactivate will be executed to do any\n# cleanup to start executing, and reverse the onActivate changes.\nuint8 TRANSITION_STATE_DEACTIVATING = 14\n\n# This transition state is where any error may be cleaned up.\nuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\n# The state id value from the above definitions.\nuint8 id\n\n# A text label of the state.\nstring label\n\n================================================================================\nMSG: lifecycle_msgs/Transition\n# Default values for transitions as described in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# Reserved [0-9], publicly available transitions.\n# When a node is in one of these primary states, these transitions can be\n# invoked.\n\n# This transition will instantiate the node, but will not run any code beyond\n# the constructor.\nuint8 TRANSITION_CREATE = 0\n\n# The node's onConfigure callback will be called to allow the node to load its\n# configuration and conduct any required setup.\nuint8 TRANSITION_CONFIGURE = 1\n\n# The node's callback onCleanup will be called in this transition to allow the\n# node to load its configuration and conduct any required setup.\nuint8 TRANSITION_CLEANUP = 2\n\n# The node's callback onActivate will be executed to do any final preparations\n# to start executing.\nuint8 TRANSITION_ACTIVATE = 3\n\n# The node's callback onDeactivate will be executed to do any cleanup to start\n# executing, and reverse the onActivate changes.\nuint8 TRANSITION_DEACTIVATE = 4\n\n# This signals shutdown during an unconfigured state, the node's callback\n# onShutdown will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\n# This signals shutdown during an inactive state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\n# This signals shutdown during an active state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\n# This transition will simply cause the deallocation of the node.\nuint8 TRANSITION_DESTROY = 8\n\n# Reserved [10-69], private transitions\n# These transitions are not publicly available and cannot be invoked by a user.\n# The following transitions are implicitly invoked based on the callback\n# feedback of the intermediate transition states.\nuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\nuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\nuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\nuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\nuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\nuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\nuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\nuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\nuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\nuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\nuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\nuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\nuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\nuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\nuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\nuint8 TRANSITION_ON_ERROR_SUCCESS = 60\nuint8 TRANSITION_ON_ERROR_FAILURE = 61\nuint8 TRANSITION_ON_ERROR_ERROR = 62\n\n# Reserved [90-99]. Transition callback success values.\n# These return values ought to be set as a return value for each callback.\n# Depending on which return value, the transition will be executed correctly or\n# fallback/error callbacks will be triggered.\n\n# The transition callback successfully performed its required functionality.\nuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\n# The transition callback failed to perform its required functionality.\nuint8 TRANSITION_CALLBACK_FAILURE = 98\n\n# The transition callback encountered an error that requires special cleanup, if\n# possible.\nuint8 TRANSITION_CALLBACK_ERROR = 99\n\n##\n## Fields\n##\n\n# The transition id from above definitions.\nuint8 id\n\n# A text label of the transition.\nstring label\n",
         "# The time point at which this event occurred.\nuint64 timestamp\n\n# The id and label of this transition event.\nTransition transition\n\n# The starting state from which this event transitioned.\nState start_state\n\n# The end state of this transition event.\nState goal_state\n\n================================================================================\nMSG: lifecycle_msgs/State\n# Primary state definitions as depicted in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# These are the primary states. State changes can only be requested when the\n# node is in one of these states.\n\n# Indicates state has not yet been set.\nuint8 PRIMARY_STATE_UNKNOWN = 0\n\n# This is the life cycle state the node is in immediately after being\n# instantiated.\nuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\n# This state represents a node that is not currently performing any processing.\nuint8 PRIMARY_STATE_INACTIVE = 2\n\n# This is the main state of the node's life cycle. While in this state, the node\n# performs any processing, responds to service requests, reads and processes\n# data, produces output, etc.\nuint8 PRIMARY_STATE_ACTIVE = 3\n\n# The finalized state is the state in which the node ends immediately before\n# being destroyed.\nuint8 PRIMARY_STATE_FINALIZED = 4\n\n# Temporary intermediate states. When a transition is requested, the node\n# changes its state into one of these states.\n\n# In this transition state the node's onConfigure callback will be called to\n# allow the node to load its configuration and conduct any required setup.\nuint8 TRANSITION_STATE_CONFIGURING = 10\n\n# In this transition state the node's callback onCleanup will be called to clear\n# all state and return the node to a functionally equivalent state as when\n# first created.\nuint8 TRANSITION_STATE_CLEANINGUP = 11\n\n# In this transition state the callback onShutdown will be executed to do any\n# cleanup necessary before destruction.\nuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\n# In this transition state the callback onActivate will be executed to do any\n# final preparations to start executing.\nuint8 TRANSITION_STATE_ACTIVATING = 13\n\n# In this transition state the callback onDeactivate will be executed to do any\n# cleanup to start executing, and reverse the onActivate changes.\nuint8 TRANSITION_STATE_DEACTIVATING = 14\n\n# This transition state is where any error may be cleaned up.\nuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\n# The state id value from the above definitions.\nuint8 id\n\n# A text label of the state.\nstring label\n\n================================================================================\nMSG: lifecycle_msgs/Transition\n# Default values for transitions as described in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# Reserved [0-9], publicly available transitions.\n# When a node is in one of these primary states, these transitions can be\n# invoked.\n\n# This transition will instantiate the node, but will not run any code beyond\n# the constructor.\nuint8 TRANSITION_CREATE = 0\n\n# The node's onConfigure callback will be called to allow the node to load its\n# configuration and conduct any required setup.\nuint8 TRANSITION_CONFIGURE = 1\n\n# The node's callback onCleanup will be called in this transition to allow the\n# node to load its configuration and conduct any required setup.\nuint8 TRANSITION_CLEANUP = 2\n\n# The node's callback onActivate will be executed to do any final preparations\n# to start executing.\nuint8 TRANSITION_ACTIVATE = 3\n\n# The node's callback onDeactivate will be executed to do any cleanup to start\n# executing, and reverse the onActivate changes.\nuint8 TRANSITION_DEACTIVATE = 4\n\n# This signals shutdown during an unconfigured state, the node's callback\n# onShutdown will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\n# This signals shutdown during an inactive state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\n# This signals shutdown during an active state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\n# This transition will simply cause the deallocation of the node.\nuint8 TRANSITION_DESTROY = 8\n\n# Reserved [10-69], private transitions\n# These transitions are not publicly available and cannot be invoked by a user.\n# The following transitions are implicitly invoked based on the callback\n# feedback of the intermediate transition states.\nuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\nuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\nuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\nuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\nuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\nuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\nuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\nuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\nuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\nuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\nuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\nuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\nuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\nuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\nuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\nuint8 TRANSITION_ON_ERROR_SUCCESS = 60\nuint8 TRANSITION_ON_ERROR_FAILURE = 61\nuint8 TRANSITION_ON_ERROR_ERROR = 62\n\n# Reserved [90-99]. Transition callback success values.\n# These return values ought to be set as a return value for each callback.\n# Depending on which return value, the transition will be executed correctly or\n# fallback/error callbacks will be triggered.\n\n# The transition callback successfully performed its required functionality.\nuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\n# The transition callback failed to perform its required functionality.\nuint8 TRANSITION_CALLBACK_FAILURE = 98\n\n# The transition callback encountered an error that requires special cleanup, if\n# possible.\nuint8 TRANSITION_CALLBACK_ERROR = 99\n\n##\n## Fields\n##\n\n# The transition id from above definitions.\nuint8 id\n\n# A text label of the transition.\nstring label\n",
         "std_msgs/Header header\n# Setting speed limit in percentage if true or in absolute values in false case\nbool percentage\n# Maximum allowed speed (in percent of maximum robot speed or in m/s depending\n# on \"percentage\" value). When no-limit it is set to 0.0\nfloat64 speed_limit\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "geometry_msgs/TransformStamped[] transforms\n\n================================================================================\nMSG: geometry_msgs/TransformStamped\n# This expresses a transform from coordinate frame header.frame_id\n# to the coordinate frame child_frame_id at the time of header.stamp\n#\n# This message is mostly used by the\n# <a href=\"https://index.ros.org/p/tf2/\">tf2</a> package.\n# See its documentation for more information.\n#\n# The child_frame_id is necessary in addition to the frame_id\n# in the Header to communicate the full reference for the transform\n# in a self contained message.\n\n# The frame id in the header is used as the reference frame of this transform.\nstd_msgs/Header header\n\n# The frame id of the child frame to which this transform points.\nstring child_frame_id\n\n# Translation and rotation in 3-dimensions of child_frame_id from header.frame_id.\nTransform transform\n\n================================================================================\nMSG: geometry_msgs/Transform\n# This represents the transform between two coordinate frames in free space.\n\nVector3 translation\nQuaternion rotation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space.\n\n# This is semantically different than a point.\n# A vector is always anchored at the origin.\n# When a transform is applied to a vector, only the rotational component is applied.\n\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "",
         "# failed to get full definition text for usr_msgs/msg/Sensors: //",
         "# Single range reading from an active ranger that emits energy and reports\n# one range reading that is valid along an arc at the distance measured.\n# This message is  not appropriate for laser scanners. See the LaserScan\n# message if you are working with a laser scanner.\n#\n# This message also can represent a fixed-distance (binary) ranger.  This\n# sensor will have min_range===max_range===distance of detection.\n# These sensors follow REP 117 and will output -Inf if the object is detected\n# and +Inf if the object is outside of the detection range.\n\nstd_msgs/Header header # timestamp in the header is the time the ranger\n                             # returned the distance reading\n\n# Radiation type enums\n# If you want a value added to this list, send an email to the ros-users list\nuint8 ULTRASOUND=0\nuint8 INFRARED=1\n\nuint8 radiation_type    # the type of radiation used by the sensor\n                        # (sound, IR, etc) [enum]\n\nfloat32 field_of_view   # the size of the arc that the distance reading is\n                        # valid for [rad]\n                        # the object causing the range reading may have\n                        # been anywhere within -field_of_view/2 and\n                        # field_of_view/2 at the measured range.\n                        # 0 angle corresponds to the x-axis of the sensor.\n\nfloat32 min_range       # minimum range value [m]\nfloat32 max_range       # maximum range value [m]\n                        # Fixed distance rangers require min_range==max_range\n\nfloat32 range           # range data [m]\n                        # (Note: values < range_min or > range_max should be discarded)\n                        # Fixed distance rangers only output -Inf or +Inf.\n                        # -Inf represents a detection within fixed distance.\n                        # (Detection too close to the sensor to quantify)\n                        # +Inf represents no detection within the fixed distance.\n                        # (Object out of range)\n\nfloat32 variance        # variance of the range sensor\n                        # 0 is interpreted as variance unknown\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# Single range reading from an active ranger that emits energy and reports\n# one range reading that is valid along an arc at the distance measured.\n# This message is  not appropriate for laser scanners. See the LaserScan\n# message if you are working with a laser scanner.\n#\n# This message also can represent a fixed-distance (binary) ranger.  This\n# sensor will have min_range===max_range===distance of detection.\n# These sensors follow REP 117 and will output -Inf if the object is detected\n# and +Inf if the object is outside of the detection range.\n\nstd_msgs/Header header # timestamp in the header is the time the ranger\n                             # returned the distance reading\n\n# Radiation type enums\n# If you want a value added to this list, send an email to the ros-users list\nuint8 ULTRASOUND=0\nuint8 INFRARED=1\n\nuint8 radiation_type    # the type of radiation used by the sensor\n                        # (sound, IR, etc) [enum]\n\nfloat32 field_of_view   # the size of the arc that the distance reading is\n                        # valid for [rad]\n                        # the object causing the range reading may have\n                        # been anywhere within -field_of_view/2 and\n                        # field_of_view/2 at the measured range.\n                        # 0 angle corresponds to the x-axis of the sensor.\n\nfloat32 min_range       # minimum range value [m]\nfloat32 max_range       # maximum range value [m]\n                        # Fixed distance rangers require min_range==max_range\n\nfloat32 range           # range data [m]\n                        # (Note: values < range_min or > range_max should be discarded)\n                        # Fixed distance rangers only output -Inf or +Inf.\n                        # -Inf represents a detection within fixed distance.\n                        # (Detection too close to the sensor to quantify)\n                        # +Inf represents no detection within the fixed distance.\n                        # (Object out of range)\n\nfloat32 variance        # variance of the range sensor\n                        # 0 is interpreted as variance unknown\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# Single range reading from an active ranger that emits energy and reports\n# one range reading that is valid along an arc at the distance measured.\n# This message is  not appropriate for laser scanners. See the LaserScan\n# message if you are working with a laser scanner.\n#\n# This message also can represent a fixed-distance (binary) ranger.  This\n# sensor will have min_range===max_range===distance of detection.\n# These sensors follow REP 117 and will output -Inf if the object is detected\n# and +Inf if the object is outside of the detection range.\n\nstd_msgs/Header header # timestamp in the header is the time the ranger\n                             # returned the distance reading\n\n# Radiation type enums\n# If you want a value added to this list, send an email to the ros-users list\nuint8 ULTRASOUND=0\nuint8 INFRARED=1\n\nuint8 radiation_type    # the type of radiation used by the sensor\n                        # (sound, IR, etc) [enum]\n\nfloat32 field_of_view   # the size of the arc that the distance reading is\n                        # valid for [rad]\n                        # the object causing the range reading may have\n                        # been anywhere within -field_of_view/2 and\n                        # field_of_view/2 at the measured range.\n                        # 0 angle corresponds to the x-axis of the sensor.\n\nfloat32 min_range       # minimum range value [m]\nfloat32 max_range       # maximum range value [m]\n                        # Fixed distance rangers require min_range==max_range\n\nfloat32 range           # range data [m]\n                        # (Note: values < range_min or > range_max should be discarded)\n                        # Fixed distance rangers only output -Inf or +Inf.\n                        # -Inf represents a detection within fixed distance.\n                        # (Detection too close to the sensor to quantify)\n                        # +Inf represents no detection within the fixed distance.\n                        # (Object out of range)\n\nfloat32 variance        # variance of the range sensor\n                        # 0 is interpreted as variance unknown\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# Single range reading from an active ranger that emits energy and reports\n# one range reading that is valid along an arc at the distance measured.\n# This message is  not appropriate for laser scanners. See the LaserScan\n# message if you are working with a laser scanner.\n#\n# This message also can represent a fixed-distance (binary) ranger.  This\n# sensor will have min_range===max_range===distance of detection.\n# These sensors follow REP 117 and will output -Inf if the object is detected\n# and +Inf if the object is outside of the detection range.\n\nstd_msgs/Header header # timestamp in the header is the time the ranger\n                             # returned the distance reading\n\n# Radiation type enums\n# If you want a value added to this list, send an email to the ros-users list\nuint8 ULTRASOUND=0\nuint8 INFRARED=1\n\nuint8 radiation_type    # the type of radiation used by the sensor\n                        # (sound, IR, etc) [enum]\n\nfloat32 field_of_view   # the size of the arc that the distance reading is\n                        # valid for [rad]\n                        # the object causing the range reading may have\n                        # been anywhere within -field_of_view/2 and\n                        # field_of_view/2 at the measured range.\n                        # 0 angle corresponds to the x-axis of the sensor.\n\nfloat32 min_range       # minimum range value [m]\nfloat32 max_range       # maximum range value [m]\n                        # Fixed distance rangers require min_range==max_range\n\nfloat32 range           # range data [m]\n                        # (Note: values < range_min or > range_max should be discarded)\n                        # Fixed distance rangers only output -Inf or +Inf.\n                        # -Inf represents a detection within fixed distance.\n                        # (Detection too close to the sensor to quantify)\n                        # +Inf represents no detection within the fixed distance.\n                        # (Object out of range)\n\nfloat32 variance        # variance of the range sensor\n                        # 0 is interpreted as variance unknown\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# Single range reading from an active ranger that emits energy and reports\n# one range reading that is valid along an arc at the distance measured.\n# This message is  not appropriate for laser scanners. See the LaserScan\n# message if you are working with a laser scanner.\n#\n# This message also can represent a fixed-distance (binary) ranger.  This\n# sensor will have min_range===max_range===distance of detection.\n# These sensors follow REP 117 and will output -Inf if the object is detected\n# and +Inf if the object is outside of the detection range.\n\nstd_msgs/Header header # timestamp in the header is the time the ranger\n                             # returned the distance reading\n\n# Radiation type enums\n# If you want a value added to this list, send an email to the ros-users list\nuint8 ULTRASOUND=0\nuint8 INFRARED=1\n\nuint8 radiation_type    # the type of radiation used by the sensor\n                        # (sound, IR, etc) [enum]\n\nfloat32 field_of_view   # the size of the arc that the distance reading is\n                        # valid for [rad]\n                        # the object causing the range reading may have\n                        # been anywhere within -field_of_view/2 and\n                        # field_of_view/2 at the measured range.\n                        # 0 angle corresponds to the x-axis of the sensor.\n\nfloat32 min_range       # minimum range value [m]\nfloat32 max_range       # maximum range value [m]\n                        # Fixed distance rangers require min_range==max_range\n\nfloat32 range           # range data [m]\n                        # (Note: values < range_min or > range_max should be discarded)\n                        # Fixed distance rangers only output -Inf or +Inf.\n                        # -Inf represents a detection within fixed distance.\n                        # (Detection too close to the sensor to quantify)\n                        # +Inf represents no detection within the fixed distance.\n                        # (Object out of range)\n\nfloat32 variance        # variance of the range sensor\n                        # 0 is interpreted as variance unknown\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# Single range reading from an active ranger that emits energy and reports\n# one range reading that is valid along an arc at the distance measured.\n# This message is  not appropriate for laser scanners. See the LaserScan\n# message if you are working with a laser scanner.\n#\n# This message also can represent a fixed-distance (binary) ranger.  This\n# sensor will have min_range===max_range===distance of detection.\n# These sensors follow REP 117 and will output -Inf if the object is detected\n# and +Inf if the object is outside of the detection range.\n\nstd_msgs/Header header # timestamp in the header is the time the ranger\n                             # returned the distance reading\n\n# Radiation type enums\n# If you want a value added to this list, send an email to the ros-users list\nuint8 ULTRASOUND=0\nuint8 INFRARED=1\n\nuint8 radiation_type    # the type of radiation used by the sensor\n                        # (sound, IR, etc) [enum]\n\nfloat32 field_of_view   # the size of the arc that the distance reading is\n                        # valid for [rad]\n                        # the object causing the range reading may have\n                        # been anywhere within -field_of_view/2 and\n                        # field_of_view/2 at the measured range.\n                        # 0 angle corresponds to the x-axis of the sensor.\n\nfloat32 min_range       # minimum range value [m]\nfloat32 max_range       # maximum range value [m]\n                        # Fixed distance rangers require min_range==max_range\n\nfloat32 range           # range data [m]\n                        # (Note: values < range_min or > range_max should be discarded)\n                        # Fixed distance rangers only output -Inf or +Inf.\n                        # -Inf represents a detection within fixed distance.\n                        # (Detection too close to the sensor to quantify)\n                        # +Inf represents no detection within the fixed distance.\n                        # (Object out of range)\n\nfloat32 variance        # variance of the range sensor\n                        # 0 is interpreted as variance unknown\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# Single range reading from an active ranger that emits energy and reports\n# one range reading that is valid along an arc at the distance measured.\n# This message is  not appropriate for laser scanners. See the LaserScan\n# message if you are working with a laser scanner.\n#\n# This message also can represent a fixed-distance (binary) ranger.  This\n# sensor will have min_range===max_range===distance of detection.\n# These sensors follow REP 117 and will output -Inf if the object is detected\n# and +Inf if the object is outside of the detection range.\n\nstd_msgs/Header header # timestamp in the header is the time the ranger\n                             # returned the distance reading\n\n# Radiation type enums\n# If you want a value added to this list, send an email to the ros-users list\nuint8 ULTRASOUND=0\nuint8 INFRARED=1\n\nuint8 radiation_type    # the type of radiation used by the sensor\n                        # (sound, IR, etc) [enum]\n\nfloat32 field_of_view   # the size of the arc that the distance reading is\n                        # valid for [rad]\n                        # the object causing the range reading may have\n                        # been anywhere within -field_of_view/2 and\n                        # field_of_view/2 at the measured range.\n                        # 0 angle corresponds to the x-axis of the sensor.\n\nfloat32 min_range       # minimum range value [m]\nfloat32 max_range       # maximum range value [m]\n                        # Fixed distance rangers require min_range==max_range\n\nfloat32 range           # range data [m]\n                        # (Note: values < range_min or > range_max should be discarded)\n                        # Fixed distance rangers only output -Inf or +Inf.\n                        # -Inf represents a detection within fixed distance.\n                        # (Detection too close to the sensor to quantify)\n                        # +Inf represents no detection within the fixed distance.\n                        # (Object out of range)\n\nfloat32 variance        # variance of the range sensor\n                        # 0 is interpreted as variance unknown\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "geometry_msgs/TransformStamped[] transforms\n\n================================================================================\nMSG: geometry_msgs/TransformStamped\n# This expresses a transform from coordinate frame header.frame_id\n# to the coordinate frame child_frame_id at the time of header.stamp\n#\n# This message is mostly used by the\n# <a href=\"https://index.ros.org/p/tf2/\">tf2</a> package.\n# See its documentation for more information.\n#\n# The child_frame_id is necessary in addition to the frame_id\n# in the Header to communicate the full reference for the transform\n# in a self contained message.\n\n# The frame id in the header is used as the reference frame of this transform.\nstd_msgs/Header header\n\n# The frame id of the child frame to which this transform points.\nstring child_frame_id\n\n# Translation and rotation in 3-dimensions of child_frame_id from header.frame_id.\nTransform transform\n\n================================================================================\nMSG: geometry_msgs/Transform\n# This represents the transform between two coordinate frames in free space.\n\nVector3 translation\nQuaternion rotation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space.\n\n# This is semantically different than a point.\n# A vector is always anchored at the origin.\n# When a transform is applied to a vector, only the rotational component is applied.\n\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# A list of 2D detections, for a multi-object 2D detector.\n\nstd_msgs/Header header\n\n# A list of the detected proposals. A multi-proposal detector might generate\n#   this list with many candidate detections generated from a single input.\nDetection2D[] detections\n\n================================================================================\nMSG: vision_msgs/Detection2D\n# Defines a 2D detection result.\n#\n# This is similar to a 2D classification, but includes position information,\n#   allowing a classification result for a specific crop or image point to\n#   to be located in the larger image.\n\nstd_msgs/Header header\n\n# Class probabilities\nObjectHypothesisWithPose[] results\n\n# 2D bounding box surrounding the object.\nBoundingBox2D bbox\n\n# ID used for consistency across multiple detection messages. Detections\n# of the same object in different detection messages should have the same id.\n# This field may be empty.\nstring id\n\n# Source data that generated this detection are not a part of the message.\n# If you need to access them, use an exact or approximate time synchronizer in\n# your code, as this message's header should match the header of the source\n# data.\n\n================================================================================\nMSG: vision_msgs/BoundingBox2D\n# A 2D bounding box that can be rotated about its center.\n# All dimensions are in pixels, but represented using floating-point\n#   values to allow sub-pixel precision. If an exact pixel crop is required\n#   for a rotated bounding box, it can be calculated using Bresenham's line\n#   algorithm.\n\n# The 2D position (in pixels) and orientation of the bounding box center.\nvision_msgs/Pose2D center\n\n# The total size (in pixels) of the bounding box surrounding the object relative\n#   to the pose of its center.\nfloat64 size_x\nfloat64 size_y\n\n================================================================================\nMSG: vision_msgs/Pose2D\n# Represents a 2D pose (coordinates and a radian rotation). Rotation is positive counterclockwise.\n\nvision_msgs/Point2D position\nfloat64 theta\n\n================================================================================\nMSG: vision_msgs/Point2D\n# Represents a 2D point in pixel coordinates.\n# XY matches the sensor_msgs/Image convention: X is positive right and Y is positive down.\n\nfloat64 x\nfloat64 y\n\n================================================================================\nMSG: vision_msgs/ObjectHypothesisWithPose\n# An object hypothesis that contains pose information.\n# If you would like to define an array of ObjectHypothesisWithPose messages,\n#   please see the Detection2D or Detection3D message types.\n\n# The object hypothesis (ID and score).\nObjectHypothesis hypothesis\n\n# The 6D pose of the object hypothesis. This pose should be\n#   defined as the pose of some fixed reference point on the object, such as\n#   the geometric center of the bounding box, the center of mass of the\n#   object or the origin of a reference mesh of the object.\n# Note that this pose is not stamped; frame information can be defined by\n#   parent messages.\n# Also note that different classes predicted for the same input data may have\n#   different predicted 6D poses.\ngeometry_msgs/PoseWithCovariance pose\n\n================================================================================\nMSG: geometry_msgs/PoseWithCovariance\n# This represents a pose in free space with uncertainty.\n\nPose pose\n\n# Row-major representation of the 6x6 covariance matrix\n# The orientation parameters use a fixed-axis representation.\n# In order, the parameters are:\n# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\nfloat64[36] covariance\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: vision_msgs/ObjectHypothesis\n# An object hypothesis that contains no pose information.\n# If you would like to define an array of ObjectHypothesis messages,\n#   please see the Classification message type.\n\n# The unique ID of the object class. To get additional information about\n#   this ID, such as its human-readable class name, listeners should perform a\n#   lookup in a metadata database. See vision_msgs/VisionInfo.msg for more detail.\nstring class_id\n\n# The probability or confidence value of the detected object. By convention,\n#   this value should lie in the range [0-1].\nfloat64 score\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "Marker[] markers\n\n================================================================================\nMSG: visualization_msgs/Marker\n# See:\n#  - http://www.ros.org/wiki/rviz/DisplayTypes/Marker\n#  - http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes\n#\n# for more information on using this message with rviz.\n\nint32 ARROW=0\nint32 CUBE=1\nint32 SPHERE=2\nint32 CYLINDER=3\nint32 LINE_STRIP=4\nint32 LINE_LIST=5\nint32 CUBE_LIST=6\nint32 SPHERE_LIST=7\nint32 POINTS=8\nint32 TEXT_VIEW_FACING=9\nint32 MESH_RESOURCE=10\nint32 TRIANGLE_LIST=11\n\nint32 ADD=0\nint32 MODIFY=0\nint32 DELETE=2\nint32 DELETEALL=3\n\n# Header for timestamp and frame id.\nstd_msgs/Header header\n# Namespace in which to place the object.\n# Used in conjunction with id to create a unique name for the object.\nstring ns\n# Object ID used in conjunction with the namespace for manipulating and deleting the object later.\nint32 id\n# Type of object.\nint32 type\n# Action to take; one of:\n#  - 0 add/modify an object\n#  - 1 (deprecated)\n#  - 2 deletes an object (with the given ns and id)\n#  - 3 deletes all objects (or those with the given ns if any)\nint32 action\n# Pose of the object with respect the frame_id specified in the header.\ngeometry_msgs/Pose pose\n# Scale of the object; 1,1,1 means default (usually 1 meter square).\ngeometry_msgs/Vector3 scale\n# Color of the object; in the range: [0.0-1.0]\nstd_msgs/ColorRGBA color\n# How long the object should last before being automatically deleted.\n# 0 indicates forever.\nbuiltin_interfaces/Duration lifetime\n# If this marker should be frame-locked, i.e. retransformed into its frame every timestep.\nbool frame_locked\n\n# Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, etc.)\ngeometry_msgs/Point[] points\n# Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, etc.)\n# The number of colors provided must either be 0 or equal to the number of points provided.\n# NOTE: alpha is not yet used\nstd_msgs/ColorRGBA[] colors\n\n# Texture resource is a special URI that can either reference a texture file in\n# a format acceptable to (resource retriever)[https://index.ros.org/p/resource_retriever/]\n# or an embedded texture via a string matching the format:\n#   \"embedded://texture_name\"\nstring texture_resource\n# An image to be loaded into the rendering engine as the texture for this marker.\n# This will be used iff texture_resource is set to embedded.\nsensor_msgs/CompressedImage texture\n# Location of each vertex within the texture; in the range: [0.0-1.0]\nUVCoordinate[] uv_coordinates\n\n# Only used for text markers\nstring text\n\n# Only used for MESH_RESOURCE markers.\n# Similar to texture_resource, mesh_resource uses resource retriever to load a mesh.\n# Optionally, a mesh file can be sent in-message via the mesh_file field. If doing so,\n# use the following format for mesh_resource:\n#   \"embedded://mesh_name\"\nstring mesh_resource\nMeshFile mesh_file\nbool mesh_use_embedded_materials\n\n================================================================================\nMSG: visualization_msgs/MeshFile\n# Used to send raw mesh files.\n\n# The filename is used for both debug purposes and to provide a file extension\n# for whatever parser is used.\nstring filename\n\n# This stores the raw text of the mesh file.\nuint8[] data\n\n================================================================================\nMSG: visualization_msgs/UVCoordinate\n# Location of the pixel as a ratio of the width of a 2D texture.\n# Values should be in range: [0.0-1.0].\nfloat32 u\nfloat32 v\n\n================================================================================\nMSG: sensor_msgs/CompressedImage\n# This message contains a compressed image.\n\nstd_msgs/Header header # Header timestamp should be acquisition time of image\n                             # Header frame_id should be optical frame of camera\n                             # origin of frame should be optical center of cameara\n                             # +x should point to the right in the image\n                             # +y should point down in the image\n                             # +z should point into to plane of the image\n\nstring format                # Specifies the format of the data\n                             #   Acceptable values:\n                             #     jpeg, png, tiff\n\nuint8[] data                 # Compressed image buffer\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: builtin_interfaces/Duration\n# Duration defines a period between two time points.\n# Messages of this datatype are of ROS Time following this design:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# Seconds component, range is valid over any possible int32 value.\nint32 sec\n\n# Nanoseconds component in the range of [0, 1e9).\nuint32 nanosec\n\n================================================================================\nMSG: std_msgs/ColorRGBA\nfloat32 r\nfloat32 g\nfloat32 b\nfloat32 a\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space.\n\n# This is semantically different than a point.\n# A vector is always anchored at the origin.\n# When a transform is applied to a vector, only the rotational component is applied.\n\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# An array of poses that represents a Path for a robot to follow.\n\n# Indicates the frame_id of the path.\nstd_msgs/Header header\n\n# Array of poses to follow.\ngeometry_msgs/PoseStamped[] poses\n\n================================================================================\nMSG: geometry_msgs/PoseStamped\n# A Pose with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPose pose\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "## Message containing basic information of the each Board (Main, Rear, Chassis, LedScreen), this information is related to the Hardware revision version.\n# protocol_version  [uint8]: UAVCAN protocol version.\n# hardware_version  [uint8]: CMC version.\n# software_version  [uint8]: CMC software version.\n# chip_version      [uint8]: chip version\n\n# Chip versions:\nuint8 ATSAME70Q19A = 0x2\nuint8 ATSAME70Q19B = 0x3\nuint8 ATSAME70Q21A = 0x4\nuint8 ATSAME70Q21B = 0x5\nuint8 ATSAME70Q_ERROR1 = 0x8 # ( error please report immediately )\nuint8 ATSAME70Q_ERROR2 = 0x9\n\nuint8 protocol_version_major\nuint8 protocol_version_minor\nuint8 hardware_version_major\nuint8 hardware_version_minor\nuint8 software_version_major\nuint8 software_version_minor\nuint8 chip_version\n\n",
         "## Message containing the raw current for each motor.\n# header        [std_msgs/header]: Sequence and timestamp of the current message.\n# current_fr    [float32]: Frontal right wheel raw current value.\n# current_rr    [float32]: Rear right wheel raw current value.\n# current_rl    [float32]: Rear left wheel raw current value.\n# current_fl    [float32]: Frontal left wheel raw current value.\n\nstd_msgs/Header header\nfloat32 current_fr\nfloat32 current_rr\nfloat32 current_rl\nfloat32 current_fl\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# Message containing the error code for each wheel.\n# header    [std_msgs/header]: Sequence and timestamp of the current message.\n# error_fr  [uint8]: Frontal right wheel error code.\n# error_rr  [uint8]: Rear right wheel error code.\n# error_rl  [uint8]: Rear left wheel error code.\n# error_fl  [uint8]: Frontal left wheel error code.\n\nstd_msgs/Header header\n\n\nuint8 MOTORS_NO_ERROR = 0           # Motor without error\n# No blocking errors\nuint8 MOTORS_FREEZE=5               # Motor freeze\n# Blocking error\nuint8 MOTORS_ERROR_OVERCURRENT = 1  # Overcurrent error\nuint8 MOTORS_ERROR_ENCODER = 2      # Encoder error\nuint8 MOTORS_ERROR_STUCK = 3        # Motor stuck error\nuint8 MOTORS_OVERHEAT = 4           # Motor overheat\n\nuint8 error_fr\nuint8 error_rr\nuint8 error_rl\nuint8 error_fl\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# Message containing the RPM for each wheel\n# header [std_msgs/header]: Sequence and timestamp of the current message.\n# rpms_fr [float32]: Frontal right wheel RPM.\n# rpms_rr [float32]: Rear right wheel RPM.\n# rpms_rl [float32]: Rear left wheel RPM.\n# rpms_fl [float32]: Frontal left wheel RPM.\n\nstd_msgs/Header header\nfloat32 rpms_fr\nfloat32 rpms_rr\nfloat32 rpms_rl\nfloat32 rpms_fl\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# Message containing the RPM for each wheel\n# header [std_msgs/header]: Sequence and timestamp of the current message.\n# rpms_fr [float32]: Frontal right wheel RPM.\n# rpms_rr [float32]: Rear right wheel RPM.\n# rpms_rl [float32]: Rear left wheel RPM.\n# rpms_fl [float32]: Frontal left wheel RPM.\n\nstd_msgs/Header header\nfloat32 rpms_fr\nfloat32 rpms_rr\nfloat32 rpms_rl\nfloat32 rpms_fl\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "## Message containing the raw temperature for each motor.\n# header        [std_msgs/header]: Sequence and timestamp of the temperature message.\n# temperature_fr    [int16_t]: Frontal right wheel raw temperature value.\n# temperature_rr    [int16_t]: Rear right wheel raw temperature value.\n# temperature_rl    [int16_t]: Rear left wheel raw temperature value.\n# temperature_fl    [int16_t]: Frontal left wheel raw temperature value.\n# temperature_micro [int16_t]: microcontroller internal temperature value.\n\nstd_msgs/Header header\nint16 temperature_fr\nint16 temperature_rr\nint16 temperature_rl\nint16 temperature_fl\nint16 temperature_micro\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "## Message containing the PID values.\n# kp                [float32]: Proportional (Kp) current value.\n# ki                [float32]: Integral (Ki) current value.\n# kd                [float32]: Differential (Kd) current value.\n# integral_limit    [float32]: integral limit current value.\n\nfloat32 kp\nfloat32 ki\nfloat32 kd\nfloat32 integral_limit",
         "# Message containing the current state of some boards in real time.\n# header    [std_msgs/header]: Sequence and timestamp of the current message.\n# mode      [string]: Operational mode.\n# vssc      [string]: Vendor specific status code indicating, vary on each board.\n# health    [bool]: UNUSED. its health status should reflect the status of the worst-performing activity. However, this field isn't property implemented\n\n## Mode possible values:\nuint8 MODE_OPERATIONAL=0\nuint8 MODE_INITIALIZATION=1\nuint8 MODE_MAINTENANCE=2\nuint8 MODE_SOFTWARE_UPDATE=3\nuint8 MODE_BLUETOOTH=4\nuint8 MODE_UNKNOW=5\n\n## VSS posible values\nuint8 VSS_NO_INFO=0\n# Chassis board VSS\nuint8 VSS_CHASSIS_ARMED=1\nuint8 VSS_CHASSIS_DISARMED=2\n# REAR board constants\nuint8 VSS_REAR_DOOR_OPENED=0\nuint8 VSS_REAR_DOOR_OPENING=1\nuint8 VSS_REAR_DOOR_CLOSED=2\nuint8 VSS_REAR_DOOR_CLOSING=3\nuint8 VSS_REAR_DOOR_STALLED=4\n\nstd_msgs/Header header\nbool health\nuint8 mode\nuint8 vssc\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# Message containing the chassis test response.\n# severity [uint8]: Error severity.\n# motors_status [uint8]: Vector of error codes for each wheel.\n# battery_status [uint8]: Battery status.\n\nuint8 severity\nuint8[] motors_status\nuint8 battery_status",
         "### Message containing the Battery information from the BMS sensor\n### See more: https://www.notion.so/kiwi/Main-Board-5b541038634e4b84bd53c7e36d06e133#8eb72819f8c245b3b7ad4e65ee0c7786\n# bms_version: bms version \n# battery_status0: current battery state; charging, discharging, etc...\n# battery_status1: Only available for version 2.0+ -> open circuit, overvoltage, voltage too high, voltage too low, etc...\n# current: reported current of the robot (negative at discharge)\n# cell_number: number of battery cells\n# cell_voltage: voltage of each cell\n# voltage: total battery voltage\n# temperature: reported temperature of the battery\n# cycles: the current battery pack has been charged and discharged X times.\n# remaining: percentage of remaining battery\n# remaining_raw: raw remaining battery in voltage\n# total_capacity: total capacity of the battery\n# run_time_raw: remaining time to discharge the battery\n# run_time: remaining time to discharge the battery with the discharge safety\n# high_delta: high voltage variation\n# switch_state: status of the switch indicating charging allowed or not \n# balanced_state: unused\n\n\n## Version of the BMS\n\nfloat32 BMS_1_0 = 1.0   # Old bms version\nfloat32 BMS_2_0 = 2.0   # New bms version\n\nfloat32 bms_version\n\n## Another parameters\nbool[8] battery_status0\nbool[8] battery_status1\nfloat32 current\nuint8 cell_number\nuint64[] cell_voltage\nuint64 voltage\nint8 temperature\nuint16 cycles\nuint16 remaining\nuint16 remaining_raw\nuint16 total_capacity\nfloat32 run_time_raw\nfloat32 run_time\nbool high_delta\nuint8 switch_state\nuint8 balanced_state\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nstring data\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nfloat32 data\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nuint8 data\n",
         "## Message containing basic information of the each Board (Main, Rear, Chassis, LedScreen), this information is related to the Hardware revision version.\n# protocol_version  [uint8]: UAVCAN protocol version.\n# hardware_version  [uint8]: CMC version.\n# software_version  [uint8]: CMC software version.\n# chip_version      [uint8]: chip version\n\n# Chip versions:\nuint8 ATSAME70Q19A = 0x2\nuint8 ATSAME70Q19B = 0x3\nuint8 ATSAME70Q21A = 0x4\nuint8 ATSAME70Q21B = 0x5\nuint8 ATSAME70Q_ERROR1 = 0x8 # ( error please report immediately )\nuint8 ATSAME70Q_ERROR2 = 0x9\n\nuint8 protocol_version_major\nuint8 protocol_version_minor\nuint8 hardware_version_major\nuint8 hardware_version_minor\nuint8 software_version_major\nuint8 software_version_minor\nuint8 chip_version\n\n",
         "# action will have 4 possible values:\nuint8 TURN_OFF = 0\nuint8 TURN_ON = 1 # low_intensity is required\nuint8 BLINK = 2   # frequency is required\nuint8 FADE = 3    # frequency, low_intensity and high_intensity are required\n\nuint8 action \nuint16 period # Frequency as a time period\nuint8 low_intensity   # Initial intensity percentage\nuint8 high_intensity # Final High intensity percentage",
         "# Message containing the current state of some boards in real time.\n# header    [std_msgs/header]: Sequence and timestamp of the current message.\n# mode      [string]: Operational mode.\n# vssc      [string]: Vendor specific status code indicating, vary on each board.\n# health    [bool]: UNUSED. its health status should reflect the status of the worst-performing activity. However, this field isn't property implemented\n\n## Mode possible values:\nuint8 MODE_OPERATIONAL=0\nuint8 MODE_INITIALIZATION=1\nuint8 MODE_MAINTENANCE=2\nuint8 MODE_SOFTWARE_UPDATE=3\nuint8 MODE_BLUETOOTH=4\nuint8 MODE_UNKNOW=5\n\n## VSS posible values\nuint8 VSS_NO_INFO=0\n# Chassis board VSS\nuint8 VSS_CHASSIS_ARMED=1\nuint8 VSS_CHASSIS_DISARMED=2\n# REAR board constants\nuint8 VSS_REAR_DOOR_OPENED=0\nuint8 VSS_REAR_DOOR_OPENING=1\nuint8 VSS_REAR_DOOR_CLOSED=2\nuint8 VSS_REAR_DOOR_CLOSING=3\nuint8 VSS_REAR_DOOR_STALLED=4\n\nstd_msgs/Header header\nbool health\nuint8 mode\nuint8 vssc\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "# action will have 4 possible values:\nuint8 TURN_OFF = 0\nuint8 TURN_ON = 1 # low_intensity is required\nuint8 BLINK = 2   # frequency is required\nuint8 FADE = 3    # frequency, low_intensity and high_intensity are required\n\nuint8 action \nuint16 period # Frequency as a time period\nuint8 low_intensity   # Initial intensity percentage\nuint8 high_intensity # Final High intensity percentage",
         "## Message containing basic information of the each Board (Main, Rear, Chassis, LedScreen), this information is related to the Hardware revision version.\n# protocol_version  [uint8]: UAVCAN protocol version.\n# hardware_version  [uint8]: CMC version.\n# software_version  [uint8]: CMC software version.\n# chip_version      [uint8]: chip version\n\n# Chip versions:\nuint8 ATSAME70Q19A = 0x2\nuint8 ATSAME70Q19B = 0x3\nuint8 ATSAME70Q21A = 0x4\nuint8 ATSAME70Q21B = 0x5\nuint8 ATSAME70Q_ERROR1 = 0x8 # ( error please report immediately )\nuint8 ATSAME70Q_ERROR2 = 0x9\n\nuint8 protocol_version_major\nuint8 protocol_version_minor\nuint8 hardware_version_major\nuint8 hardware_version_minor\nuint8 software_version_major\nuint8 software_version_minor\nuint8 chip_version\n\n",
         "# action will have 4 possible values:\nuint8 TURN_OFF = 0\nuint8 TURN_ON = 1 # low_intensity is required\nuint8 BLINK = 2   # frequency is required\nuint8 FADE = 3    # frequency, low_intensity and high_intensity are required\n\nuint8 action \nuint16 period # Frequency as a time period\nuint8 low_intensity   # Initial intensity percentage\nuint8 high_intensity # Final High intensity percentage",
         "# Message containing information of the temperature and light sensor located in the rear board\n# header    [std_msgs/header]: Sequence and timestamp of the current message.\n# light     [float32]: light sensor measure\n# temp      [float32]: temperaute sensor measure\n\nstd_msgs/Header header\nfloat32 light\nfloat32 temp\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# Message containing the current state of some boards in real time.\n# header    [std_msgs/header]: Sequence and timestamp of the current message.\n# mode      [string]: Operational mode.\n# vssc      [string]: Vendor specific status code indicating, vary on each board.\n# health    [bool]: UNUSED. its health status should reflect the status of the worst-performing activity. However, this field isn't property implemented\n\n## Mode possible values:\nuint8 MODE_OPERATIONAL=0\nuint8 MODE_INITIALIZATION=1\nuint8 MODE_MAINTENANCE=2\nuint8 MODE_SOFTWARE_UPDATE=3\nuint8 MODE_BLUETOOTH=4\nuint8 MODE_UNKNOW=5\n\n## VSS posible values\nuint8 VSS_NO_INFO=0\n# Chassis board VSS\nuint8 VSS_CHASSIS_ARMED=1\nuint8 VSS_CHASSIS_DISARMED=2\n# REAR board constants\nuint8 VSS_REAR_DOOR_OPENED=0\nuint8 VSS_REAR_DOOR_OPENING=1\nuint8 VSS_REAR_DOOR_CLOSED=2\nuint8 VSS_REAR_DOOR_CLOSING=3\nuint8 VSS_REAR_DOOR_STALLED=4\n\nstd_msgs/Header header\nbool health\nuint8 mode\nuint8 vssc\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "## Message containing basic information of the each Board (Main, Rear, Chassis, LedScreen), this information is related to the Hardware revision version.\n# protocol_version  [uint8]: UAVCAN protocol version.\n# hardware_version  [uint8]: CMC version.\n# software_version  [uint8]: CMC software version.\n# chip_version      [uint8]: chip version\n\n# Chip versions:\nuint8 ATSAME70Q19A = 0x2\nuint8 ATSAME70Q19B = 0x3\nuint8 ATSAME70Q21A = 0x4\nuint8 ATSAME70Q21B = 0x5\nuint8 ATSAME70Q_ERROR1 = 0x8 # ( error please report immediately )\nuint8 ATSAME70Q_ERROR2 = 0x9\n\nuint8 protocol_version_major\nuint8 protocol_version_minor\nuint8 hardware_version_major\nuint8 hardware_version_minor\nuint8 software_version_major\nuint8 software_version_minor\nuint8 chip_version\n\n",
         "# Message containing information from Rx Wireless Comm module\n# status             [uint8]: Current status or error codes\n# voltage            [float32]: voltage in V\n# current            [float32]: current in A\n# temperature        [float32]: temperaute in \u00b0C\n\n# possible status values\nuint8 CHARGE_DISABLE=0x00\nuint8 STANDBY=0x01\nuint8 CHARGING=0x02\nuint8 RX_TOO_CLOSE=0x11\nuint8 OVER_VOLTAGE_FOD=0x12\nuint8 OVERCURRENT=0x13\nuint8 OVERTEMPERATURE=0x14\nuint8 OTHER=0x1F\nuint8 TX_IN_UNDERVOLTAGE=0x21\nuint8 TX_IN_OVERVOLTAGE=0x22\nuint8 TX_IN_OVERCURRENT=0x23\nuint8 TX_IN_OVERTEMPERATURE=0x24\nuint8 RX_UNDERVOLTAGE=0x25\nuint8 RX_OVERVOLTAGE=0x26\nuint8 RX_OVERCURRENT=0x27\nuint8 RX_OVERTEMPERATURE=0x28\nuint8 RX_BATTERY_FAULT=0x29\nuint8 RX_OFF=0x2A\nuint8 RX_STANDBY=0x2B\nuint8 RX_ILLEGAL=0x2C\nuint8 OTHER_FAULT=0x2F\n\n# ---\n\nuint8 status\nfloat32 voltage\nfloat32 current\nfloat32 temperature",
         "# Message containing the current state of some boards in real time.\n# header    [std_msgs/header]: Sequence and timestamp of the current message.\n# mode      [string]: Operational mode.\n# vssc      [string]: Vendor specific status code indicating, vary on each board.\n# health    [bool]: UNUSED. its health status should reflect the status of the worst-performing activity. However, this field isn't property implemented\n\n## Mode possible values:\nuint8 MODE_OPERATIONAL=0\nuint8 MODE_INITIALIZATION=1\nuint8 MODE_MAINTENANCE=2\nuint8 MODE_SOFTWARE_UPDATE=3\nuint8 MODE_BLUETOOTH=4\nuint8 MODE_UNKNOW=5\n\n## VSS posible values\nuint8 VSS_NO_INFO=0\n# Chassis board VSS\nuint8 VSS_CHASSIS_ARMED=1\nuint8 VSS_CHASSIS_DISARMED=2\n# REAR board constants\nuint8 VSS_REAR_DOOR_OPENED=0\nuint8 VSS_REAR_DOOR_OPENING=1\nuint8 VSS_REAR_DOOR_CLOSED=2\nuint8 VSS_REAR_DOOR_CLOSING=3\nuint8 VSS_REAR_DOOR_STALLED=4\n\nstd_msgs/Header header\nbool health\nuint8 mode\nuint8 vssc\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nuint8 data\n",
         "# left_eye      [Point]: X and Y coordinates for the left eye [0 to 64 for X] [0 to 32 for Y] \n# right_eye     [Point]: X and Y coordinates for the right eye [0 to 64 for X] [0 to 32 for Y] \n# Note: Z coordinate in both messages are no required.\n\ngeometry_msgs/Point left_eye\ngeometry_msgs/Point right_eye\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n",
         "## Message containing basic information of the each Board (Main, Rear, Chassis, LedScreen), this information is related to the Hardware revision version.\n# protocol_version  [uint8]: UAVCAN protocol version.\n# hardware_version  [uint8]: CMC version.\n# software_version  [uint8]: CMC software version.\n# chip_version      [uint8]: chip version\n\n# Chip versions:\nuint8 ATSAME70Q19A = 0x2\nuint8 ATSAME70Q19B = 0x3\nuint8 ATSAME70Q21A = 0x4\nuint8 ATSAME70Q21B = 0x5\nuint8 ATSAME70Q_ERROR1 = 0x8 # ( error please report immediately )\nuint8 ATSAME70Q_ERROR2 = 0x9\n\nuint8 protocol_version_major\nuint8 protocol_version_minor\nuint8 hardware_version_major\nuint8 hardware_version_minor\nuint8 software_version_major\nuint8 software_version_minor\nuint8 chip_version\n\n",
         "# Message containing the current state of some boards in real time.\n# header    [std_msgs/header]: Sequence and timestamp of the current message.\n# mode      [string]: Operational mode.\n# vssc      [string]: Vendor specific status code indicating, vary on each board.\n# health    [bool]: UNUSED. its health status should reflect the status of the worst-performing activity. However, this field isn't property implemented\n\n## Mode possible values:\nuint8 MODE_OPERATIONAL=0\nuint8 MODE_INITIALIZATION=1\nuint8 MODE_MAINTENANCE=2\nuint8 MODE_SOFTWARE_UPDATE=3\nuint8 MODE_BLUETOOTH=4\nuint8 MODE_UNKNOW=5\n\n## VSS posible values\nuint8 VSS_NO_INFO=0\n# Chassis board VSS\nuint8 VSS_CHASSIS_ARMED=1\nuint8 VSS_CHASSIS_DISARMED=2\n# REAR board constants\nuint8 VSS_REAR_DOOR_OPENED=0\nuint8 VSS_REAR_DOOR_OPENING=1\nuint8 VSS_REAR_DOOR_CLOSED=2\nuint8 VSS_REAR_DOOR_CLOSING=3\nuint8 VSS_REAR_DOOR_STALLED=4\n\nstd_msgs/Header header\nbool health\nuint8 mode\nuint8 vssc\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# An array of poses that represents a Path for a robot to follow.\n\n# Indicates the frame_id of the path.\nstd_msgs/Header header\n\n# Array of poses to follow.\ngeometry_msgs/PoseStamped[] poses\n\n================================================================================\nMSG: geometry_msgs/PoseStamped\n# A Pose with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPose pose\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# The time point at which this event occurred.\nuint64 timestamp\n\n# The id and label of this transition event.\nTransition transition\n\n# The starting state from which this event transitioned.\nState start_state\n\n# The end state of this transition event.\nState goal_state\n\n================================================================================\nMSG: lifecycle_msgs/State\n# Primary state definitions as depicted in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# These are the primary states. State changes can only be requested when the\n# node is in one of these states.\n\n# Indicates state has not yet been set.\nuint8 PRIMARY_STATE_UNKNOWN = 0\n\n# This is the life cycle state the node is in immediately after being\n# instantiated.\nuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\n# This state represents a node that is not currently performing any processing.\nuint8 PRIMARY_STATE_INACTIVE = 2\n\n# This is the main state of the node's life cycle. While in this state, the node\n# performs any processing, responds to service requests, reads and processes\n# data, produces output, etc.\nuint8 PRIMARY_STATE_ACTIVE = 3\n\n# The finalized state is the state in which the node ends immediately before\n# being destroyed.\nuint8 PRIMARY_STATE_FINALIZED = 4\n\n# Temporary intermediate states. When a transition is requested, the node\n# changes its state into one of these states.\n\n# In this transition state the node's onConfigure callback will be called to\n# allow the node to load its configuration and conduct any required setup.\nuint8 TRANSITION_STATE_CONFIGURING = 10\n\n# In this transition state the node's callback onCleanup will be called to clear\n# all state and return the node to a functionally equivalent state as when\n# first created.\nuint8 TRANSITION_STATE_CLEANINGUP = 11\n\n# In this transition state the callback onShutdown will be executed to do any\n# cleanup necessary before destruction.\nuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\n# In this transition state the callback onActivate will be executed to do any\n# final preparations to start executing.\nuint8 TRANSITION_STATE_ACTIVATING = 13\n\n# In this transition state the callback onDeactivate will be executed to do any\n# cleanup to start executing, and reverse the onActivate changes.\nuint8 TRANSITION_STATE_DEACTIVATING = 14\n\n# This transition state is where any error may be cleaned up.\nuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\n# The state id value from the above definitions.\nuint8 id\n\n# A text label of the state.\nstring label\n\n================================================================================\nMSG: lifecycle_msgs/Transition\n# Default values for transitions as described in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# Reserved [0-9], publicly available transitions.\n# When a node is in one of these primary states, these transitions can be\n# invoked.\n\n# This transition will instantiate the node, but will not run any code beyond\n# the constructor.\nuint8 TRANSITION_CREATE = 0\n\n# The node's onConfigure callback will be called to allow the node to load its\n# configuration and conduct any required setup.\nuint8 TRANSITION_CONFIGURE = 1\n\n# The node's callback onCleanup will be called in this transition to allow the\n# node to load its configuration and conduct any required setup.\nuint8 TRANSITION_CLEANUP = 2\n\n# The node's callback onActivate will be executed to do any final preparations\n# to start executing.\nuint8 TRANSITION_ACTIVATE = 3\n\n# The node's callback onDeactivate will be executed to do any cleanup to start\n# executing, and reverse the onActivate changes.\nuint8 TRANSITION_DEACTIVATE = 4\n\n# This signals shutdown during an unconfigured state, the node's callback\n# onShutdown will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\n# This signals shutdown during an inactive state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\n# This signals shutdown during an active state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\n# This transition will simply cause the deallocation of the node.\nuint8 TRANSITION_DESTROY = 8\n\n# Reserved [10-69], private transitions\n# These transitions are not publicly available and cannot be invoked by a user.\n# The following transitions are implicitly invoked based on the callback\n# feedback of the intermediate transition states.\nuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\nuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\nuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\nuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\nuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\nuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\nuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\nuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\nuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\nuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\nuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\nuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\nuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\nuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\nuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\nuint8 TRANSITION_ON_ERROR_SUCCESS = 60\nuint8 TRANSITION_ON_ERROR_FAILURE = 61\nuint8 TRANSITION_ON_ERROR_ERROR = 62\n\n# Reserved [90-99]. Transition callback success values.\n# These return values ought to be set as a return value for each callback.\n# Depending on which return value, the transition will be executed correctly or\n# fallback/error callbacks will be triggered.\n\n# The transition callback successfully performed its required functionality.\nuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\n# The transition callback failed to perform its required functionality.\nuint8 TRANSITION_CALLBACK_FAILURE = 98\n\n# The transition callback encountered an error that requires special cleanup, if\n# possible.\nuint8 TRANSITION_CALLBACK_ERROR = 99\n\n##\n## Fields\n##\n\n# The transition id from above definitions.\nuint8 id\n\n# A text label of the transition.\nstring label\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nstring data\n",
         "# failed to get full definition text for usr_msgs/msg/CamerasStatus: //",
         "",
         "# This message defines meta information for a camera. It should be in a\n# camera namespace on topic \"camera_info\" and accompanied by up to five\n# image topics named:\n#\n#   image_raw - raw data from the camera driver, possibly Bayer encoded\n#   image            - monochrome, distorted\n#   image_color      - color, distorted\n#   image_rect       - monochrome, rectified\n#   image_rect_color - color, rectified\n#\n# The image_pipeline contains packages (image_proc, stereo_image_proc)\n# for producing the four processed image topics from image_raw and\n# camera_info. The meaning of the camera parameters are described in\n# detail at http://www.ros.org/wiki/image_pipeline/CameraInfo.\n#\n# The image_geometry package provides a user-friendly interface to\n# common operations using this meta information. If you want to, e.g.,\n# project a 3d point into image coordinates, we strongly recommend\n# using image_geometry.\n#\n# If the camera is uncalibrated, the matrices D, K, R, P should be left\n# zeroed out. In particular, clients may assume that K[0] == 0.0\n# indicates an uncalibrated camera.\n\n#######################################################################\n#                     Image acquisition info                          #\n#######################################################################\n\n# Time of image acquisition, camera coordinate frame ID\nstd_msgs/Header header # Header timestamp should be acquisition time of image\n                             # Header frame_id should be optical frame of camera\n                             # origin of frame should be optical center of camera\n                             # +x should point to the right in the image\n                             # +y should point down in the image\n                             # +z should point into the plane of the image\n\n\n#######################################################################\n#                      Calibration Parameters                         #\n#######################################################################\n# These are fixed during camera calibration. Their values will be the #\n# same in all messages until the camera is recalibrated. Note that    #\n# self-calibrating systems may \"recalibrate\" frequently.              #\n#                                                                     #\n# The internal parameters can be used to warp a raw (distorted) image #\n# to:                                                                 #\n#   1. An undistorted image (requires D and K)                        #\n#   2. A rectified image (requires D, K, R)                           #\n# The projection matrix P projects 3D points into the rectified image.#\n#######################################################################\n\n# The image dimensions with which the camera was calibrated.\n# Normally this will be the full camera resolution in pixels.\nuint32 height\nuint32 width\n\n# The distortion model used. Supported models are listed in\n# sensor_msgs/distortion_models.hpp. For most cameras, \"plumb_bob\" - a\n# simple model of radial and tangential distortion - is sufficent.\nstring distortion_model\n\n# The distortion parameters, size depending on the distortion model.\n# For \"plumb_bob\", the 5 parameters are: (k1, k2, t1, t2, k3).\nfloat64[] d\n\n# Intrinsic camera matrix for the raw (distorted) images.\n#     [fx  0 cx]\n# K = [ 0 fy cy]\n#     [ 0  0  1]\n# Projects 3D points in the camera coordinate frame to 2D pixel\n# coordinates using the focal lengths (fx, fy) and principal point\n# (cx, cy).\nfloat64[9]  k # 3x3 row-major matrix\n\n# Rectification matrix (stereo cameras only)\n# A rotation matrix aligning the camera coordinate system to the ideal\n# stereo image plane so that epipolar lines in both stereo images are\n# parallel.\nfloat64[9]  r # 3x3 row-major matrix\n\n# Projection/camera matrix\n#     [fx'  0  cx' Tx]\n# P = [ 0  fy' cy' Ty]\n#     [ 0   0   1   0]\n# By convention, this matrix specifies the intrinsic (camera) matrix\n#  of the processed (rectified) image. That is, the left 3x3 portion\n#  is the normal camera intrinsic matrix for the rectified image.\n# It projects 3D points in the camera coordinate frame to 2D pixel\n#  coordinates using the focal lengths (fx', fy') and principal point\n#  (cx', cy') - these may differ from the values in K.\n# For monocular cameras, Tx = Ty = 0. Normally, monocular cameras will\n#  also have R = the identity and P[1:3,1:3] = K.\n# For a stereo pair, the fourth column [Tx Ty 0]' is related to the\n#  position of the optical center of the second camera in the first\n#  camera's frame. We assume Tz = 0 so both cameras are in the same\n#  stereo image plane. The first camera always has Tx = Ty = 0. For\n#  the right (second) camera of a horizontal stereo pair, Ty = 0 and\n#  Tx = -fx' * B, where B is the baseline between the cameras.\n# Given a 3D point [X Y Z]', the projection (x, y) of the point onto\n#  the rectified image is given by:\n#  [u v w]' = P * [X Y Z 1]'\n#         x = u / w\n#         y = v / w\n#  This holds for both images of a stereo pair.\nfloat64[12] p # 3x4 row-major matrix\n\n\n#######################################################################\n#                      Operational Parameters                         #\n#######################################################################\n# These define the image region actually captured by the camera       #\n# driver. Although they affect the geometry of the output image, they #\n# may be changed freely without recalibrating the camera.             #\n#######################################################################\n\n# Binning refers here to any camera setting which combines rectangular\n#  neighborhoods of pixels into larger \"super-pixels.\" It reduces the\n#  resolution of the output image to\n#  (width / binning_x) x (height / binning_y).\n# The default values binning_x = binning_y = 0 is considered the same\n#  as binning_x = binning_y = 1 (no subsampling).\nuint32 binning_x\nuint32 binning_y\n\n# Region of interest (subwindow of full camera resolution), given in\n#  full resolution (unbinned) image coordinates. A particular ROI\n#  always denotes the same window of pixels on the camera sensor,\n#  regardless of binning settings.\n# The default setting of roi (all values 0) is considered the same as\n#  full resolution (roi.width = width, roi.height = height).\nRegionOfInterest roi\n\n================================================================================\nMSG: sensor_msgs/RegionOfInterest\n# This message is used to specify a region of interest within an image.\n#\n# When used to specify the ROI setting of the camera when the image was\n# taken, the height and width fields should either match the height and\n# width fields for the associated image; or height = width = 0\n# indicates that the full resolution image was captured.\n\nuint32 x_offset  # Leftmost pixel of the ROI\n                 # (0 if the ROI includes the left edge of the image)\nuint32 y_offset  # Topmost pixel of the ROI\n                 # (0 if the ROI includes the top edge of the image)\nuint32 height    # Height of ROI\nuint32 width     # Width of ROI\n\n# True if a distinct rectified ROI should be calculated from the \"raw\"\n# ROI in this message. Typically this should be False if the full image\n# is captured (ROI not used), and True if a subwindow is captured (ROI\n# used).\nbool do_rectify\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This message contains an uncompressed image\n# (0, 0) is at top-left corner of image\n\nstd_msgs/Header header # Header timestamp should be acquisition time of image\n                             # Header frame_id should be optical frame of camera\n                             # origin of frame should be optical center of cameara\n                             # +x should point to the right in the image\n                             # +y should point down in the image\n                             # +z should point into to plane of the image\n                             # If the frame_id here and the frame_id of the CameraInfo\n                             # message associated with the image conflict\n                             # the behavior is undefined\n\nuint32 height                # image height, that is, number of rows\nuint32 width                 # image width, that is, number of columns\n\n# The legal values for encoding are in file include/sensor_msgs/image_encodings.hpp\n# If you want to standardize a new string format, join\n# ros-users@lists.ros.org and send an email proposing a new encoding.\n\nstring encoding       # Encoding of pixels -- channel meaning, ordering, size\n                      # taken from the list of strings in include/sensor_msgs/image_encodings.hpp\n\nuint8 is_bigendian    # is this data bigendian?\nuint32 step           # Full row length in bytes\nuint8[] data          # actual matrix data, size is (step * rows)\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This message contains an uncompressed image\n# (0, 0) is at top-left corner of image\n\nstd_msgs/Header header # Header timestamp should be acquisition time of image\n                             # Header frame_id should be optical frame of camera\n                             # origin of frame should be optical center of cameara\n                             # +x should point to the right in the image\n                             # +y should point down in the image\n                             # +z should point into to plane of the image\n                             # If the frame_id here and the frame_id of the CameraInfo\n                             # message associated with the image conflict\n                             # the behavior is undefined\n\nuint32 height                # image height, that is, number of rows\nuint32 width                 # image width, that is, number of columns\n\n# The legal values for encoding are in file include/sensor_msgs/image_encodings.hpp\n# If you want to standardize a new string format, join\n# ros-users@lists.ros.org and send an email proposing a new encoding.\n\nstring encoding       # Encoding of pixels -- channel meaning, ordering, size\n                      # taken from the list of strings in include/sensor_msgs/image_encodings.hpp\n\nuint8 is_bigendian    # is this data bigendian?\nuint32 step           # Full row length in bytes\nuint8[] data          # actual matrix data, size is (step * rows)\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nuint8 data\n",
         "# This message defines meta information for a camera. It should be in a\n# camera namespace on topic \"camera_info\" and accompanied by up to five\n# image topics named:\n#\n#   image_raw - raw data from the camera driver, possibly Bayer encoded\n#   image            - monochrome, distorted\n#   image_color      - color, distorted\n#   image_rect       - monochrome, rectified\n#   image_rect_color - color, rectified\n#\n# The image_pipeline contains packages (image_proc, stereo_image_proc)\n# for producing the four processed image topics from image_raw and\n# camera_info. The meaning of the camera parameters are described in\n# detail at http://www.ros.org/wiki/image_pipeline/CameraInfo.\n#\n# The image_geometry package provides a user-friendly interface to\n# common operations using this meta information. If you want to, e.g.,\n# project a 3d point into image coordinates, we strongly recommend\n# using image_geometry.\n#\n# If the camera is uncalibrated, the matrices D, K, R, P should be left\n# zeroed out. In particular, clients may assume that K[0] == 0.0\n# indicates an uncalibrated camera.\n\n#######################################################################\n#                     Image acquisition info                          #\n#######################################################################\n\n# Time of image acquisition, camera coordinate frame ID\nstd_msgs/Header header # Header timestamp should be acquisition time of image\n                             # Header frame_id should be optical frame of camera\n                             # origin of frame should be optical center of camera\n                             # +x should point to the right in the image\n                             # +y should point down in the image\n                             # +z should point into the plane of the image\n\n\n#######################################################################\n#                      Calibration Parameters                         #\n#######################################################################\n# These are fixed during camera calibration. Their values will be the #\n# same in all messages until the camera is recalibrated. Note that    #\n# self-calibrating systems may \"recalibrate\" frequently.              #\n#                                                                     #\n# The internal parameters can be used to warp a raw (distorted) image #\n# to:                                                                 #\n#   1. An undistorted image (requires D and K)                        #\n#   2. A rectified image (requires D, K, R)                           #\n# The projection matrix P projects 3D points into the rectified image.#\n#######################################################################\n\n# The image dimensions with which the camera was calibrated.\n# Normally this will be the full camera resolution in pixels.\nuint32 height\nuint32 width\n\n# The distortion model used. Supported models are listed in\n# sensor_msgs/distortion_models.hpp. For most cameras, \"plumb_bob\" - a\n# simple model of radial and tangential distortion - is sufficent.\nstring distortion_model\n\n# The distortion parameters, size depending on the distortion model.\n# For \"plumb_bob\", the 5 parameters are: (k1, k2, t1, t2, k3).\nfloat64[] d\n\n# Intrinsic camera matrix for the raw (distorted) images.\n#     [fx  0 cx]\n# K = [ 0 fy cy]\n#     [ 0  0  1]\n# Projects 3D points in the camera coordinate frame to 2D pixel\n# coordinates using the focal lengths (fx, fy) and principal point\n# (cx, cy).\nfloat64[9]  k # 3x3 row-major matrix\n\n# Rectification matrix (stereo cameras only)\n# A rotation matrix aligning the camera coordinate system to the ideal\n# stereo image plane so that epipolar lines in both stereo images are\n# parallel.\nfloat64[9]  r # 3x3 row-major matrix\n\n# Projection/camera matrix\n#     [fx'  0  cx' Tx]\n# P = [ 0  fy' cy' Ty]\n#     [ 0   0   1   0]\n# By convention, this matrix specifies the intrinsic (camera) matrix\n#  of the processed (rectified) image. That is, the left 3x3 portion\n#  is the normal camera intrinsic matrix for the rectified image.\n# It projects 3D points in the camera coordinate frame to 2D pixel\n#  coordinates using the focal lengths (fx', fy') and principal point\n#  (cx', cy') - these may differ from the values in K.\n# For monocular cameras, Tx = Ty = 0. Normally, monocular cameras will\n#  also have R = the identity and P[1:3,1:3] = K.\n# For a stereo pair, the fourth column [Tx Ty 0]' is related to the\n#  position of the optical center of the second camera in the first\n#  camera's frame. We assume Tz = 0 so both cameras are in the same\n#  stereo image plane. The first camera always has Tx = Ty = 0. For\n#  the right (second) camera of a horizontal stereo pair, Ty = 0 and\n#  Tx = -fx' * B, where B is the baseline between the cameras.\n# Given a 3D point [X Y Z]', the projection (x, y) of the point onto\n#  the rectified image is given by:\n#  [u v w]' = P * [X Y Z 1]'\n#         x = u / w\n#         y = v / w\n#  This holds for both images of a stereo pair.\nfloat64[12] p # 3x4 row-major matrix\n\n\n#######################################################################\n#                      Operational Parameters                         #\n#######################################################################\n# These define the image region actually captured by the camera       #\n# driver. Although they affect the geometry of the output image, they #\n# may be changed freely without recalibrating the camera.             #\n#######################################################################\n\n# Binning refers here to any camera setting which combines rectangular\n#  neighborhoods of pixels into larger \"super-pixels.\" It reduces the\n#  resolution of the output image to\n#  (width / binning_x) x (height / binning_y).\n# The default values binning_x = binning_y = 0 is considered the same\n#  as binning_x = binning_y = 1 (no subsampling).\nuint32 binning_x\nuint32 binning_y\n\n# Region of interest (subwindow of full camera resolution), given in\n#  full resolution (unbinned) image coordinates. A particular ROI\n#  always denotes the same window of pixels on the camera sensor,\n#  regardless of binning settings.\n# The default setting of roi (all values 0) is considered the same as\n#  full resolution (roi.width = width, roi.height = height).\nRegionOfInterest roi\n\n================================================================================\nMSG: sensor_msgs/RegionOfInterest\n# This message is used to specify a region of interest within an image.\n#\n# When used to specify the ROI setting of the camera when the image was\n# taken, the height and width fields should either match the height and\n# width fields for the associated image; or height = width = 0\n# indicates that the full resolution image was captured.\n\nuint32 x_offset  # Leftmost pixel of the ROI\n                 # (0 if the ROI includes the left edge of the image)\nuint32 y_offset  # Topmost pixel of the ROI\n                 # (0 if the ROI includes the top edge of the image)\nuint32 height    # Height of ROI\nuint32 width     # Width of ROI\n\n# True if a distinct rectified ROI should be calculated from the \"raw\"\n# ROI in this message. Typically this should be False if the full image\n# is captured (ROI not used), and True if a subwindow is captured (ROI\n# used).\nbool do_rectify\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This message contains an uncompressed image\n# (0, 0) is at top-left corner of image\n\nstd_msgs/Header header # Header timestamp should be acquisition time of image\n                             # Header frame_id should be optical frame of camera\n                             # origin of frame should be optical center of cameara\n                             # +x should point to the right in the image\n                             # +y should point down in the image\n                             # +z should point into to plane of the image\n                             # If the frame_id here and the frame_id of the CameraInfo\n                             # message associated with the image conflict\n                             # the behavior is undefined\n\nuint32 height                # image height, that is, number of rows\nuint32 width                 # image width, that is, number of columns\n\n# The legal values for encoding are in file include/sensor_msgs/image_encodings.hpp\n# If you want to standardize a new string format, join\n# ros-users@lists.ros.org and send an email proposing a new encoding.\n\nstring encoding       # Encoding of pixels -- channel meaning, ordering, size\n                      # taken from the list of strings in include/sensor_msgs/image_encodings.hpp\n\nuint8 is_bigendian    # is this data bigendian?\nuint32 step           # Full row length in bytes\nuint8[] data          # actual matrix data, size is (step * rows)\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This message contains an uncompressed image\n# (0, 0) is at top-left corner of image\n\nstd_msgs/Header header # Header timestamp should be acquisition time of image\n                             # Header frame_id should be optical frame of camera\n                             # origin of frame should be optical center of cameara\n                             # +x should point to the right in the image\n                             # +y should point down in the image\n                             # +z should point into to plane of the image\n                             # If the frame_id here and the frame_id of the CameraInfo\n                             # message associated with the image conflict\n                             # the behavior is undefined\n\nuint32 height                # image height, that is, number of rows\nuint32 width                 # image width, that is, number of columns\n\n# The legal values for encoding are in file include/sensor_msgs/image_encodings.hpp\n# If you want to standardize a new string format, join\n# ros-users@lists.ros.org and send an email proposing a new encoding.\n\nstring encoding       # Encoding of pixels -- channel meaning, ordering, size\n                      # taken from the list of strings in include/sensor_msgs/image_encodings.hpp\n\nuint8 is_bigendian    # is this data bigendian?\nuint32 step           # Full row length in bytes\nuint8[] data          # actual matrix data, size is (step * rows)\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nuint8 data\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "# This message defines meta information for a camera. It should be in a\n# camera namespace on topic \"camera_info\" and accompanied by up to five\n# image topics named:\n#\n#   image_raw - raw data from the camera driver, possibly Bayer encoded\n#   image            - monochrome, distorted\n#   image_color      - color, distorted\n#   image_rect       - monochrome, rectified\n#   image_rect_color - color, rectified\n#\n# The image_pipeline contains packages (image_proc, stereo_image_proc)\n# for producing the four processed image topics from image_raw and\n# camera_info. The meaning of the camera parameters are described in\n# detail at http://www.ros.org/wiki/image_pipeline/CameraInfo.\n#\n# The image_geometry package provides a user-friendly interface to\n# common operations using this meta information. If you want to, e.g.,\n# project a 3d point into image coordinates, we strongly recommend\n# using image_geometry.\n#\n# If the camera is uncalibrated, the matrices D, K, R, P should be left\n# zeroed out. In particular, clients may assume that K[0] == 0.0\n# indicates an uncalibrated camera.\n\n#######################################################################\n#                     Image acquisition info                          #\n#######################################################################\n\n# Time of image acquisition, camera coordinate frame ID\nstd_msgs/Header header # Header timestamp should be acquisition time of image\n                             # Header frame_id should be optical frame of camera\n                             # origin of frame should be optical center of camera\n                             # +x should point to the right in the image\n                             # +y should point down in the image\n                             # +z should point into the plane of the image\n\n\n#######################################################################\n#                      Calibration Parameters                         #\n#######################################################################\n# These are fixed during camera calibration. Their values will be the #\n# same in all messages until the camera is recalibrated. Note that    #\n# self-calibrating systems may \"recalibrate\" frequently.              #\n#                                                                     #\n# The internal parameters can be used to warp a raw (distorted) image #\n# to:                                                                 #\n#   1. An undistorted image (requires D and K)                        #\n#   2. A rectified image (requires D, K, R)                           #\n# The projection matrix P projects 3D points into the rectified image.#\n#######################################################################\n\n# The image dimensions with which the camera was calibrated.\n# Normally this will be the full camera resolution in pixels.\nuint32 height\nuint32 width\n\n# The distortion model used. Supported models are listed in\n# sensor_msgs/distortion_models.hpp. For most cameras, \"plumb_bob\" - a\n# simple model of radial and tangential distortion - is sufficent.\nstring distortion_model\n\n# The distortion parameters, size depending on the distortion model.\n# For \"plumb_bob\", the 5 parameters are: (k1, k2, t1, t2, k3).\nfloat64[] d\n\n# Intrinsic camera matrix for the raw (distorted) images.\n#     [fx  0 cx]\n# K = [ 0 fy cy]\n#     [ 0  0  1]\n# Projects 3D points in the camera coordinate frame to 2D pixel\n# coordinates using the focal lengths (fx, fy) and principal point\n# (cx, cy).\nfloat64[9]  k # 3x3 row-major matrix\n\n# Rectification matrix (stereo cameras only)\n# A rotation matrix aligning the camera coordinate system to the ideal\n# stereo image plane so that epipolar lines in both stereo images are\n# parallel.\nfloat64[9]  r # 3x3 row-major matrix\n\n# Projection/camera matrix\n#     [fx'  0  cx' Tx]\n# P = [ 0  fy' cy' Ty]\n#     [ 0   0   1   0]\n# By convention, this matrix specifies the intrinsic (camera) matrix\n#  of the processed (rectified) image. That is, the left 3x3 portion\n#  is the normal camera intrinsic matrix for the rectified image.\n# It projects 3D points in the camera coordinate frame to 2D pixel\n#  coordinates using the focal lengths (fx', fy') and principal point\n#  (cx', cy') - these may differ from the values in K.\n# For monocular cameras, Tx = Ty = 0. Normally, monocular cameras will\n#  also have R = the identity and P[1:3,1:3] = K.\n# For a stereo pair, the fourth column [Tx Ty 0]' is related to the\n#  position of the optical center of the second camera in the first\n#  camera's frame. We assume Tz = 0 so both cameras are in the same\n#  stereo image plane. The first camera always has Tx = Ty = 0. For\n#  the right (second) camera of a horizontal stereo pair, Ty = 0 and\n#  Tx = -fx' * B, where B is the baseline between the cameras.\n# Given a 3D point [X Y Z]', the projection (x, y) of the point onto\n#  the rectified image is given by:\n#  [u v w]' = P * [X Y Z 1]'\n#         x = u / w\n#         y = v / w\n#  This holds for both images of a stereo pair.\nfloat64[12] p # 3x4 row-major matrix\n\n\n#######################################################################\n#                      Operational Parameters                         #\n#######################################################################\n# These define the image region actually captured by the camera       #\n# driver. Although they affect the geometry of the output image, they #\n# may be changed freely without recalibrating the camera.             #\n#######################################################################\n\n# Binning refers here to any camera setting which combines rectangular\n#  neighborhoods of pixels into larger \"super-pixels.\" It reduces the\n#  resolution of the output image to\n#  (width / binning_x) x (height / binning_y).\n# The default values binning_x = binning_y = 0 is considered the same\n#  as binning_x = binning_y = 1 (no subsampling).\nuint32 binning_x\nuint32 binning_y\n\n# Region of interest (subwindow of full camera resolution), given in\n#  full resolution (unbinned) image coordinates. A particular ROI\n#  always denotes the same window of pixels on the camera sensor,\n#  regardless of binning settings.\n# The default setting of roi (all values 0) is considered the same as\n#  full resolution (roi.width = width, roi.height = height).\nRegionOfInterest roi\n\n================================================================================\nMSG: sensor_msgs/RegionOfInterest\n# This message is used to specify a region of interest within an image.\n#\n# When used to specify the ROI setting of the camera when the image was\n# taken, the height and width fields should either match the height and\n# width fields for the associated image; or height = width = 0\n# indicates that the full resolution image was captured.\n\nuint32 x_offset  # Leftmost pixel of the ROI\n                 # (0 if the ROI includes the left edge of the image)\nuint32 y_offset  # Topmost pixel of the ROI\n                 # (0 if the ROI includes the top edge of the image)\nuint32 height    # Height of ROI\nuint32 width     # Width of ROI\n\n# True if a distinct rectified ROI should be calculated from the \"raw\"\n# ROI in this message. Typically this should be False if the full image\n# is captured (ROI not used), and True if a subwindow is captured (ROI\n# used).\nbool do_rectify\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This message contains an uncompressed image\n# (0, 0) is at top-left corner of image\n\nstd_msgs/Header header # Header timestamp should be acquisition time of image\n                             # Header frame_id should be optical frame of camera\n                             # origin of frame should be optical center of cameara\n                             # +x should point to the right in the image\n                             # +y should point down in the image\n                             # +z should point into to plane of the image\n                             # If the frame_id here and the frame_id of the CameraInfo\n                             # message associated with the image conflict\n                             # the behavior is undefined\n\nuint32 height                # image height, that is, number of rows\nuint32 width                 # image width, that is, number of columns\n\n# The legal values for encoding are in file include/sensor_msgs/image_encodings.hpp\n# If you want to standardize a new string format, join\n# ros-users@lists.ros.org and send an email proposing a new encoding.\n\nstring encoding       # Encoding of pixels -- channel meaning, ordering, size\n                      # taken from the list of strings in include/sensor_msgs/image_encodings.hpp\n\nuint8 is_bigendian    # is this data bigendian?\nuint32 step           # Full row length in bytes\nuint8[] data          # actual matrix data, size is (step * rows)\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This message contains an uncompressed image\n# (0, 0) is at top-left corner of image\n\nstd_msgs/Header header # Header timestamp should be acquisition time of image\n                             # Header frame_id should be optical frame of camera\n                             # origin of frame should be optical center of cameara\n                             # +x should point to the right in the image\n                             # +y should point down in the image\n                             # +z should point into to plane of the image\n                             # If the frame_id here and the frame_id of the CameraInfo\n                             # message associated with the image conflict\n                             # the behavior is undefined\n\nuint32 height                # image height, that is, number of rows\nuint32 width                 # image width, that is, number of columns\n\n# The legal values for encoding are in file include/sensor_msgs/image_encodings.hpp\n# If you want to standardize a new string format, join\n# ros-users@lists.ros.org and send an email proposing a new encoding.\n\nstring encoding       # Encoding of pixels -- channel meaning, ordering, size\n                      # taken from the list of strings in include/sensor_msgs/image_encodings.hpp\n\nuint8 is_bigendian    # is this data bigendian?\nuint32 step           # Full row length in bytes\nuint8[] data          # actual matrix data, size is (step * rows)\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nuint8 data\n",
         "",
         "# This message defines meta information for a camera. It should be in a\n# camera namespace on topic \"camera_info\" and accompanied by up to five\n# image topics named:\n#\n#   image_raw - raw data from the camera driver, possibly Bayer encoded\n#   image            - monochrome, distorted\n#   image_color      - color, distorted\n#   image_rect       - monochrome, rectified\n#   image_rect_color - color, rectified\n#\n# The image_pipeline contains packages (image_proc, stereo_image_proc)\n# for producing the four processed image topics from image_raw and\n# camera_info. The meaning of the camera parameters are described in\n# detail at http://www.ros.org/wiki/image_pipeline/CameraInfo.\n#\n# The image_geometry package provides a user-friendly interface to\n# common operations using this meta information. If you want to, e.g.,\n# project a 3d point into image coordinates, we strongly recommend\n# using image_geometry.\n#\n# If the camera is uncalibrated, the matrices D, K, R, P should be left\n# zeroed out. In particular, clients may assume that K[0] == 0.0\n# indicates an uncalibrated camera.\n\n#######################################################################\n#                     Image acquisition info                          #\n#######################################################################\n\n# Time of image acquisition, camera coordinate frame ID\nstd_msgs/Header header # Header timestamp should be acquisition time of image\n                             # Header frame_id should be optical frame of camera\n                             # origin of frame should be optical center of camera\n                             # +x should point to the right in the image\n                             # +y should point down in the image\n                             # +z should point into the plane of the image\n\n\n#######################################################################\n#                      Calibration Parameters                         #\n#######################################################################\n# These are fixed during camera calibration. Their values will be the #\n# same in all messages until the camera is recalibrated. Note that    #\n# self-calibrating systems may \"recalibrate\" frequently.              #\n#                                                                     #\n# The internal parameters can be used to warp a raw (distorted) image #\n# to:                                                                 #\n#   1. An undistorted image (requires D and K)                        #\n#   2. A rectified image (requires D, K, R)                           #\n# The projection matrix P projects 3D points into the rectified image.#\n#######################################################################\n\n# The image dimensions with which the camera was calibrated.\n# Normally this will be the full camera resolution in pixels.\nuint32 height\nuint32 width\n\n# The distortion model used. Supported models are listed in\n# sensor_msgs/distortion_models.hpp. For most cameras, \"plumb_bob\" - a\n# simple model of radial and tangential distortion - is sufficent.\nstring distortion_model\n\n# The distortion parameters, size depending on the distortion model.\n# For \"plumb_bob\", the 5 parameters are: (k1, k2, t1, t2, k3).\nfloat64[] d\n\n# Intrinsic camera matrix for the raw (distorted) images.\n#     [fx  0 cx]\n# K = [ 0 fy cy]\n#     [ 0  0  1]\n# Projects 3D points in the camera coordinate frame to 2D pixel\n# coordinates using the focal lengths (fx, fy) and principal point\n# (cx, cy).\nfloat64[9]  k # 3x3 row-major matrix\n\n# Rectification matrix (stereo cameras only)\n# A rotation matrix aligning the camera coordinate system to the ideal\n# stereo image plane so that epipolar lines in both stereo images are\n# parallel.\nfloat64[9]  r # 3x3 row-major matrix\n\n# Projection/camera matrix\n#     [fx'  0  cx' Tx]\n# P = [ 0  fy' cy' Ty]\n#     [ 0   0   1   0]\n# By convention, this matrix specifies the intrinsic (camera) matrix\n#  of the processed (rectified) image. That is, the left 3x3 portion\n#  is the normal camera intrinsic matrix for the rectified image.\n# It projects 3D points in the camera coordinate frame to 2D pixel\n#  coordinates using the focal lengths (fx', fy') and principal point\n#  (cx', cy') - these may differ from the values in K.\n# For monocular cameras, Tx = Ty = 0. Normally, monocular cameras will\n#  also have R = the identity and P[1:3,1:3] = K.\n# For a stereo pair, the fourth column [Tx Ty 0]' is related to the\n#  position of the optical center of the second camera in the first\n#  camera's frame. We assume Tz = 0 so both cameras are in the same\n#  stereo image plane. The first camera always has Tx = Ty = 0. For\n#  the right (second) camera of a horizontal stereo pair, Ty = 0 and\n#  Tx = -fx' * B, where B is the baseline between the cameras.\n# Given a 3D point [X Y Z]', the projection (x, y) of the point onto\n#  the rectified image is given by:\n#  [u v w]' = P * [X Y Z 1]'\n#         x = u / w\n#         y = v / w\n#  This holds for both images of a stereo pair.\nfloat64[12] p # 3x4 row-major matrix\n\n\n#######################################################################\n#                      Operational Parameters                         #\n#######################################################################\n# These define the image region actually captured by the camera       #\n# driver. Although they affect the geometry of the output image, they #\n# may be changed freely without recalibrating the camera.             #\n#######################################################################\n\n# Binning refers here to any camera setting which combines rectangular\n#  neighborhoods of pixels into larger \"super-pixels.\" It reduces the\n#  resolution of the output image to\n#  (width / binning_x) x (height / binning_y).\n# The default values binning_x = binning_y = 0 is considered the same\n#  as binning_x = binning_y = 1 (no subsampling).\nuint32 binning_x\nuint32 binning_y\n\n# Region of interest (subwindow of full camera resolution), given in\n#  full resolution (unbinned) image coordinates. A particular ROI\n#  always denotes the same window of pixels on the camera sensor,\n#  regardless of binning settings.\n# The default setting of roi (all values 0) is considered the same as\n#  full resolution (roi.width = width, roi.height = height).\nRegionOfInterest roi\n\n================================================================================\nMSG: sensor_msgs/RegionOfInterest\n# This message is used to specify a region of interest within an image.\n#\n# When used to specify the ROI setting of the camera when the image was\n# taken, the height and width fields should either match the height and\n# width fields for the associated image; or height = width = 0\n# indicates that the full resolution image was captured.\n\nuint32 x_offset  # Leftmost pixel of the ROI\n                 # (0 if the ROI includes the left edge of the image)\nuint32 y_offset  # Topmost pixel of the ROI\n                 # (0 if the ROI includes the top edge of the image)\nuint32 height    # Height of ROI\nuint32 width     # Width of ROI\n\n# True if a distinct rectified ROI should be calculated from the \"raw\"\n# ROI in this message. Typically this should be False if the full image\n# is captured (ROI not used), and True if a subwindow is captured (ROI\n# used).\nbool do_rectify\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This message contains an uncompressed image\n# (0, 0) is at top-left corner of image\n\nstd_msgs/Header header # Header timestamp should be acquisition time of image\n                             # Header frame_id should be optical frame of camera\n                             # origin of frame should be optical center of cameara\n                             # +x should point to the right in the image\n                             # +y should point down in the image\n                             # +z should point into to plane of the image\n                             # If the frame_id here and the frame_id of the CameraInfo\n                             # message associated with the image conflict\n                             # the behavior is undefined\n\nuint32 height                # image height, that is, number of rows\nuint32 width                 # image width, that is, number of columns\n\n# The legal values for encoding are in file include/sensor_msgs/image_encodings.hpp\n# If you want to standardize a new string format, join\n# ros-users@lists.ros.org and send an email proposing a new encoding.\n\nstring encoding       # Encoding of pixels -- channel meaning, ordering, size\n                      # taken from the list of strings in include/sensor_msgs/image_encodings.hpp\n\nuint8 is_bigendian    # is this data bigendian?\nuint32 step           # Full row length in bytes\nuint8[] data          # actual matrix data, size is (step * rows)\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This message contains an uncompressed image\n# (0, 0) is at top-left corner of image\n\nstd_msgs/Header header # Header timestamp should be acquisition time of image\n                             # Header frame_id should be optical frame of camera\n                             # origin of frame should be optical center of cameara\n                             # +x should point to the right in the image\n                             # +y should point down in the image\n                             # +z should point into to plane of the image\n                             # If the frame_id here and the frame_id of the CameraInfo\n                             # message associated with the image conflict\n                             # the behavior is undefined\n\nuint32 height                # image height, that is, number of rows\nuint32 width                 # image width, that is, number of columns\n\n# The legal values for encoding are in file include/sensor_msgs/image_encodings.hpp\n# If you want to standardize a new string format, join\n# ros-users@lists.ros.org and send an email proposing a new encoding.\n\nstring encoding       # Encoding of pixels -- channel meaning, ordering, size\n                      # taken from the list of strings in include/sensor_msgs/image_encodings.hpp\n\nuint8 is_bigendian    # is this data bigendian?\nuint32 step           # Full row length in bytes\nuint8[] data          # actual matrix data, size is (step * rows)\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nuint8 data\n",
         "# This represents a Point with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nPoint point\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "# This message defines meta information for a camera. It should be in a\n# camera namespace on topic \"camera_info\" and accompanied by up to five\n# image topics named:\n#\n#   image_raw - raw data from the camera driver, possibly Bayer encoded\n#   image            - monochrome, distorted\n#   image_color      - color, distorted\n#   image_rect       - monochrome, rectified\n#   image_rect_color - color, rectified\n#\n# The image_pipeline contains packages (image_proc, stereo_image_proc)\n# for producing the four processed image topics from image_raw and\n# camera_info. The meaning of the camera parameters are described in\n# detail at http://www.ros.org/wiki/image_pipeline/CameraInfo.\n#\n# The image_geometry package provides a user-friendly interface to\n# common operations using this meta information. If you want to, e.g.,\n# project a 3d point into image coordinates, we strongly recommend\n# using image_geometry.\n#\n# If the camera is uncalibrated, the matrices D, K, R, P should be left\n# zeroed out. In particular, clients may assume that K[0] == 0.0\n# indicates an uncalibrated camera.\n\n#######################################################################\n#                     Image acquisition info                          #\n#######################################################################\n\n# Time of image acquisition, camera coordinate frame ID\nstd_msgs/Header header # Header timestamp should be acquisition time of image\n                             # Header frame_id should be optical frame of camera\n                             # origin of frame should be optical center of camera\n                             # +x should point to the right in the image\n                             # +y should point down in the image\n                             # +z should point into the plane of the image\n\n\n#######################################################################\n#                      Calibration Parameters                         #\n#######################################################################\n# These are fixed during camera calibration. Their values will be the #\n# same in all messages until the camera is recalibrated. Note that    #\n# self-calibrating systems may \"recalibrate\" frequently.              #\n#                                                                     #\n# The internal parameters can be used to warp a raw (distorted) image #\n# to:                                                                 #\n#   1. An undistorted image (requires D and K)                        #\n#   2. A rectified image (requires D, K, R)                           #\n# The projection matrix P projects 3D points into the rectified image.#\n#######################################################################\n\n# The image dimensions with which the camera was calibrated.\n# Normally this will be the full camera resolution in pixels.\nuint32 height\nuint32 width\n\n# The distortion model used. Supported models are listed in\n# sensor_msgs/distortion_models.hpp. For most cameras, \"plumb_bob\" - a\n# simple model of radial and tangential distortion - is sufficent.\nstring distortion_model\n\n# The distortion parameters, size depending on the distortion model.\n# For \"plumb_bob\", the 5 parameters are: (k1, k2, t1, t2, k3).\nfloat64[] d\n\n# Intrinsic camera matrix for the raw (distorted) images.\n#     [fx  0 cx]\n# K = [ 0 fy cy]\n#     [ 0  0  1]\n# Projects 3D points in the camera coordinate frame to 2D pixel\n# coordinates using the focal lengths (fx, fy) and principal point\n# (cx, cy).\nfloat64[9]  k # 3x3 row-major matrix\n\n# Rectification matrix (stereo cameras only)\n# A rotation matrix aligning the camera coordinate system to the ideal\n# stereo image plane so that epipolar lines in both stereo images are\n# parallel.\nfloat64[9]  r # 3x3 row-major matrix\n\n# Projection/camera matrix\n#     [fx'  0  cx' Tx]\n# P = [ 0  fy' cy' Ty]\n#     [ 0   0   1   0]\n# By convention, this matrix specifies the intrinsic (camera) matrix\n#  of the processed (rectified) image. That is, the left 3x3 portion\n#  is the normal camera intrinsic matrix for the rectified image.\n# It projects 3D points in the camera coordinate frame to 2D pixel\n#  coordinates using the focal lengths (fx', fy') and principal point\n#  (cx', cy') - these may differ from the values in K.\n# For monocular cameras, Tx = Ty = 0. Normally, monocular cameras will\n#  also have R = the identity and P[1:3,1:3] = K.\n# For a stereo pair, the fourth column [Tx Ty 0]' is related to the\n#  position of the optical center of the second camera in the first\n#  camera's frame. We assume Tz = 0 so both cameras are in the same\n#  stereo image plane. The first camera always has Tx = Ty = 0. For\n#  the right (second) camera of a horizontal stereo pair, Ty = 0 and\n#  Tx = -fx' * B, where B is the baseline between the cameras.\n# Given a 3D point [X Y Z]', the projection (x, y) of the point onto\n#  the rectified image is given by:\n#  [u v w]' = P * [X Y Z 1]'\n#         x = u / w\n#         y = v / w\n#  This holds for both images of a stereo pair.\nfloat64[12] p # 3x4 row-major matrix\n\n\n#######################################################################\n#                      Operational Parameters                         #\n#######################################################################\n# These define the image region actually captured by the camera       #\n# driver. Although they affect the geometry of the output image, they #\n# may be changed freely without recalibrating the camera.             #\n#######################################################################\n\n# Binning refers here to any camera setting which combines rectangular\n#  neighborhoods of pixels into larger \"super-pixels.\" It reduces the\n#  resolution of the output image to\n#  (width / binning_x) x (height / binning_y).\n# The default values binning_x = binning_y = 0 is considered the same\n#  as binning_x = binning_y = 1 (no subsampling).\nuint32 binning_x\nuint32 binning_y\n\n# Region of interest (subwindow of full camera resolution), given in\n#  full resolution (unbinned) image coordinates. A particular ROI\n#  always denotes the same window of pixels on the camera sensor,\n#  regardless of binning settings.\n# The default setting of roi (all values 0) is considered the same as\n#  full resolution (roi.width = width, roi.height = height).\nRegionOfInterest roi\n\n================================================================================\nMSG: sensor_msgs/RegionOfInterest\n# This message is used to specify a region of interest within an image.\n#\n# When used to specify the ROI setting of the camera when the image was\n# taken, the height and width fields should either match the height and\n# width fields for the associated image; or height = width = 0\n# indicates that the full resolution image was captured.\n\nuint32 x_offset  # Leftmost pixel of the ROI\n                 # (0 if the ROI includes the left edge of the image)\nuint32 y_offset  # Topmost pixel of the ROI\n                 # (0 if the ROI includes the top edge of the image)\nuint32 height    # Height of ROI\nuint32 width     # Width of ROI\n\n# True if a distinct rectified ROI should be calculated from the \"raw\"\n# ROI in this message. Typically this should be False if the full image\n# is captured (ROI not used), and True if a subwindow is captured (ROI\n# used).\nbool do_rectify\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This message contains an uncompressed image\n# (0, 0) is at top-left corner of image\n\nstd_msgs/Header header # Header timestamp should be acquisition time of image\n                             # Header frame_id should be optical frame of camera\n                             # origin of frame should be optical center of cameara\n                             # +x should point to the right in the image\n                             # +y should point down in the image\n                             # +z should point into to plane of the image\n                             # If the frame_id here and the frame_id of the CameraInfo\n                             # message associated with the image conflict\n                             # the behavior is undefined\n\nuint32 height                # image height, that is, number of rows\nuint32 width                 # image width, that is, number of columns\n\n# The legal values for encoding are in file include/sensor_msgs/image_encodings.hpp\n# If you want to standardize a new string format, join\n# ros-users@lists.ros.org and send an email proposing a new encoding.\n\nstring encoding       # Encoding of pixels -- channel meaning, ordering, size\n                      # taken from the list of strings in include/sensor_msgs/image_encodings.hpp\n\nuint8 is_bigendian    # is this data bigendian?\nuint32 step           # Full row length in bytes\nuint8[] data          # actual matrix data, size is (step * rows)\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This message contains an uncompressed image\n# (0, 0) is at top-left corner of image\n\nstd_msgs/Header header # Header timestamp should be acquisition time of image\n                             # Header frame_id should be optical frame of camera\n                             # origin of frame should be optical center of cameara\n                             # +x should point to the right in the image\n                             # +y should point down in the image\n                             # +z should point into to plane of the image\n                             # If the frame_id here and the frame_id of the CameraInfo\n                             # message associated with the image conflict\n                             # the behavior is undefined\n\nuint32 height                # image height, that is, number of rows\nuint32 width                 # image width, that is, number of columns\n\n# The legal values for encoding are in file include/sensor_msgs/image_encodings.hpp\n# If you want to standardize a new string format, join\n# ros-users@lists.ros.org and send an email proposing a new encoding.\n\nstring encoding       # Encoding of pixels -- channel meaning, ordering, size\n                      # taken from the list of strings in include/sensor_msgs/image_encodings.hpp\n\nuint8 is_bigendian    # is this data bigendian?\nuint32 step           # Full row length in bytes\nuint8[] data          # actual matrix data, size is (step * rows)\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nuint8 data\n",
         "# This message contains an uncompressed image\n# (0, 0) is at top-left corner of image\n\nstd_msgs/Header header # Header timestamp should be acquisition time of image\n                             # Header frame_id should be optical frame of camera\n                             # origin of frame should be optical center of cameara\n                             # +x should point to the right in the image\n                             # +y should point down in the image\n                             # +z should point into to plane of the image\n                             # If the frame_id here and the frame_id of the CameraInfo\n                             # message associated with the image conflict\n                             # the behavior is undefined\n\nuint32 height                # image height, that is, number of rows\nuint32 width                 # image width, that is, number of columns\n\n# The legal values for encoding are in file include/sensor_msgs/image_encodings.hpp\n# If you want to standardize a new string format, join\n# ros-users@lists.ros.org and send an email proposing a new encoding.\n\nstring encoding       # Encoding of pixels -- channel meaning, ordering, size\n                      # taken from the list of strings in include/sensor_msgs/image_encodings.hpp\n\nuint8 is_bigendian    # is this data bigendian?\nuint32 step           # Full row length in bytes\nuint8[] data          # actual matrix data, size is (step * rows)\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This message contains an uncompressed image\n# (0, 0) is at top-left corner of image\n\nstd_msgs/Header header # Header timestamp should be acquisition time of image\n                             # Header frame_id should be optical frame of camera\n                             # origin of frame should be optical center of cameara\n                             # +x should point to the right in the image\n                             # +y should point down in the image\n                             # +z should point into to plane of the image\n                             # If the frame_id here and the frame_id of the CameraInfo\n                             # message associated with the image conflict\n                             # the behavior is undefined\n\nuint32 height                # image height, that is, number of rows\nuint32 width                 # image width, that is, number of columns\n\n# The legal values for encoding are in file include/sensor_msgs/image_encodings.hpp\n# If you want to standardize a new string format, join\n# ros-users@lists.ros.org and send an email proposing a new encoding.\n\nstring encoding       # Encoding of pixels -- channel meaning, ordering, size\n                      # taken from the list of strings in include/sensor_msgs/image_encodings.hpp\n\nuint8 is_bigendian    # is this data bigendian?\nuint32 step           # Full row length in bytes\nuint8[] data          # actual matrix data, size is (step * rows)\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# The time point at which this event occurred.\nuint64 timestamp\n\n# The id and label of this transition event.\nTransition transition\n\n# The starting state from which this event transitioned.\nState start_state\n\n# The end state of this transition event.\nState goal_state\n\n================================================================================\nMSG: lifecycle_msgs/State\n# Primary state definitions as depicted in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# These are the primary states. State changes can only be requested when the\n# node is in one of these states.\n\n# Indicates state has not yet been set.\nuint8 PRIMARY_STATE_UNKNOWN = 0\n\n# This is the life cycle state the node is in immediately after being\n# instantiated.\nuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\n# This state represents a node that is not currently performing any processing.\nuint8 PRIMARY_STATE_INACTIVE = 2\n\n# This is the main state of the node's life cycle. While in this state, the node\n# performs any processing, responds to service requests, reads and processes\n# data, produces output, etc.\nuint8 PRIMARY_STATE_ACTIVE = 3\n\n# The finalized state is the state in which the node ends immediately before\n# being destroyed.\nuint8 PRIMARY_STATE_FINALIZED = 4\n\n# Temporary intermediate states. When a transition is requested, the node\n# changes its state into one of these states.\n\n# In this transition state the node's onConfigure callback will be called to\n# allow the node to load its configuration and conduct any required setup.\nuint8 TRANSITION_STATE_CONFIGURING = 10\n\n# In this transition state the node's callback onCleanup will be called to clear\n# all state and return the node to a functionally equivalent state as when\n# first created.\nuint8 TRANSITION_STATE_CLEANINGUP = 11\n\n# In this transition state the callback onShutdown will be executed to do any\n# cleanup necessary before destruction.\nuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\n# In this transition state the callback onActivate will be executed to do any\n# final preparations to start executing.\nuint8 TRANSITION_STATE_ACTIVATING = 13\n\n# In this transition state the callback onDeactivate will be executed to do any\n# cleanup to start executing, and reverse the onActivate changes.\nuint8 TRANSITION_STATE_DEACTIVATING = 14\n\n# This transition state is where any error may be cleaned up.\nuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\n# The state id value from the above definitions.\nuint8 id\n\n# A text label of the state.\nstring label\n\n================================================================================\nMSG: lifecycle_msgs/Transition\n# Default values for transitions as described in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# Reserved [0-9], publicly available transitions.\n# When a node is in one of these primary states, these transitions can be\n# invoked.\n\n# This transition will instantiate the node, but will not run any code beyond\n# the constructor.\nuint8 TRANSITION_CREATE = 0\n\n# The node's onConfigure callback will be called to allow the node to load its\n# configuration and conduct any required setup.\nuint8 TRANSITION_CONFIGURE = 1\n\n# The node's callback onCleanup will be called in this transition to allow the\n# node to load its configuration and conduct any required setup.\nuint8 TRANSITION_CLEANUP = 2\n\n# The node's callback onActivate will be executed to do any final preparations\n# to start executing.\nuint8 TRANSITION_ACTIVATE = 3\n\n# The node's callback onDeactivate will be executed to do any cleanup to start\n# executing, and reverse the onActivate changes.\nuint8 TRANSITION_DEACTIVATE = 4\n\n# This signals shutdown during an unconfigured state, the node's callback\n# onShutdown will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\n# This signals shutdown during an inactive state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\n# This signals shutdown during an active state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\n# This transition will simply cause the deallocation of the node.\nuint8 TRANSITION_DESTROY = 8\n\n# Reserved [10-69], private transitions\n# These transitions are not publicly available and cannot be invoked by a user.\n# The following transitions are implicitly invoked based on the callback\n# feedback of the intermediate transition states.\nuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\nuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\nuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\nuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\nuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\nuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\nuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\nuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\nuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\nuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\nuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\nuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\nuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\nuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\nuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\nuint8 TRANSITION_ON_ERROR_SUCCESS = 60\nuint8 TRANSITION_ON_ERROR_FAILURE = 61\nuint8 TRANSITION_ON_ERROR_ERROR = 62\n\n# Reserved [90-99]. Transition callback success values.\n# These return values ought to be set as a return value for each callback.\n# Depending on which return value, the transition will be executed correctly or\n# fallback/error callbacks will be triggered.\n\n# The transition callback successfully performed its required functionality.\nuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\n# The transition callback failed to perform its required functionality.\nuint8 TRANSITION_CALLBACK_FAILURE = 98\n\n# The transition callback encountered an error that requires special cleanup, if\n# possible.\nuint8 TRANSITION_CALLBACK_ERROR = 99\n\n##\n## Fields\n##\n\n# The transition id from above definitions.\nuint8 id\n\n# A text label of the transition.\nstring label\n",
         "# Topic for the robot's timezone\n# timezone:         The robot's time zone\n# timezone_offset:  [seconds] The time offset of the timezone with respect to UTC\n\nstring timezone\nfloat32 timezone_offset",
         "# Message containing the weather conditions of a certain area\n# temperature:      [\u00b0C] Current temperature\n# humidity:         [%] Relative humidity\n# feels_like        [\u00b0C] temperature feeling\n# cloudiness:       [%] Cloudiness percentage\n# sunset_time:      [epoch] Sunset time\n# timezone:         The robot's time zone\n# timezone_offset:  [seconds] The time offset of the timezone with respect to UTC\n# state:            clear, rain or snow\n# description:      brief description of the weather. obtaned directly from openweather map. can be for instance \"sparse clouds\"\n# city:             The city name\n\n\nfloat32 temperature\nfloat32 humidity\nfloat32 cloudiness\nfloat32 feels_like\nbuiltin_interfaces/Time sunset_time\nstring timezone\nfloat32 timezone_offset\nstring state\nstring description \nstring city\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "# A twist with reference coordinate frame and timestamp\n\nstd_msgs/Header header\nTwist twist\n\n================================================================================\nMSG: geometry_msgs/Twist\n# This expresses velocity in free space broken into its linear and angular parts.\n\nVector3  linear\nVector3  angular\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space.\n\n# This is semantically different than a point.\n# A vector is always anchored at the origin.\n# When a transform is applied to a vector, only the rotational component is applied.\n\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# Message containing the order status information\n\n# client_name   [string]: Client name of order \n# delivery_id   [string]: Client name of order \n# lat           [float64]: Latitud of Kiwibots destination, can be the pick up, and the drop off point. \n# lng           [float64]: Longitud of Kiwibots destination, can be the pick up, and the drop off point. \n\nstring client_name\nstring delivery_id\nfloat64 lat\nfloat64 lng",
         "",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "# Message for reporting a robot event with it's respective ID.\n# id    [string]: Id of the message as contained in the usrlogs_msg.csv file if contained\n# value [string]: String containing the log to be sent\n# level [string]: Log level from debug to fatal\n\nstring id\nstring value\nstring level",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nfloat32 data\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nstring data\n",
         "# This represents an estimate of a position and velocity in free space.\n# The pose in this message should be specified in the coordinate frame given by header.frame_id\n# The twist in this message should be specified in the coordinate frame given by the child_frame_id\n\n# Includes the frame id of the pose parent.\nstd_msgs/Header header\n\n# Frame id the pose points to. The twist is in this coordinate frame.\nstring child_frame_id\n\n# Estimated pose that is typically relative to a fixed world frame.\ngeometry_msgs/PoseWithCovariance pose\n\n# Estimated linear and angular velocity relative to child_frame_id.\ngeometry_msgs/TwistWithCovariance twist\n\n================================================================================\nMSG: geometry_msgs/TwistWithCovariance\n# This expresses velocity in free space with uncertainty.\n\nTwist twist\n\n# Row-major representation of the 6x6 covariance matrix\n# The orientation parameters use a fixed-axis representation.\n# In order, the parameters are:\n# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\nfloat64[36] covariance\n\n================================================================================\nMSG: geometry_msgs/Twist\n# This expresses velocity in free space broken into its linear and angular parts.\n\nVector3  linear\nVector3  angular\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space.\n\n# This is semantically different than a point.\n# A vector is always anchored at the origin.\n# When a transform is applied to a vector, only the rotational component is applied.\n\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/PoseWithCovariance\n# This represents a pose in free space with uncertainty.\n\nPose pose\n\n# Row-major representation of the 6x6 covariance matrix\n# The orientation parameters use a fixed-axis representation.\n# In order, the parameters are:\n# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\nfloat64[36] covariance\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data\n",
         "# This represents an estimate of a position and velocity in free space.\n# The pose in this message should be specified in the coordinate frame given by header.frame_id\n# The twist in this message should be specified in the coordinate frame given by the child_frame_id\n\n# Includes the frame id of the pose parent.\nstd_msgs/Header header\n\n# Frame id the pose points to. The twist is in this coordinate frame.\nstring child_frame_id\n\n# Estimated pose that is typically relative to a fixed world frame.\ngeometry_msgs/PoseWithCovariance pose\n\n# Estimated linear and angular velocity relative to child_frame_id.\ngeometry_msgs/TwistWithCovariance twist\n\n================================================================================\nMSG: geometry_msgs/TwistWithCovariance\n# This expresses velocity in free space with uncertainty.\n\nTwist twist\n\n# Row-major representation of the 6x6 covariance matrix\n# The orientation parameters use a fixed-axis representation.\n# In order, the parameters are:\n# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\nfloat64[36] covariance\n\n================================================================================\nMSG: geometry_msgs/Twist\n# This expresses velocity in free space broken into its linear and angular parts.\n\nVector3  linear\nVector3  angular\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space.\n\n# This is semantically different than a point.\n# A vector is always anchored at the origin.\n# When a transform is applied to a vector, only the rotational component is applied.\n\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/PoseWithCovariance\n# This represents a pose in free space with uncertainty.\n\nPose pose\n\n# Row-major representation of the 6x6 covariance matrix\n# The orientation parameters use a fixed-axis representation.\n# In order, the parameters are:\n# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\nfloat64[36] covariance\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation.\n\nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n",
         "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nfloat64 data\n",
         "# The time point at which this event occurred.\nuint64 timestamp\n\n# The id and label of this transition event.\nTransition transition\n\n# The starting state from which this event transitioned.\nState start_state\n\n# The end state of this transition event.\nState goal_state\n\n================================================================================\nMSG: lifecycle_msgs/State\n# Primary state definitions as depicted in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# These are the primary states. State changes can only be requested when the\n# node is in one of these states.\n\n# Indicates state has not yet been set.\nuint8 PRIMARY_STATE_UNKNOWN = 0\n\n# This is the life cycle state the node is in immediately after being\n# instantiated.\nuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\n# This state represents a node that is not currently performing any processing.\nuint8 PRIMARY_STATE_INACTIVE = 2\n\n# This is the main state of the node's life cycle. While in this state, the node\n# performs any processing, responds to service requests, reads and processes\n# data, produces output, etc.\nuint8 PRIMARY_STATE_ACTIVE = 3\n\n# The finalized state is the state in which the node ends immediately before\n# being destroyed.\nuint8 PRIMARY_STATE_FINALIZED = 4\n\n# Temporary intermediate states. When a transition is requested, the node\n# changes its state into one of these states.\n\n# In this transition state the node's onConfigure callback will be called to\n# allow the node to load its configuration and conduct any required setup.\nuint8 TRANSITION_STATE_CONFIGURING = 10\n\n# In this transition state the node's callback onCleanup will be called to clear\n# all state and return the node to a functionally equivalent state as when\n# first created.\nuint8 TRANSITION_STATE_CLEANINGUP = 11\n\n# In this transition state the callback onShutdown will be executed to do any\n# cleanup necessary before destruction.\nuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\n# In this transition state the callback onActivate will be executed to do any\n# final preparations to start executing.\nuint8 TRANSITION_STATE_ACTIVATING = 13\n\n# In this transition state the callback onDeactivate will be executed to do any\n# cleanup to start executing, and reverse the onActivate changes.\nuint8 TRANSITION_STATE_DEACTIVATING = 14\n\n# This transition state is where any error may be cleaned up.\nuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\n# The state id value from the above definitions.\nuint8 id\n\n# A text label of the state.\nstring label\n\n================================================================================\nMSG: lifecycle_msgs/Transition\n# Default values for transitions as described in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# Reserved [0-9], publicly available transitions.\n# When a node is in one of these primary states, these transitions can be\n# invoked.\n\n# This transition will instantiate the node, but will not run any code beyond\n# the constructor.\nuint8 TRANSITION_CREATE = 0\n\n# The node's onConfigure callback will be called to allow the node to load its\n# configuration and conduct any required setup.\nuint8 TRANSITION_CONFIGURE = 1\n\n# The node's callback onCleanup will be called in this transition to allow the\n# node to load its configuration and conduct any required setup.\nuint8 TRANSITION_CLEANUP = 2\n\n# The node's callback onActivate will be executed to do any final preparations\n# to start executing.\nuint8 TRANSITION_ACTIVATE = 3\n\n# The node's callback onDeactivate will be executed to do any cleanup to start\n# executing, and reverse the onActivate changes.\nuint8 TRANSITION_DEACTIVATE = 4\n\n# This signals shutdown during an unconfigured state, the node's callback\n# onShutdown will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\n# This signals shutdown during an inactive state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\n# This signals shutdown during an active state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\n# This transition will simply cause the deallocation of the node.\nuint8 TRANSITION_DESTROY = 8\n\n# Reserved [10-69], private transitions\n# These transitions are not publicly available and cannot be invoked by a user.\n# The following transitions are implicitly invoked based on the callback\n# feedback of the intermediate transition states.\nuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\nuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\nuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\nuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\nuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\nuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\nuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\nuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\nuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\nuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\nuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\nuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\nuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\nuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\nuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\nuint8 TRANSITION_ON_ERROR_SUCCESS = 60\nuint8 TRANSITION_ON_ERROR_FAILURE = 61\nuint8 TRANSITION_ON_ERROR_ERROR = 62\n\n# Reserved [90-99]. Transition callback success values.\n# These return values ought to be set as a return value for each callback.\n# Depending on which return value, the transition will be executed correctly or\n# fallback/error callbacks will be triggered.\n\n# The transition callback successfully performed its required functionality.\nuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\n# The transition callback failed to perform its required functionality.\nuint8 TRANSITION_CALLBACK_FAILURE = 98\n\n# The transition callback encountered an error that requires special cleanup, if\n# possible.\nuint8 TRANSITION_CALLBACK_ERROR = 99\n\n##\n## Fields\n##\n\n# The transition id from above definitions.\nuint8 id\n\n# A text label of the transition.\nstring label\n",
         "# Navigation Satellite fix for any Global Navigation Satellite System\n#\n# Specified using the WGS 84 reference ellipsoid\n\n# header.stamp specifies the ROS time for this measurement (the\n#        corresponding satellite time may be reported using the\n#        sensor_msgs/TimeReference message).\n#\n# header.frame_id is the frame of reference reported by the satellite\n#        receiver, usually the location of the antenna.  This is a\n#        Euclidean frame relative to the vehicle, not a reference\n#        ellipsoid.\nstd_msgs/Header header\n\n# Satellite fix status information.\nNavSatStatus status\n\n# Latitude [degrees]. Positive is north of equator; negative is south.\nfloat64 latitude\n\n# Longitude [degrees]. Positive is east of prime meridian; negative is west.\nfloat64 longitude\n\n# Altitude [m]. Positive is above the WGS 84 ellipsoid\n# (quiet NaN if no altitude is available).\nfloat64 altitude\n\n# Position covariance [m^2] defined relative to a tangential plane\n# through the reported position. The components are East, North, and\n# Up (ENU), in row-major order.\n#\n# Beware: this coordinate system exhibits singularities at the poles.\nfloat64[9] position_covariance\n\n# If the covariance of the fix is known, fill it in completely. If the\n# GPS receiver provides the variance of each measurement, put them\n# along the diagonal. If only Dilution of Precision is available,\n# estimate an approximate covariance from that.\n\nuint8 COVARIANCE_TYPE_UNKNOWN = 0\nuint8 COVARIANCE_TYPE_APPROXIMATED = 1\nuint8 COVARIANCE_TYPE_DIAGONAL_KNOWN = 2\nuint8 COVARIANCE_TYPE_KNOWN = 3\n\nuint8 position_covariance_type\n\n================================================================================\nMSG: sensor_msgs/NavSatStatus\n# Navigation Satellite fix status for any Global Navigation Satellite System.\n#\n# Whether to output an augmented fix is determined by both the fix\n# type and the last time differential corrections were received.  A\n# fix is valid when status >= STATUS_FIX.\n\nint8 STATUS_NO_FIX =  -1        # unable to fix position\nint8 STATUS_FIX =      0        # unaugmented fix\nint8 STATUS_SBAS_FIX = 1        # with satellite-based augmentation\nint8 STATUS_GBAS_FIX = 2        # with ground-based augmentation\n\nint8 status\n\n# Bits defining which Global Navigation Satellite System signals were\n# used by the receiver.\n\nuint16 SERVICE_GPS =     1\nuint16 SERVICE_GLONASS = 2\nuint16 SERVICE_COMPASS = 4      # includes BeiDou.\nuint16 SERVICE_GALILEO = 8\n\nuint16 service\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\n# Transform frame with which this data is associated.\nstring frame_id\n\n================================================================================\nMSG: builtin_interfaces/Time\n# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 1e9).\nuint32 nanosec\n"
      ]
   },
   "result":true,
   "id":"call_service:/rosapi/topics_and_raw_types:1"
}